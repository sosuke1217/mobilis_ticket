<div class="container-lg my-5">
  <div class="card shadow-sm">
    <div class="card-header bg-primary text-white">
      <div class="d-flex justify-content-between align-items-center">
        <h2 class="h5 mb-0">
          <i class="fas fa-ticket-alt me-2"></i>
          <%= @user.name %> さんのチケット管理
        </h2>
        <div>
          <%= link_to admin_user_path(@user), class: "btn btn-outline-light btn-sm me-2" do %>
            <i class="fas fa-user me-1"></i>ユーザー詳細
          <% end %>
          <%= link_to admin_users_path, class: "btn btn-outline-light btn-sm" do %>
            <i class="fas fa-list me-1"></i>ユーザー一覧
          <% end %>
        </div>
      </div>
    </div>

    <div class="card-body">
      <!-- ユーザー情報 -->
      <div class="row mb-4">
        <div class="col-md-6">
          <h6 class="text-muted mb-2">ユーザー情報</h6>
          <div class="card bg-light">
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <p class="mb-1"><strong>名前:</strong> <%= @user.name %></p>
                  <p class="mb-1"><strong>電話番号:</strong> <%= @user.phone_number || '未設定' %></p>
                  <p class="mb-1"><strong>メール:</strong> <%= @user.email || '未設定' %></p>
                </div>
                <div class="col-md-6">
                  <p class="mb-1"><strong>登録日:</strong> <%= l(@user.created_at.to_date) %></p>
                  <p class="mb-1"><strong>残チケット:</strong> <%= @user.active_ticket_count %> 回</p>
                  <p class="mb-1"><strong>残額合計:</strong> <%= number_to_currency(@user.remaining_ticket_value, unit: "¥", precision: 0) %></p>
                  
                  <!-- デバッグ情報 -->
                  <% if Rails.env.development? %>
                    <div class="mt-2 p-2 bg-light border rounded">
                      <small class="text-muted">
                        <strong>デバッグ情報:</strong><br>
                        総チケット数: <%= @user.tickets.count %><br>
                        有効チケット数: <%= @user.tickets.where("remaining_count > 0").count %><br>
                        残り回数合計: <%= @user.tickets.sum(:remaining_count) %><br>
                        active_ticket_count: <%= @user.active_ticket_count %><br>
                        cached_active_ticket_count: <%= @user.cached_active_ticket_count %><br>
                        キャッシュキー: user_<%= @user.id %>_active_tickets<br>
                        <br>
                        <strong>チケット詳細:</strong><br>
                        <% @user.tickets.includes(:ticket_template).each_with_index do |ticket, index| %>
                          <%= index + 1 %>. <%= ticket.ticket_template&.name %> - 
                          残り: <%= ticket.remaining_count %> / 
                          総数: <%= ticket.total_count %> - 
                          ステータス: <%= ticket.remaining_count > 0 ? '有効' : '無効' %><br>
                        <% end %>
                      </small>
                    </div>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="col-md-6">
          <h6 class="text-muted mb-2">新規チケット発行</h6>
          <div class="card bg-light">
            <div class="card-body">
              <form id="newTicketForm">
                <div class="row">
                  <div class="col-md-6">
                    <label for="ticketTemplate" class="form-label">チケット種類</label>
                    <select class="form-select" id="ticketTemplate" required>
                      <option value="">選択してください</option>
                      <% @ticket_templates.each do |template| %>
                        <option value="<%= template.id %>" data-price="<%= template.price %>" data-count="<%= template.total_count %>">
                          <%= template.name %> (¥<%= number_with_delimiter(template.price) %>)
                        </option>
                      <% end %>
                    </select>
                  </div>
                  <div class="col-md-6">
                    <label for="ticketCount" class="form-label">枚数</label>
                    <input type="number" class="form-control" id="ticketCount" min="1" value="1" required>
                  </div>
                </div>
                <div class="mt-3">
                  <button type="submit" class="btn btn-success btn-sm">
                    <i class="fas fa-plus me-1"></i>チケット発行
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- チケット一覧 -->
      <h6 class="text-muted mb-3">保有チケット一覧</h6>
      <div class="table-responsive">
        <table class="table table-hover table-striped align-middle">
          <thead class="table-light">
            <tr>
              <th>チケット名</th>
              <th>残回数</th>
              <th>購入日</th>
              <th>有効期限</th>
              <th>ステータス</th>
              <th>操作</th>
            </tr>
          </thead>
          <tbody>
            <% @tickets.each do |ticket| %>
              <tr>
                <td>
                  <strong><%= ticket.ticket_template.name %></strong>
                  <br>
                  <small class="text-muted">¥<%= number_with_delimiter(ticket.ticket_template.price) %></small>
                </td>
                <td>
                  <span class="badge bg-<%= ticket.remaining_count > 0 ? 'success' : 'secondary' %>">
                    <%= ticket.remaining_count %> / <%= ticket.total_count %>
                  </span>
                </td>
                <td><%= l(ticket.purchase_date.to_date) if ticket.purchase_date %></td>
                <td>
                  <% if ticket.expiry_date %>
                    <%= l(ticket.expiry_date.to_date) %>
                    <% if ticket.expiry_date < Date.current %>
                      <span class="badge bg-danger">期限切れ</span>
                    <% end %>
                  <% else %>
                    <span class="text-muted">なし</span>
                  <% end %>
                </td>
                <td>
                  <% if ticket.expiry_date && ticket.expiry_date < Date.current %>
                    <span class="badge bg-danger">期限切れ</span>
                  <% elsif ticket.remaining_count <= 0 %>
                    <span class="badge bg-secondary">使用済み</span>
                  <% elsif ticket.remaining_count <= 2 %>
                    <span class="badge bg-warning">残り少ない</span>
                  <% else %>
                    <span class="badge bg-success">利用可能</span>
                  <% end %>
                </td>
                <td>
                  <% if ticket.remaining_count > 0 && (!ticket.expiry_date || ticket.expiry_date >= Date.current) %>
                    <button type="button" 
                            class="btn btn-sm btn-outline-primary use-ticket-btn"
                            data-ticket-id="<%= ticket.id %>"
                            data-ticket-name="<%= ticket.ticket_template.name %>">
                      使用
                    </button>
                  <% else %>
                    <span class="text-muted">使用不可</span>
                  <% end %>
                  
                  <!-- 削除ボタン -->
                  <button type="button" 
                          class="btn btn-sm btn-outline-danger delete-ticket-btn ms-1"
                          data-ticket-id="<%= ticket.id %>"
                          data-ticket-name="<%= ticket.ticket_template.name %>">
                    <i class="fas fa-trash"></i>
                  </button>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>

      <% if @tickets.empty? %>
        <div class="text-center py-4">
          <i class="fas fa-ticket-alt fa-3x text-muted mb-3"></i>
          <p class="text-muted">保有チケットがありません</p>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- チケット削除確認モーダル -->
<div class="modal fade" id="deleteTicketModal" tabindex="-1" aria-labelledby="deleteTicketModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="deleteTicketModalLabel">
          <i class="fas fa-exclamation-triangle me-2"></i>チケット削除の確認
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>以下のチケットを削除しますか？</p>
        <div class="alert alert-warning">
          <strong>チケット名:</strong> <span id="deleteTicketName"></span><br>
          <strong>残り回数:</strong> <span id="deleteTicketRemaining"></span><br>
          <strong>注意:</strong> この操作は取り消せません。
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">キャンセル</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteTicketBtn">
          <i class="fas fa-trash me-1"></i>削除を実行
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// 初期化関数
function initializeTicketManagement() {
  console.log('🎫 チケット管理初期化開始');
  
  // 新規チケット発行フォーム
  const newTicketForm = document.getElementById('newTicketForm');
  if (newTicketForm) {
    console.log('✅ チケット発行フォームを発見');
    
    // 既存のイベントリスナーを削除
    newTicketForm.removeEventListener('submit', handleTicketSubmit);
    newTicketForm.addEventListener('submit', handleTicketSubmit);
  } else {
    console.error('❌ チケット発行フォームが見つかりません');
  }
  
  // チケット使用・削除ボタンのイベントリスナーを設定
  setupTicketButtons();
  
  console.log('🎫 チケット管理初期化完了');
}

// チケット発行処理
function handleTicketSubmit(e) {
  e.preventDefault();
  console.log('🎫 チケット発行処理開始');
  
  const templateId = document.getElementById('ticketTemplate').value;
  const count = document.getElementById('ticketCount').value;
  
  if (!templateId) {
    alert('チケット種類を選択してください');
    return;
  }
  
  // ボタンを無効化
  const submitBtn = this.querySelector('button[type="submit"]');
  const originalText = submitBtn.innerHTML;
  submitBtn.disabled = true;
  submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>発行中...';
  
  // CSRF トークンを取得
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
  
  // チケット発行APIを呼び出し
  fetch('/admin/tickets/create_for_user', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': csrfToken
    },
    body: JSON.stringify({
      user_id: <%= @user.id %>,
      ticket_template_id: templateId,
      count: count
    })
  })
  .then(response => {
    console.log('Response status:', response.status);
    
    if (!response.ok) {
      return response.json().then(data => {
        throw new Error(data.error || 'チケット発行に失敗しました');
      });
    }
    return response.json();
  })
  .then(data => {
    console.log('✅ Ticket created:', data);
    
    // 成功メッセージを表示
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-success alert-dismissible fade show';
    alertDiv.innerHTML = `
      <i class="fas fa-check-circle me-2"></i>
      ${data.message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));
    
    // フォームをリセット
    newTicketForm.reset();
    
    // 新しく作成されたチケットを一覧に追加
    addNewTicketToList(data.ticket);
    
    // 残りチケット数と残額を更新
    updateTicketCounts();
    
    // 成功メッセージを3秒後に自動で消す
    setTimeout(() => {
      if (alertDiv.firstElementChild) {
        alertDiv.firstElementChild.remove();
      }
    }, 3000);
  })
  .catch(error => {
    console.error('❌ Error creating ticket:', error);
    alert('チケット発行エラー: ' + error.message);
  })
  .finally(() => {
    // ボタンを元に戻す
    submitBtn.disabled = false;
    submitBtn.innerHTML = originalText;
  });
}

// チケットボタンの設定
function setupTicketButtons() {
  console.log('🔘 チケットボタンの設定開始');
  
  // 既存のイベントリスナーを削除
  document.removeEventListener('click', handleTicketButtonClick);
  
  // 新しいイベントリスナーを設定
  document.addEventListener('click', handleTicketButtonClick);
  
  console.log('🔘 チケットボタンの設定完了');
}

// チケットボタンクリック処理
function handleTicketButtonClick(e) {
  // チケット使用ボタン
  if (e.target.classList.contains('use-ticket-btn')) {
    handleTicketUse(e);
  }
  
  // チケット削除ボタン
  if (e.target.classList.contains('delete-ticket-btn') || e.target.closest('.delete-ticket-btn')) {
    handleTicketDelete(e);
  }
}

// チケット使用処理
function handleTicketUse(e) {
  const ticketId = e.target.getAttribute('data-ticket-id');
  const ticketName = e.target.getAttribute('data-ticket-name');
  
  if (!confirm(`「${ticketName}」を1回使用しますか？`)) {
    return;
  }
  
  // ボタンを無効化
  const originalText = e.target.innerHTML;
  e.target.disabled = true;
  e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
  
  // CSRF トークンを取得
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
  
  // チケット使用APIを呼び出し
  fetch(`/admin/tickets/${ticketId}/use`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': csrfToken
    }
  })
  .then(response => {
    console.log('Response status:', response.status);
    
    if (!response.ok) {
      return response.json().then(data => {
        throw new Error(data.error || 'チケット使用に失敗しました');
      });
    }
    return response.json();
  })
  .then(data => {
    console.log('✅ Ticket used:', data);
    
    // 成功メッセージを表示
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-success alert-dismissible fade show';
    alertDiv.innerHTML = `
      <i class="fas fa-check-circle me-2"></i>
      チケットを使用しました
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));
    
    // ページをリロード
    setTimeout(() => {
      window.location.reload();
    }, 1500);
  })
  .catch(error => {
    console.error('❌ Error using ticket:', error);
    alert('チケット使用エラー: ' + error.message);
  })
  .finally(() => {
    // ボタンを元に戻す
    e.target.disabled = false;
    e.target.innerHTML = originalText;
  });
}

// チケット削除処理
function handleTicketDelete(e) {
  const deleteBtn = e.target.classList.contains('delete-ticket-btn') ? e.target : e.target.closest('.delete-ticket-btn');
  const ticketId = deleteBtn.getAttribute('data-ticket-id');
  const ticketName = deleteBtn.getAttribute('data-ticket-name');
  
  // チケット行から残り回数を取得
  const ticketRow = deleteBtn.closest('tr');
  const remainingCount = ticketRow.querySelector('td:nth-child(2) .badge').textContent.split('/')[0].trim();
  
  // モーダルにデータを設定
  document.getElementById('deleteTicketName').textContent = ticketName;
  document.getElementById('deleteTicketRemaining').textContent = remainingCount;
  
  // モーダルを表示
  const deleteModal = new bootstrap.Modal(document.getElementById('deleteTicketModal'));
  deleteModal.show();
  
  // 削除実行ボタンのイベントリスナー
  document.getElementById('confirmDeleteTicketBtn').onclick = function() {
    deleteTicket(ticketId, ticketRow);
    deleteModal.hide();
  };
}

// チケット削除実行
function deleteTicket(ticketId, ticketRow) {
    // 削除ボタンを無効化
    const deleteBtn = ticketRow.querySelector('.delete-ticket-btn');
    const originalText = deleteBtn.innerHTML;
    deleteBtn.disabled = true;
    deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    
    // CSRF トークンを取得
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    
    // チケット削除APIを呼び出し
    fetch(`/admin/tickets/${ticketId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': csrfToken
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      return response;
    })
    .then(() => {
      console.log('✅ Ticket deleted:', ticketId);
      
      // 成功メッセージを表示
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-success alert-dismissible fade show';
      alertDiv.innerHTML = `
        <i class="fas fa-check-circle me-2"></i>
        チケットを削除しました
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));
      
      // チケット行を即座に削除
      ticketRow.remove();
      
      // 残りチケット数と残額を更新
      updateTicketCounts();
      
      // チケットが0件になった場合の処理
      if (document.querySelectorAll('tbody tr').length === 0) {
        const tbody = document.querySelector('tbody');
        tbody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center py-4">
              <i class="fas fa-ticket-alt fa-3x text-muted mb-3"></i>
              <p class="text-muted">保有チケットがありません</p>
            </td>
          </tr>
        `;
      }
    })
    .catch(error => {
      console.error('❌ Error deleting ticket:', error);
      alert('チケット削除エラー: ' + error.message);
      
      // ボタンを元に戻す
      deleteBtn.disabled = false;
      deleteBtn.innerHTML = originalText;
    });
  }
  
  // 新しく作成されたチケットを一覧に追加する関数
  function addNewTicketToList(newTicket) {
    const tbody = document.querySelector('tbody');
    const newRow = document.createElement('tr');
    
    // 日付フォーマット関数
    function formatDate(dateString) {
      if (!dateString) return 'なし';
      const date = new Date(dateString);
      return date.toLocaleDateString('ja-JP');
    }
    
    // 現在の日付を取得
    const currentDate = new Date();
    
    newRow.innerHTML = `
      <td>
        <strong>${newTicket.ticket_template.name}</strong>
        <br>
        <small class="text-muted">¥${newTicket.ticket_template.price.toLocaleString()}</small>
      </td>
      <td>
        <span class="badge bg-success">
          ${newTicket.remaining_count} / ${newTicket.total_count}
        </span>
      </td>
      <td>${formatDate(newTicket.purchase_date)}</td>
      <td>
        ${formatDate(newTicket.expiry_date)}
        ${newTicket.expiry_date && new Date(newTicket.expiry_date) < currentDate ? '<span class="badge bg-danger">期限切れ</span>' : ''}
      </td>
      <td>
        ${newTicket.expiry_date && new Date(newTicket.expiry_date) < currentDate ? '<span class="badge bg-danger">期限切れ</span>' : ''}
        ${newTicket.remaining_count <= 0 ? '<span class="badge bg-secondary">使用済み</span>' : ''}
        ${newTicket.remaining_count <= 2 ? '<span class="badge bg-warning">残り少ない</span>' : ''}
        ${newTicket.remaining_count > 0 && (!newTicket.expiry_date || new Date(newTicket.expiry_date) >= currentDate) ? '<span class="badge bg-success">利用可能</span>' : ''}
      </td>
      <td>
        ${newTicket.remaining_count > 0 && (!newTicket.expiry_date || new Date(newTicket.expiry_date) >= currentDate) ? `
          <button type="button" 
                  class="btn btn-sm btn-outline-primary use-ticket-btn"
                  data-ticket-id="${newTicket.id}"
                  data-ticket-name="${newTicket.ticket_template.name}">
            使用
          </button>
        ` : '<span class="text-muted">使用不可</span>'}
        
        <!-- 削除ボタン -->
        <button type="button" 
                class="btn btn-sm btn-outline-danger delete-ticket-btn ms-1"
                data-ticket-id="${newTicket.id}"
                data-ticket-name="${newTicket.ticket_template.name}">
          <i class="fas fa-trash"></i>
        </button>
      </td>
    `;
    tbody.appendChild(newRow);
  }

  // チケット数と残額を更新
  function updateTicketCounts() {
    // 残りチケット数を再計算
    const remainingTickets = document.querySelectorAll('tbody tr').length;
    const remainingCount = Array.from(document.querySelectorAll('tbody tr')).reduce((total, row) => {
      const badge = row.querySelector('td:nth-child(2) .badge');
      if (badge) {
        const count = parseInt(badge.textContent.split('/')[0].trim());
        return total + (isNaN(count) ? 0 : count);
      }
      return total;
    }, 0);
    
    // 表示を更新
    const ticketCountElement = document.querySelector('p:contains("残チケット:")');
    if (ticketCountElement) {
      ticketCountElement.innerHTML = ticketCountElement.innerHTML.replace(
        /残チケット: \d+ 回/,
        `残チケット: ${remainingCount} 回`
      );
    }
    
    // デバッグ情報も更新
    const debugElement = document.querySelector('.bg-light.border.rounded');
    if (debugElement) {
      const totalTicketsElement = debugElement.querySelector('small');
      if (totalTicketsElement) {
        totalTicketsElement.innerHTML = totalTicketsElement.innerHTML.replace(
          /総チケット数: \d+/,
          `総チケット数: ${remainingTickets}`
        );
        totalTicketsElement.innerHTML = totalTicketsElement.innerHTML.replace(
          /有効チケット数: \d+/,
          `有効チケット数: ${remainingTickets}`
        );
        totalTicketsElement.innerHTML = totalTicketsElement.innerHTML.replace(
          /残り回数合計: \d+/,
          `残り回数合計: ${remainingCount}`
        );
      }
    }
  }

  // ページ読み込み時に初期化を実行
  document.addEventListener('DOMContentLoaded', initializeTicketManagement);
  
  // ページが完全に読み込まれた後に初期化を実行
  window.addEventListener('load', initializeTicketManagement);
  
  // 少し遅れて初期化を実行（Turboなどの問題に対応）
  setTimeout(initializeTicketManagement, 100);
  setTimeout(initializeTicketManagement, 500);
  
  // ページが表示された後に初期化を実行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTicketManagement);
  } else {
    initializeTicketManagement();
  }
</script> 