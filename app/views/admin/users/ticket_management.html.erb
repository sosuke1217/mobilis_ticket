<style>
  /* 削除モーダルのカスタムスタイル */
  #deleteTicketModal .modal-content {
    /* 高さ制限を完全に削除 */
    max-height: none;
    min-height: 400px;
    overflow: visible;
  }
  
  #deleteTicketModal .modal-body {
    /* スクロール制限を完全に削除 */
    overflow: visible;
    padding: 2rem;
    min-height: 200px;
  }
  
  #deleteTicketModal .modal-footer {
    border-top: 1px solid #dee2e6;
    padding: 1.5rem;
    background-color: #f8f9fa;
    margin-top: 0;
    min-height: 80px;
    /* フッターの幅をボディと合わせる */
    width: 100%;
    margin-left: 0;
    margin-right: 0;
  }
  
  #deleteTicketModal .alert {
    margin-bottom: 0;
    border: none;
    background-color: #fff3cd;
    color: #856404;
  }
  
  #deleteTicketModal .btn {
    padding: 0.5rem 1.5rem;
    font-weight: 500;
  }
  
  #deleteTicketModal .text-danger {
    color: #dc3545 !important;
  }
  
  #deleteTicketModal .text-muted {
    color: #6c757d !important;
  }
  
  /* モーダル背景の暗さを調整 */
  #deleteTicketModal.modal-backdrop {
    opacity: 0.2 !important;
  }
  
  /* モーダルが閉じた後の背景を明るくする */
  body.modal-open {
    background-color: rgba(0, 0, 0, 0.05) !important;
  }
  
  /* モーダル背景の透明度を調整 */
  .modal-backdrop.show {
    opacity: 0.2 !important;
  }
</style>
<div class="container-lg my-5">
  <div class="card shadow-sm">
    <div class="card-header bg-primary text-white">
      <div class="d-flex justify-content-between align-items-center">
        <h2 class="h5 mb-0">
          <i class="fas fa-ticket-alt me-2"></i>
          <%= @user.name %> さんのチケット管理
        </h2>
        <div>
          <%= link_to admin_user_path(@user), class: "btn btn-outline-light btn-sm me-2" do %>
            <i class="fas fa-user me-1"></i>ユーザー詳細
          <% end %>
          <%= link_to admin_users_path, class: "btn btn-outline-light btn-sm" do %>
            <i class="fas fa-list me-1"></i>ユーザー一覧
          <% end %>
        </div>
      </div>
    </div>

    <div class="card-body">
      <!-- ユーザー情報 -->
      <div class="row mb-4">
        <div class="col-md-6">
          <h6 class="text-muted mb-2">ユーザー情報</h6>
          <div class="card bg-light">
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <p class="mb-1"><strong>名前:</strong> <%= @user.name %></p>
                  <p class="mb-1"><strong>電話番号:</strong> <%= @user.phone_number || '未設定' %></p>
                  <p class="mb-1"><strong>メール:</strong> <%= @user.email || '未設定' %></p>
                </div>
                <div class="col-md-6">
                  <p class="mb-1"><strong>登録日:</strong> <%= l(@user.created_at.to_date) %></p>
                  <p class="mb-1" id="remainingTicketCount"><strong>残チケット:</strong> <%= @user.active_ticket_count %> 回</p>
                  <p class="mb-1" id="remainingTicketValue"><strong>チケット価格合計:</strong> <%= number_to_currency(@user.remaining_ticket_value, unit: "¥", precision: 0) %></p>
                  
                  <!-- デバッグ情報 -->
                  <% if Rails.env.development? %>
                    <div class="mt-2 p-2 bg-light border rounded">
                      <small class="text-muted">
                        <strong>デバッグ情報:</strong><br>
                        総チケット数: <%= @user.tickets.count %><br>
                        有効チケット数: <%= @user.tickets.where("remaining_count > 0").count %><br>
                        残り回数合計: <%= @user.tickets.sum(:remaining_count) %><br>
                        active_ticket_count: <%= @user.active_ticket_count %><br>
                        cached_active_ticket_count: <%= @user.cached_active_ticket_count %><br>
                        キャッシュキー: user_<%= @user.id %>_active_tickets<br>
                        <br>
                        <strong>チケット詳細:</strong><br>
                        <% @user.tickets.includes(:ticket_template).each_with_index do |ticket, index| %>
                          <%= index + 1 %>. <%= ticket.ticket_template&.name %> - 
                          残り: <%= ticket.remaining_count %> / 
                          総数: <%= ticket.total_count %> - 
                          ステータス: <%= ticket.remaining_count > 0 ? '有効' : '無効' %><br>
                        <% end %>
                      </small>
                    </div>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="col-md-6">
          <h6 class="text-muted mb-2">新規チケット発行</h6>
          <div class="card bg-light">
            <div class="card-body">
              <form id="newTicketForm">
                <div class="row">
                  <div class="col-md-6">
                    <label for="ticketTemplate" class="form-label">チケット種類</label>
                    <select class="form-select" id="ticketTemplate" required>
                      <option value="">選択してください</option>
                      <% @ticket_templates.each do |template| %>
                        <option value="<%= template.id %>" data-price="<%= template.price %>" data-count="<%= template.total_count %>">
                          <%= template.name %> (¥<%= number_with_delimiter(template.price) %>)
                        </option>
                      <% end %>
                    </select>
                  </div>
                  <div class="col-md-6">
                    <label for="ticketCount" class="form-label">枚数</label>
                    <input type="number" class="form-control" id="ticketCount" min="1" value="1" required>
                  </div>
                </div>
                <div class="mt-3">
                  <button type="submit" class="btn btn-success btn-sm">
                    <i class="fas fa-plus me-1"></i>チケット発行
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- チケット一覧 -->
      <h6 class="text-muted mb-3">保有チケット一覧</h6>
      <div class="table-responsive">
        <table class="table table-hover table-striped align-middle">
          <thead class="table-light">
            <tr>
              <th>チケット名</th>
              <th>残回数</th>
              <th>購入日</th>
              <th>有効期限</th>
              <th>ステータス</th>
              <th>操作</th>
            </tr>
          </thead>
          <tbody>
            <% if @tickets.empty? %>
              <tr>
                <td colspan="6" class="text-center py-4">
                  <i class="fas fa-ticket-alt fa-3x text-muted mb-3"></i>
                  <p class="text-muted">保有チケットがありません</p>
                </td>
              </tr>
            <% else %>
              <% @tickets.each do |ticket| %>
                <tr data-ticket-id="<%= ticket.id %>">
                  <td>
                    <strong><%= ticket.ticket_template.name %></strong>
                    <br><small class="text-muted">¥<%= number_with_delimiter(ticket.ticket_template.price) %></small>
                </td>
                <td>
                    <span class="badge bg-primary">
                    <%= ticket.remaining_count %> / <%= ticket.total_count %>
                  </span>
                </td>
                  <td><%= ticket.purchase_date&.strftime('%Y/%m/%d') %></td>
                <td>
                    <%= ticket.expiry_date&.strftime('%Y/%m/%d') || '無期限' %>
                    <% if ticket.expiry_date && ticket.expiry_date < Date.current %>
                      <span class="badge bg-danger">期限切れ</span>
                  <% end %>
                </td>
                <td>
                  <% if ticket.expiry_date && ticket.expiry_date < Date.current %>
                    <span class="badge bg-danger">期限切れ</span>
                  <% elsif ticket.remaining_count <= 0 %>
                    <span class="badge bg-secondary">使用済み</span>
                  <% elsif ticket.remaining_count <= 2 %>
                    <span class="badge bg-warning">残り少ない</span>
                  <% else %>
                    <span class="badge bg-success">利用可能</span>
                  <% end %>
                </td>
                <td>
                  <% if ticket.remaining_count > 0 && (!ticket.expiry_date || ticket.expiry_date >= Date.current) %>
                    <button type="button" 
                            class="btn btn-sm btn-outline-primary use-ticket-btn"
                            data-ticket-id="<%= ticket.id %>"
                            data-ticket-name="<%= ticket.ticket_template.name %>">
                      使用
                    </button>
                  <% else %>
                    <span class="text-muted">使用不可</span>
                  <% end %>
                    
                    <!-- 削除ボタン -->
                    <button type="button" 
                            class="btn btn-sm btn-outline-danger delete-ticket-btn ms-1"
                            data-ticket-id="<%= ticket.id %>"
                            data-ticket-name="<%= ticket.ticket_template.name %>">
                      <i class="fas fa-trash"></i>
                    </button>
                </td>
              </tr>
              <% end %>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
      </div>

<!-- チケット削除確認モーダル -->
<div class="modal fade" id="deleteTicketModal" tabindex="-1" aria-labelledby="deleteTicketModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-sm">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="deleteTicketModalLabel">
          <i class="fas fa-exclamation-triangle me-2"></i>
          チケット削除の確認
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-4">
        <div class="text-center">
          <i class="fas fa-trash-alt fa-3x text-danger mb-3"></i>
          <p class="mb-3">以下のチケットを削除しますか？</p>
          <div class="alert alert-warning mb-3">
            <strong>チケット名:</strong> <span id="deleteTicketName"></span><br>
            <strong>残り回数:</strong> <span id="deleteTicketRemaining"></span> 回
          </div>
          <p class="text-muted small mb-0">
            <i class="fas fa-info-circle me-1"></i>
            この操作は取り消すことができません
          </p>
        </div>
      </div>
      <div class="modal-footer justify-content-center p-3">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="cleanupModalBackground()">
          <i class="fas fa-times me-1"></i>キャンセル
        </button>
        <button type="button" class="btn btn-danger" id="confirmDeleteTicketBtn">
          <i class="fas fa-trash me-1"></i>削除する
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// 初期化関数
function initializeTicketManagement() {
  console.log('🎫 チケット管理初期化開始');
  
  // 新規チケット発行フォーム
  const newTicketForm = document.getElementById('newTicketForm');
  if (newTicketForm) {
    console.log('✅ チケット発行フォームを発見');
    
    // 既存のイベントリスナーを削除
    newTicketForm.removeEventListener('submit', handleTicketSubmit);
    newTicketForm.addEventListener('submit', handleTicketSubmit);
  } else {
    console.error('❌ チケット発行フォームが見つかりません');
  }
  
  // チケット使用・削除ボタンのイベントリスナーを設定
  setupTicketButtons();
  
  console.log('🎫 チケット管理初期化完了');
}

// チケット発行処理
function handleTicketSubmit(e) {
    e.preventDefault();
  console.log('🎫 チケット発行処理開始');
    
    const templateId = document.getElementById('ticketTemplate').value;
    const count = document.getElementById('ticketCount').value;
    
    if (!templateId) {
      alert('チケット種類を選択してください');
      return;
    }
    
    // ボタンを無効化
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>発行中...';
    
    // CSRF トークンを取得
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    
    // チケット発行APIを呼び出し
    fetch('/admin/tickets/create_for_user', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-CSRF-Token': csrfToken
      },
      body: JSON.stringify({
        user_id: <%= @user.id %>,
        ticket_template_id: templateId,
        count: count
      })
    })
    .then(response => {
      console.log('Response status:', response.status);
      
      if (!response.ok) {
        return response.json().then(data => {
          throw new Error(data.error || 'チケット発行に失敗しました');
        });
      }
      return response.json();
    })
    .then(data => {
      console.log('✅ Ticket created:', data);
      
      // 成功メッセージを表示
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-success alert-dismissible fade show';
      alertDiv.innerHTML = `
        <i class="fas fa-check-circle me-2"></i>
        ${data.message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));
      
      // フォームをリセット
      newTicketForm.reset();
      
      // 新しく作成されたチケットを一覧に追加
      addNewTicketToList(data.ticket);
      
      // チケットがない状態の表示を更新
      const tbody = document.querySelector('tbody');
      const noTicketsRow = tbody.querySelector('tr td[colspan="6"]');
      
      if (noTicketsRow) {
        console.log('🗑️ 「保有チケットがありません」の行を削除中...');
        // 「保有チケットがありません」の行を削除
        tbody.innerHTML = '';
        // 新しく作成されたチケットを追加（既にaddNewTicketToListで追加済み）
        console.log('✅ 新チケットを追加完了');
        
        // 残額を更新（新チケット追加後）
        setTimeout(() => {
          updateTicketCounts();
          console.log('🔄 遅延後の残額更新完了');
        }, 200);
      } else {
        // 既存のチケットがある場合は、残額を更新
        setTimeout(() => {
          updateTicketCounts();
          console.log('🔄 既存チケットありの場合の残額更新完了');
        }, 100);
      }
      
      // 成功メッセージを3秒後に自動で消す
      setTimeout(() => {
        if (alertDiv && alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 3000);
    })
    .catch(error => {
      console.error('❌ Error creating ticket:', error);
    
    // エラーメッセージを表示
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-danger alert-dismissible fade show';
    alertDiv.innerHTML = `
      <i class="fas fa-exclamation-triangle me-2"></i>
      チケット発行エラー: ${error.message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));
    
    // エラーメッセージを5秒後に自動で消す
    setTimeout(() => {
      if (alertDiv && alertDiv.parentNode) {
        alertDiv.remove();
      }
    }, 5000);
    })
    .finally(() => {
      // ボタンを元に戻す
      submitBtn.disabled = false;
      submitBtn.innerHTML = originalText;
    });
}

// チケットボタンの設定
function setupTicketButtons() {
  try {
    console.log('🔘 チケットボタンの設定開始');
    
    // 既存のイベントリスナーを削除（重複防止）
    document.removeEventListener('click', handleTicketButtonClick);
    
    // 新しいイベントリスナーを設定
    document.addEventListener('click', handleTicketButtonClick);
    
    console.log('🔘 チケットボタンの設定完了');
  } catch (error) {
    console.error('❌ チケットボタン設定中にエラーが発生しました:', error);
  }
}

// チケットボタンクリック処理
function handleTicketButtonClick(e) {
  // チケット使用ボタン
    if (e.target.classList.contains('use-ticket-btn')) {
    handleTicketUse(e);
  }
  
  // チケット削除ボタン
  if (e.target.classList.contains('delete-ticket-btn') || e.target.closest('.delete-ticket-btn')) {
    handleTicketDelete(e);
  }
}

// チケット使用処理
function handleTicketUse(e) {
  // 既に処理中の場合は何もしない
  if (e.target.disabled) {
    console.log('⚠️ 既に処理中のため、重複実行をスキップ');
    return;
  }
  
      const ticketId = e.target.getAttribute('data-ticket-id');
      const ticketName = e.target.getAttribute('data-ticket-name');
  
  console.log('🎫 チケット使用処理開始:', { ticketId, ticketName });
      
      if (!confirm(`「${ticketName}」を1回使用しますか？`)) {
    console.log('❌ ユーザーがチケット使用をキャンセル');
        return;
      }
      
      // ボタンを無効化
      const originalText = e.target.innerHTML;
      e.target.disabled = true;
      e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
  
  console.log('🔄 チケット使用API呼び出し中...');
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      // チケット使用APIを呼び出し
      fetch(`/admin/tickets/${ticketId}/use`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        }
      })
      .then(response => {
        console.log('Response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || 'チケット使用に失敗しました');
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ Ticket used:', data);
        
        // 成功メッセージを表示
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success alert-dismissible fade show';
        alertDiv.innerHTML = `
          <i class="fas fa-check-circle me-2"></i>
          チケットを使用しました
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));
        
    // 成功メッセージを2秒後に自動で消す
        setTimeout(() => {
      if (alertDiv && alertDiv.parentNode) {
        alertDiv.remove();
      }
    }, 2000);

    // 残りチケット数と残額を即座に更新
    updateTicketCounts();
    
    // チケット使用後の表示を即座に更新
    updateTicketDisplayAfterUse(ticketId);
      })
      .catch(error => {
        console.error('❌ Error using ticket:', error);

    // エラーメッセージを表示
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-danger alert-dismissible fade show';
    alertDiv.innerHTML = `
      <i class="fas fa-exclamation-triangle me-2"></i>
      チケット使用エラー: ${error.message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));

    // エラーメッセージを5秒後に自動で消す
    setTimeout(() => {
      if (alertDiv && alertDiv.parentNode) {
        alertDiv.remove();
      }
    }, 5000);
      })
      .finally(() => {
        // ボタンを元に戻す
        e.target.disabled = false;
        e.target.innerHTML = originalText;
    console.log('🔄 チケット使用処理完了');
  });
}

// チケット削除処理
function handleTicketDelete(e) {
  try {
    console.log('🗑️ チケット削除処理開始');
    
    const deleteBtn = e.target.classList.contains('delete-ticket-btn') ? e.target : e.target.closest('.delete-ticket-btn');
    if (!deleteBtn) {
      console.error('❌ 削除ボタンが見つかりません');
      return;
    }
    
    // 削除ボタンの詳細情報をログ出力
    console.log('🔍 削除ボタンの詳細:', {
      element: deleteBtn,
      classList: deleteBtn.classList.toString(),
      attributes: {
        'data-ticket-id': deleteBtn.getAttribute('data-ticket-id'),
        'data-ticket-name': deleteBtn.getAttribute('data-ticket-name')
      },
      innerHTML: deleteBtn.innerHTML,
      outerHTML: deleteBtn.outerHTML,
      dataset: deleteBtn.dataset,
      attributes: Array.from(deleteBtn.attributes).map(attr => ({
        name: attr.name,
        value: attr.value
      }))
    });
    
    // 属性値の取得を試行
    const ticketId = deleteBtn.getAttribute('data-ticket-id');
    const ticketName = deleteBtn.getAttribute('data-ticket-name');
    
    console.log('🔍 属性値の取得結果:', {
      ticketId: ticketId,
      ticketName: ticketName,
      ticketIdType: typeof ticketId,
      ticketNameType: typeof ticketName,
      ticketIdTruthy: !!ticketId,
      ticketNameTruthy: !!ticketName
    });
    
    if (!ticketId || !ticketName) {
      console.error('❌ 削除ボタンに必要な属性が設定されていません:', { ticketId, ticketName });
      
      // 代替方法で属性値を取得してみる
      console.log('🔄 代替方法で属性値を取得を試行...');
      
      // dataset経由で取得
      const datasetTicketId = deleteBtn.dataset.ticketId;
      const datasetTicketName = deleteBtn.dataset.ticketName;
      console.log('🔍 dataset経由の取得結果:', { datasetTicketId, datasetTicketName });
      
      // 直接属性アクセスで取得
      const directTicketId = deleteBtn['data-ticket-id'];
      const directTicketName = deleteBtn['data-ticket-name'];
      console.log('🔍 直接属性アクセスの取得結果:', { directTicketId, directTicketName });
      
      return;
    }
    
    console.log('🎫 削除対象:', { ticketId, ticketName });
    
    // チケット行から残り回数を取得（安全な検索）
    const ticketRow = deleteBtn.closest('tr');
    if (!ticketRow) {
      console.error('❌ チケット行が見つかりません');
      return;
    }
    
    console.log('🔍 チケット行の詳細:', {
      element: ticketRow,
      innerHTML: ticketRow.innerHTML,
      children: ticketRow.children.length
    });
    
    // 残り回数要素を複数の方法で検索
    let remainingCountElement = ticketRow.querySelector('td:nth-child(2) .badge');
    
    if (!remainingCountElement) {
      console.log('⚠️ 1番目の方法で見つからなかったため、別の方法を試行');
      // 2番目の方法: クラス名で検索
      remainingCountElement = ticketRow.querySelector('.badge');
    }
    
    if (!remainingCountElement) {
      console.log('⚠️ 2番目の方法でも見つからなかったため、別の方法を試行');
      // 3番目の方法: テキスト内容で検索
      const allTds = ticketRow.querySelectorAll('td');
      console.log('🔍 全td要素:', Array.from(allTds).map((td, index) => ({
        index: index + 1,
        textContent: td.textContent.trim(),
        innerHTML: td.innerHTML
      })));
      
      // 残り回数を含むtdを探す（例: "3/4" のような形式）
      for (let i = 0; i < allTds.length; i++) {
        const td = allTds[i];
        if (td.textContent.includes('/')) {
          const badge = td.querySelector('.badge');
          if (badge) {
            remainingCountElement = badge;
            console.log(`✅ ${i + 1}番目のtdで残り回数要素を発見:`, badge.textContent);
            break;
          }
        }
      }
    }
    
    if (!remainingCountElement) {
      console.error('❌ 残り回数要素が見つかりません。行の構造を確認してください');
      console.log('🔍 行の完全なHTML:', ticketRow.outerHTML);
      return;
    }
    
    const remainingCount = remainingCountElement.textContent.split('/')[0].trim();
    console.log('📊 残り回数:', remainingCount);
    
    // モーダル要素の存在チェック
    const deleteTicketName = document.getElementById('deleteTicketName');
    const deleteTicketRemaining = document.getElementById('deleteTicketRemaining');
    
    if (!deleteTicketName || !deleteTicketRemaining) {
      console.error('❌ 削除確認モーダルの要素が見つかりません');
      alert('削除確認モーダルの準備に失敗しました');
      return;
    }
    
    // モーダルにデータを設定
    deleteTicketName.textContent = ticketName;
    deleteTicketRemaining.textContent = remainingCount;
    
    // モーダルを表示
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteTicketModal'));
    deleteModal.show();
    
    // 削除実行ボタンのイベントリスナー
    document.getElementById('confirmDeleteTicketBtn').onclick = function() {
      deleteTicket(ticketId, ticketRow);
      deleteModal.hide();
      
      // 即座に背景をクリーンアップ
      cleanupModalBackground();
    };
    
    console.log('✅ 削除確認モーダル表示完了');
    
  } catch (error) {
    console.error('❌ チケット削除処理中にエラーが発生しました:', error);
    alert('チケット削除の準備中にエラーが発生しました: ' + error.message);
  }
}

// チケット削除実行
function deleteTicket(ticketId, ticketRow) {
    // 削除ボタンを無効化
    const deleteBtn = ticketRow.querySelector('.delete-ticket-btn');
    const originalText = deleteBtn.innerHTML;
    deleteBtn.disabled = true;
    deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    
    // CSRF トークンを取得
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    
    // チケット削除APIを呼び出し
    fetch(`/admin/tickets/${ticketId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-CSRF-Token': csrfToken
      }
    })
    .then(response => {
      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers);
      
      if (!response.ok) {
        if (response.status === 406) {
          throw new Error('サーバーが要求を受け入れられません。ページを再読み込みしてから再試行してください。');
        }
        return response.json().then(data => {
          throw new Error(data.error || `HTTP ${response.status}: ${response.statusText}`);
        }).catch(() => {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        });
      }
      
      // レスポンスが空の場合の処理
      if (response.headers.get('content-length') === '0' || response.status === 204) {
        return { success: true, message: 'チケットが削除されました' };
      }
      
      return response.json();
    })
    .then(data => {
      console.log('✅ Ticket deleted:', ticketId);
      
      // 成功メッセージを表示
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-success alert-dismissible fade show';
      alertDiv.innerHTML = `
        <i class="fas fa-check-circle me-2"></i>
        チケットを削除しました
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));
      
      // チケット行を即座に削除
      ticketRow.remove();
      
      // 残りチケット数と残額を更新
      updateTicketCounts();
      
      // チケットが0件になった場合の処理
      if (document.querySelectorAll('tbody tr').length === 0) {
        const tbody = document.querySelector('tbody');
        tbody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center py-4">
              <i class="fas fa-ticket-alt fa-3x text-muted mb-3"></i>
              <p class="text-muted">保有チケットがありません</p>
            </td>
          </tr>
        `;
        
        // 残りチケット数と残額を即座に更新（0件状態）
        setTimeout(() => {
          updateTicketCounts();
        }, 100);
      }
      
      // 成功メッセージを3秒後に自動で消す
      setTimeout(() => {
        if (alertDiv && alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 3000);
    })
    .catch(error => {
      console.error('❌ Error deleting ticket:', error);
      
      // エラーメッセージを表示
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-danger alert-dismissible fade show';
      alertDiv.innerHTML = `
        <i class="fas fa-exclamation-triangle me-2"></i>
        チケット削除エラー: ${error.message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));
      
      // エラーメッセージを5秒後に自動で消す
      setTimeout(() => {
        if (alertDiv && alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 5000);
      
      // ボタンを元に戻す
      deleteBtn.disabled = false;
      deleteBtn.innerHTML = originalText;
    });
  }
  
  // 新しく作成されたチケットを一覧に追加する関数
  function addNewTicketToList(ticket) {
    try {
      console.log('🎫 新チケット追加開始:', ticket);
      
      // 既存のチケットがない行を削除
      const tbody = document.querySelector('tbody');
      const noTicketsRow = tbody.querySelector('tr td[colspan="6"]');
      if (noTicketsRow) {
        console.log('🗑️ 「保有チケットがありません」の行を削除');
        tbody.innerHTML = '';
      }
      
      // 新チケットの行を作成
      const newRow = document.createElement('tr');
      newRow.setAttribute('data-ticket-id', ticket.id);
      newRow.innerHTML = `
        <td>
          <strong>${ticket.ticket_template.name}</strong>
          <br><small class="text-muted">¥${ticket.ticket_template.price.toLocaleString()}</small>
        </td>
        <td>
          <span class="badge bg-primary">${ticket.remaining_count}/${ticket.total_count}</span>
        </td>
        <td>${ticket.purchase_date ? new Date(ticket.purchase_date).toLocaleDateString('ja-JP') : 'なし'}</td>
        <td>${ticket.expiry_date ? new Date(ticket.expiry_date).toLocaleDateString('ja-JP') : '無期限'}</td>
        <td>
          <span class="badge bg-success">利用可能</span>
        </td>
        <td>
          <button class="btn btn-sm btn-outline-primary use-ticket-btn" 
                  data-ticket-id="${ticket.id}" 
                  data-ticket-name="${ticket.ticket_template.name}">
            <i class="fas fa-ticket-alt me-1"></i>使用
          </button>
          <button class="btn btn-sm btn-outline-danger delete-ticket-btn ms-1" 
                  data-ticket-id="${ticket.id}"
                  data-ticket-name="${ticket.ticket_template.name}">
            <i class="fas fa-trash me-1"></i>削除
          </button>
        </td>
      `;
      
      // 新チケットを一覧に追加
      tbody.appendChild(newRow);
      console.log('✅ 新チケットを一覧に追加完了');
      console.log('🔍 追加後のtbody行数:', tbody.querySelectorAll('tr').length);
      
    } catch (error) {
      console.error('❌ 新チケット追加中にエラーが発生しました:', error);
    }
  }
  
  // チケット数と残額を更新
  function updateTicketCounts() {
    try {
      console.log('🔄 チケット数更新開始');
      
      // 現在のtbodyの状態を確認
      const tbody = document.querySelector('tbody');
      const allRows = tbody.querySelectorAll('tr');
      console.log('🔍 現在のtbody状態:', {
        totalRows: allRows.length,
        rows: Array.from(allRows).map((row, index) => ({
          index: index + 1,
          hasColspan: row.querySelector('td[colspan]') !== null,
          content: row.textContent.trim(),
          badge: row.querySelector('td:nth-child(2) .badge')?.textContent,
          price: row.querySelector('td:nth-child(1) small')?.textContent
        }))
      });
      
      // 重複行のチェック
      const duplicateCheck = new Map();
      allRows.forEach((row, index) => {
        const badge = row.querySelector('td:nth-child(2) .badge');
        const priceElement = row.querySelector('td:nth-child(1) small');
        if (badge && priceElement) {
          const key = `${badge.textContent}-${priceElement.textContent}`;
          if (duplicateCheck.has(key)) {
            console.warn(`⚠️ 重複行を発見: 行${index + 1}と行${duplicateCheck.get(key) + 1}`);
          } else {
            duplicateCheck.set(key, index);
          }
        }
      });
      
      // 残りチケット数を再計算
      const remainingTickets = document.querySelectorAll('tbody tr').length;
      const remainingCount = Array.from(document.querySelectorAll('tbody tr')).reduce((total, row) => {
        const badge = row.querySelector('td:nth-child(2) .badge');
        if (badge) {
          const count = parseInt(badge.textContent.split('/')[0].trim());
          return total + (isNaN(count) ? 0 : count);
        }
        return total;
      }, 0);
      
      console.log(`📊 計算結果: 残りチケット数=${remainingTickets}, 残り回数合計=${remainingCount}`);
      
      // 表示を更新 - IDを使用して確実に要素を選択
      const ticketCountElement = document.getElementById('remainingTicketCount');
      if (ticketCountElement) {
        // 残りチケット数の表示を更新
        ticketCountElement.innerHTML = `<strong>残チケット:</strong> ${remainingCount} 回`;
        console.log('✅ 残りチケット数表示を更新しました');
      } else {
        console.warn('⚠️ 残りチケット数表示要素が見つかりません');
      }
      
      // 残額合計も更新
      const remainingValueElement = document.getElementById('remainingTicketValue');
      if (remainingValueElement) {
        // チケット1枚あたりの価格を表示（残り回数分の総額ではない）
        let totalValue = 0;
        const ticketRows = document.querySelectorAll('tbody tr');
        
        console.log(`💰 チケット価格計算開始: ${ticketRows.length}件のチケットを処理`);
        console.log('🔍 全tbody行の内容:');
        ticketRows.forEach((row, index) => {
          console.log(`行${index + 1}:`, row.innerHTML);
        });
        
        // 重複チェック用の配列
        const processedTickets = new Set();
        
        ticketRows.forEach((row, index) => {
          const badge = row.querySelector('td:nth-child(2) .badge');
          const priceElement = row.querySelector('td:nth-child(1) small');
          
          console.log(`🔍 行${index + 1}の要素:`, {
            badge: badge?.textContent,
            priceElement: priceElement?.textContent,
            rowHTML: row.innerHTML
          });
          
          if (badge && priceElement) {
            const count = parseInt(badge.textContent.split('/')[0].trim());
            const price = parseInt(priceElement.textContent.replace('¥', '').replace(/,/g, ''));
            
            if (!isNaN(count) && !isNaN(price)) {
              // 重複チェック（同じ価格のチケットが既に処理済みかチェック）
              const ticketKey = `${price}`;
              if (processedTickets.has(ticketKey)) {
                console.warn(`⚠️ 重複価格のチケットをスキップ: 価格=${price}`);
                return;
              }
              processedTickets.add(ticketKey);
              
              // チケット1枚あたりの価格を累積（回数は考慮しない）
              totalValue += price;
              console.log(`💰 チケット${index + 1}: 価格=${price}, 累計価格=${totalValue}`);
            } else {
              console.warn(`⚠️ チケット${index + 1}: 無効な値 - 回数:${count}, 価格:${price}`);
            }
          } else {
            console.warn(`⚠️ チケット${index + 1}: 要素が見つかりません`);
          }
        });
        
        console.log(`💰 最終チケット価格合計: ${totalValue}`);
        remainingValueElement.innerHTML = `<strong>チケット価格合計:</strong> ¥${totalValue.toLocaleString()}`;
        console.log('✅ チケット価格合計表示を更新しました:', totalValue);
      } else {
        console.warn('⚠️ 残額合計要素が見つかりません');
      }
      
      // デバッグ情報も更新
      const debugElement = document.querySelector('.bg-light.border.rounded');
      if (debugElement) {
        const totalTicketsElement = debugElement.querySelector('small');
        if (totalTicketsElement) {
          totalTicketsElement.innerHTML = totalTicketsElement.innerHTML.replace(
            /総チケット数: \d+/,
            `総チケット数: ${remainingTickets}`
          );
          totalTicketsElement.innerHTML = totalTicketsElement.innerHTML.replace(
            /有効チケット数: \d+/,
            `有効チケット数: ${remainingTickets}`
          );
          totalTicketsElement.innerHTML = totalTicketsElement.innerHTML.replace(
            /残り回数合計: \d+/,
            `残り回数合計: ${remainingCount}`
          );
          console.log('✅ デバッグ情報を更新しました');
        } else {
          console.warn('⚠️ デバッグ情報要素が見つかりません');
        }
      } else {
        console.warn('⚠️ デバッグ情報コンテナが見つかりません');
      }
      
      console.log('🔄 チケット数更新完了');
    } catch (error) {
      console.error('❌ チケット数更新中にエラーが発生しました:', error);
    }
  }
  
  // チケット使用後の表示を即座に更新する関数
  function updateTicketDisplayAfterUse(ticketId) {
    try {
      console.log('🔄 チケット使用後の表示更新開始:', ticketId);
      
      // チケット行を検索
      const ticketRow = document.querySelector(`tr[data-ticket-id="${ticketId}"]`);
      if (!ticketRow) {
        console.warn('⚠️ チケット行が見つかりませんでした:', ticketId);
        return;
      }

      // 残り回数を取得
      const remainingCountElement = ticketRow.querySelector('td:nth-child(2) .badge');
      if (!remainingCountElement) {
        console.warn('⚠️ 残り回数要素が見つかりませんでした:', ticketId);
        return;
      }

      // 残り回数を更新
      const currentRemainingCount = parseInt(remainingCountElement.textContent.split('/')[0].trim());
      const newRemainingCount = currentRemainingCount - 1;
      remainingCountElement.textContent = `${newRemainingCount}/${remainingCountElement.textContent.split('/')[1].trim()}`;
      console.log('✅ 残り回数を更新しました:', newRemainingCount);

      // ステータスを更新
      const statusBadge = ticketRow.querySelector('td:nth-child(5) .badge');
      if (statusBadge) {
        if (newRemainingCount <= 0) {
          statusBadge.className = 'badge bg-secondary';
          statusBadge.textContent = '使用済み';
          console.log('✅ ステータスを「使用済み」に更新しました');
        } else if (newRemainingCount <= 2) {
          statusBadge.className = 'badge bg-warning';
          statusBadge.textContent = '残り少ない';
          console.log('✅ ステータスを「残り少ない」に更新しました');
        } else {
          statusBadge.className = 'badge bg-success';
          statusBadge.textContent = '利用可能';
          console.log('✅ ステータスを「利用可能」に更新しました');
        }
      }

      // 使用可能ボタンの有効化/無効化
      const useTicketBtn = ticketRow.querySelector('.use-ticket-btn');
      if (useTicketBtn) {
        if (newRemainingCount > 0) {
          useTicketBtn.disabled = false;
          useTicketBtn.innerHTML = '<i class="fas fa-ticket-alt me-1"></i>使用';
          console.log('✅ 使用可能ボタンを有効化しました');
        } else {
          useTicketBtn.disabled = true;
          useTicketBtn.innerHTML = '<span class="text-muted">使用不可</span>';
          console.log('✅ 使用可能ボタンを無効化しました');
        }
      }

      // 残額も更新
      updateTicketCounts();
      console.log('🔄 チケット使用後の表示更新完了');
    } catch (error) {
      console.error('❌ チケット使用後の表示更新中にエラーが発生しました:', error);
    }
  }
  
  // ページ読み込み時に初期化を実行
  document.addEventListener('DOMContentLoaded', initializeTicketManagement);
  
  // ページが完全に読み込まれた後に初期化を実行
  window.addEventListener('load', initializeTicketManagement);
  
  // 少し遅れて初期化を実行（Turboなどの問題に対応）
  setTimeout(initializeTicketManagement, 100);
  setTimeout(initializeTicketManagement, 500);
  
  // ページが表示された後に初期化を実行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTicketManagement);
  } else {
    initializeTicketManagement();
  }
  
  // ページ読み込み直後の背景クリーンアップ
  function cleanupPageBackground() {
    console.log('🔄 ページ読み込み時の背景クリーンアップ開始');
    
    // 既存のモーダル背景をクリーンアップ
    const backdrops = document.querySelectorAll('.modal-backdrop');
    console.log(`📊 発見された背景要素: ${backdrops.length}個`);
    
    backdrops.forEach((backdrop, index) => {
      console.log(`🗑️ 背景要素${index + 1}を削除中...`);
      backdrop.style.opacity = '0';
      backdrop.style.transition = 'opacity 0.1s ease';
      
      // 即座に削除を試行
      if (backdrop.parentNode) {
        backdrop.parentNode.removeChild(backdrop);
        console.log(`✅ 背景要素${index + 1}を削除完了`);
      }
    });
    
    // modal-openクラスを削除
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
    console.log('✅ ページ読み込み時の背景クリーンアップ完了');
    
    // 追加のクリーンアップを実行
    setTimeout(cleanupModalBackground, 100);
    
    // ページ読み込み直後の背景を明るくする
    setTimeout(() => {
      document.body.style.backgroundColor = '';
      document.body.style.background = '';
      console.log('✅ ページ背景を明るくしました');
    }, 200);
  }
  
  // ページ読み込み時に背景をクリーンアップ
  window.addEventListener('load', cleanupPageBackground);
  document.addEventListener('DOMContentLoaded', cleanupPageBackground);
  
  // モーダル背景のクリーンアップ関数
  function cleanupModalBackground() {
    try {
      console.log('🔄 モーダル背景クリーンアップ開始');
      
      // モーダル背景要素を削除
      const modalBackdrops = document.querySelectorAll('.modal-backdrop');
      modalBackdrops.forEach(backdrop => {
        backdrop.remove();
        console.log('🗑️ モーダル背景要素を削除しました');
      });
      
      // bodyの状態をリセット
      document.body.classList.remove('modal-open');
      document.body.style.overflow = '';
      document.body.style.paddingRight = '';
      
      console.log('✅ モーダル背景クリーンアップ完了');
    } catch (error) {
      console.error('❌ モーダル背景クリーンアップ中にエラーが発生しました:', error);
    }
  }
  
  console.log('🎫 チケット管理初期化完了');
</script>