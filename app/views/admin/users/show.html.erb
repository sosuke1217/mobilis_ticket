<% content_for :head do %>
  <meta name="turbo-visit-control" content="disable">
<% end %>

<div class="container-lg my-5">
  <div class="d-flex align-items-center mb-4">
    <div>
      <h1 class="mb-1">
        <%= @user.display_name_or_name || @user.line_user_id %> さんの詳細
      </h1>
      <% if @user.display_name.present? && @user.name.present? && @user.display_name != @user.name %>
        <p class="text-muted mb-0">登録名: <%= @user.name %></p>
      <% end %>
    </div>
  </div>

  <p>
    <strong>LINE連携状況:</strong>
    <% if @user.line_user_id.present? && @user.line_user_id != '' %>
      <span class="badge bg-success"><i class="fas fa-link me-1"></i>連携済み</span>
      <div class="btn-group ms-2" role="group">
        <button type="button" class="btn btn-sm btn-outline-primary" onclick="updateLineProfile()">
          <i class="fas fa-sync-alt me-1"></i>LINE情報を更新
        </button>
        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeLineLink()">
          <i class="fas fa-unlink me-1"></i>連携解除
        </button>
      </div>
    <% else %>
      <span class="badge bg-danger"><i class="fas fa-unlink me-1"></i>未連携</span>
      <button type="button" class="btn btn-sm btn-outline-success ms-2" onclick="showLineLinkForm()">
        <i class="fas fa-link me-1"></i>LINE連携作成
      </button>
    <% end %>
  </p>

  <style>
    /* LINE連携モーダルのカスタムスタイル */
    #lineLinkModal .modal-dialog {
      max-width: 600px;
      width: 90%;
    }
    
    #lineLinkModal .modal-content {
      height: auto;
      max-height: none;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    
    #lineLinkModal .modal-header {
      flex-shrink: 0;
      padding: 0.75rem;
      min-height: auto;
    }
    
    #lineLinkModal .modal-body {
      flex: 0 0 auto;
      padding: 0.75rem;
      overflow: hidden;
      min-height: 0;
      max-height: none;
    }
    
    #lineLinkModal .modal-footer {
      flex-shrink: 0;
      padding: 0.75rem;
      width: 100%;
      justify-content: flex-end;
      border-top: 1px solid #dee2e6;
      background-color: #f8f9fa;
      gap: 0.75rem;
    }
    
    #lineLinkModal .input-group > .form-control,
    #lineLinkModal .input-group > .input-group-text {
      font-size: 0.9rem;
      line-height: 1.3;
      padding: 0.4rem 0.6rem;
    }
    
    #lineLinkModal .btn-sm {
      font-size: 0.9rem;
      padding: 0.4rem 0.8rem;
      min-width: 90px;
    }
    
    /* ボタンが確実に表示されるように */
    #lineLinkModal .modal-footer .btn {
      white-space: nowrap;
      overflow: visible;
    }
    
    /* アイコンとテキストのサイズ調整 */
    #lineLinkModal .modal-header .modal-title {
      font-size: 1.1rem;
    }
    
    #lineLinkModal .modal-body .fa-link {
      font-size: 1.3rem;
    }
    
    #lineLinkModal .modal-body .bg-light.rounded-circle {
      width: 50px;
      height: 50px;
    }
    
    /* モーダルの全体的なレイアウト調整 */
    #lineLinkModal .modal-content {
      height: 350px;
      min-height: 350px;
      max-height: 350px;
      padding-bottom: 0;
    }
    
    /* コンテンツの高さを最適化 */
    #lineLinkModal .modal-body .text-center {
      margin-bottom: 0.75rem;
    }
    
    #lineLinkModal .modal-body .alert {
      margin-bottom: 0;
      padding: 0.5rem;
    }
    
    /* スクロールを完全に無効化 */
    #lineLinkModal * {
      overflow: visible !important;
      overflow-x: visible !important;
      overflow-y: visible !important;
    }
    
    /* フォーム要素の間隔を最小化 */
    #lineLinkModal .form-label {
      margin-bottom: 0.25rem;
    }
    
    #lineLinkModal .form-text {
      margin-top: 0.25rem;
    }
    
    #lineLinkModal .mb-2 {
      margin-bottom: 0.5rem !important;
    }
    
    #lineLinkModal .mb-1 {
      margin-bottom: 0.25rem !important;
    }
    
    /* スクロールバーを完全に非表示 */
    #lineLinkModal *::-webkit-scrollbar {
      display: none !important;
      width: 0 !important;
      height: 0 !important;
    }
    
    #lineLinkModal * {
      scrollbar-width: none !important;
      -ms-overflow-style: none !important;
    }
    
    /* Bootstrapモーダルのスクロール機能を無効化 */
    #lineLinkModal .modal {
      overflow: hidden !important;
    }
    
    #lineLinkModal .modal-dialog {
      overflow: hidden !important;
    }
    
    #lineLinkModal .modal-content {
      overflow: hidden !important;
    }
    
    /* モーダル内のすべての要素でスクロールを無効化 */
    #lineLinkModal .modal-header,
    #lineLinkModal .modal-body,
    #lineLinkModal .modal-footer {
      overflow: hidden !important;
      scrollbar-width: none !important;
      -ms-overflow-style: none !important;
    }
    
    /* モーダル全体のスクロールを無効化 */
    body.modal-open {
      overflow: hidden !important;
    }
    
    /* 強制的にスクロールを無効化 */
    #lineLinkModal,
    #lineLinkModal *,
    #lineLinkModal .modal,
    #lineLinkModal .modal-dialog,
    #lineLinkModal .modal-content,
    #lineLinkModal .modal-header,
    #lineLinkModal .modal-body,
    #lineLinkModal .modal-footer {
      overflow: hidden !important;
      overflow-x: hidden !important;
      overflow-y: hidden !important;
      scrollbar-width: none !important;
      -ms-overflow-style: none !important;
    }
  </style>

  <!-- LINE連携フォーム（モーダル） -->
  <div class="modal fade" id="lineLinkModal" tabindex="-1" aria-labelledby="lineLinkModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
      <div class="modal-content border-0 shadow-lg">
        <div class="modal-header bg-primary text-white border-0 py-2">
          <h5 class="modal-title mb-0" id="lineLinkModalLabel">
            <i class="fas fa-link me-2"></i>LINE連携作成
          </h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body p-1">
          <div class="text-center mb-1">
            <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-1" style="width: 40px; height: 40px;">
              <i class="fas fa-link text-primary"></i>
            </div>
            <h6 class="text-muted mb-1 small">ユーザーとLINEアカウントを連携</h6>
            <p class="text-muted small mb-0">LINEボットから取得したユーザーIDを入力してください</p>
          </div>
          
          <form id="lineLinkForm">
            <div class="px-1 mb-1">
              <label for="lineUserId" class="form-label fw-bold mb-1 small">
                <i class="fas fa-user-circle me-1 text-primary"></i>LINEユーザーID
              </label>
              <div class="input-group">
                <span class="input-group-text bg-light border-end-0">
                  <i class="fas fa-id-card text-muted"></i>
                </span>
                <input type="text" 
                       class="form-control border-start-0" 
                       id="lineUserId" 
                       name="line_user_id" 
                       placeholder="U1234567890abcdef" 
                       required
                       pattern="U[a-zA-Z0-9]{32}"
                       title="LINEユーザーIDは「U」で始まる33文字の英数字です">
              </div>
              <div class="form-text small mt-1">
                <i class="fas fa-info-circle me-1 text-info"></i>
                LINEボットから取得したユーザーID
              </div>
            </div>
            
            <div class="alert alert-info border-0 bg-light py-1">
              <div class="d-flex align-items-start">
                <i class="fas fa-shield-alt text-info me-2 mt-1"></i>
                <div>
                  <strong class="d-block small mb-1">セキュリティ</strong>
                  <small class="text-muted">重複不可・自動更新・解除可能</small>
                </div>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer border-0 bg-light">
          <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-dismiss="modal">
            <i class="fas fa-times me-1"></i>キャンセル
          </button>
          <button type="button" class="btn btn-primary btn-sm" onclick="createLineLink()">
            <i class="fas fa-link me-1"></i>連携作成
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    function showLineLinkForm() {
      const modal = new bootstrap.Modal(document.getElementById('lineLinkModal'));
      modal.show();
      
      // フォームをリセット
      document.getElementById('lineLinkForm').reset();
      
      // 入力フィールドにフォーカス
      setTimeout(() => {
        document.getElementById('lineUserId').focus();
      }, 500);
    }

    function createLineLink() {
      const lineUserId = document.getElementById('lineUserId').value.trim();
      const lineUserIdInput = document.getElementById('lineUserId');
      
      // バリデーション
      if (!lineUserId) {
        showError('LINEユーザーIDを入力してください');
        lineUserIdInput.focus();
        return;
      }
      
      // LINEユーザーIDの形式チェック
      const lineIdPattern = /^U[a-zA-Z0-9]{32}$/;
      if (!lineIdPattern.test(lineUserId)) {
        showError('LINEユーザーIDの形式が正しくありません。\n「U」で始まる33文字の英数字で入力してください。');
        lineUserIdInput.focus();
        return;
      }

      const userId = '<%= @user.id %>';
      const token = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      if (!token) {
        showError('セキュリティトークンが見つかりません。ページを再読み込みしてください。');
        return;
      }

      // ボタンを無効化
      const button = event.target;
      const originalText = button.textContent;
      button.disabled = true;
      button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>連携中...';

      fetch(`/admin/users/${userId}/create_line_link`, {
        method: 'POST',
        headers: {
          'X-CSRF-Token': token,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ line_user_id: lineUserId })
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      })
      .then(data => {
        showSuccess('LINE連携を作成しました');
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      })
      .catch(error => {
        console.error('Error:', error);
        showError(`LINE連携の作成に失敗しました: ${error.message}`);
      })
      .finally(() => {
        // ボタンを元に戻す
        button.disabled = false;
        button.innerHTML = originalText;
      });
    }

    function removeLineLink() {
      if (confirm('LINE連携を解除しますか？\n\n注意: 連携解除後もユーザー情報は保持されますが、LINEからの自動更新は行われなくなります。')) {
        const userId = '<%= @user.id %>';
        const token = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        
        if (!token) {
          showError('セキュリティトークンが見つかりません。ページを再読み込みしてください。');
          return;
        }

        // ボタンを無効化
        const button = event.target;
        const originalText = button.textContent;
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>解除中...';

        fetch(`/admin/users/${userId}/remove_line_link`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': token,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        })
        .then(response => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
        })
        .then(data => {
          showSuccess('LINE連携を解除しました');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        })
        .catch(error => {
          console.error('Error:', error);
          showError(`LINE連携の解除に失敗しました: ${error.message}`);
        })
        .finally(() => {
          // ボタンを元に戻す
          button.disabled = false;
          button.innerHTML = originalText;
        });
      }
    }

    function updateLineProfile() {
      const userId = '<%= @user.id %>';
      const token = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      if (!token) {
        showError('セキュリティトークンが見つかりません。ページを再読み込みしてください。');
        return;
      }

      // ボタンを無効化
      const button = event.target;
      const originalText = button.textContent;
      button.disabled = true;
      button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>更新中...';

      fetch(`/admin/users/${userId}/update_line_profile`, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': token,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      })
      .then(data => {
        showSuccess('LINEプロファイルを更新しました');
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      })
      .catch(error => {
        console.error('Error:', error);
        showError(`LINEプロファイルの更新に失敗しました: ${error.message}`);
      })
      .finally(() => {
        // ボタンを元に戻す
        button.disabled = false;
        button.innerHTML = originalText;
      });
    }

    // 成功メッセージ表示
    function showSuccess(message) {
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-success alert-dismissible fade show position-fixed';
      alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 250px; max-width: 300px;';
      alertDiv.innerHTML = `
        <i class="fas fa-check-circle me-2"></i><small>${message}</small>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.body.appendChild(alertDiv);
      
      // 3秒後に自動で消す
      setTimeout(() => {
        if (alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 3000);
    }

    // エラーメッセージ表示
    function showError(message) {
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-danger alert-dismissible fade show position-fixed';
      alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 250px; max-width: 300px;';
      alertDiv.innerHTML = `
        <i class="fas fa-exclamation-triangle me-2"></i><small>${message}</small>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.body.appendChild(alertDiv);
      
      // 5秒後に自動で消す
      setTimeout(() => {
        if (alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 5000);
    }
  </script>

  <!-- 🧑‍💼 顧客情報セクション -->
  <div class="card mb-5 shadow-sm">
    <div class="card-header bg-secondary text-white fw-bold d-flex justify-content-between align-items-center">
      <div>顧客情報</div>
      <div class="btn-group">
        <%= link_to "編集", edit_admin_user_path(@user), class: "btn btn-sm btn-light" %>
        <button type="button" class="btn btn-sm btn-danger ms-2" id="deleteUserBtn" 
                data-user-id="<%= @user.id %>"
                data-user-name="<%= @user.display_name_or_name.presence || @user.line_user_id || "ID:#{@user.id}" %>"
                data-active-tickets="<%= @active_tickets.count %>"
                data-total-usages="<%= @total_usages %>"
                data-remaining-value="<%= number_to_currency(@user.remaining_ticket_value, unit: "¥", precision: 0) %>">
          削除
        </button>
      </div>
    </div>
    <div class="card-body p-0">
      <table class="table table-bordered table-striped mb-0">
        <tbody>
          <tr>
            <th class="w-25 bg-light">会員番号</th>
            <td><%= @user.id %></td>
          </tr>
          <tr>
            <th class="bg-light">氏名</th>
            <td>
              <% if @user.display_name_or_name.present? %>
                <%= @user.display_name_or_name %>
                <% if @user.display_name.present? && @user.name.present? && @user.display_name != @user.name %>
                  <br><small class="text-muted">登録名: <%= @user.name %></small>
                <% end %>
              <% else %>
                <%= content_tag(:span, "未登録", class: "text-muted") %>
              <% end %>
            </td>
          </tr>
          <tr>
            <th class="bg-light">LINE表示名</th>
            <td>
              <% if @user.display_name.present? %>
                <%= @user.display_name %>
              <% else %>
                <%= content_tag(:span, "未取得", class: "text-muted") %>
              <% end %>
            </td>
          </tr>
          <tr>
            <th class="bg-light">生年月日</th>
            <td><%= @user.birth_date.present? ? l(@user.birth_date) : content_tag(:span, "未登録", class: "text-muted") %></td>
          </tr>
          <tr>
            <th class="bg-light">郵便番号</th>
            <td><%= @user.postal_code.presence || content_tag(:span, "未登録", class: "text-muted") %></td>
          </tr>
          <tr>
            <th class="bg-light">住所</th>
            <td><%= @user.address.presence || content_tag(:span, "未登録", class: "text-muted") %></td>
          </tr>
          <tr>
            <th class="bg-light">電話番号</th>
            <td><%= @user.phone_number.presence || content_tag(:span, "未登録", class: "text-muted") %></td>
          </tr>
          <tr>
            <th class="bg-light">メールアドレス</th>
            <td><%= @user.email.presence || content_tag(:span, "未登録", class: "text-muted") %></td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- 削除確認モーダル -->
  <div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog" style="max-width: 600px; width: 90%;">
      <div class="modal-content">
        <div class="modal-header bg-danger text-white">
          <h5 class="modal-title" id="deleteUserModalLabel">
            <i class="fas fa-exclamation-triangle me-2"></i>ユーザー削除の確認
          </h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="閉じる"></button>
        </div>
        <div class="modal-body">
          <div class="alert alert-danger">
            <h6><i class="fas fa-warning me-2"></i>重要：この操作は取り消せません</h6>
            <p class="mb-0">以下のユーザーとすべての関連データが完全に削除されます。</p>
          </div>

          <div class="card mb-3">
            <div class="card-header bg-light">
              <h6 class="mb-0">削除対象ユーザー</h6>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-sm-4"><strong>氏名:</strong></div>
                <div class="col-sm-8" id="deleteUserName"></div>
              </div>
              <div class="row">
                <div class="col-sm-4"><strong>会員番号:</strong></div>
                <div class="col-sm-8" id="deleteUserId"></div>
              </div>
            </div>
          </div>

          <div class="card mb-3">
            <div class="card-header bg-warning text-dark">
              <h6 class="mb-0">同時に削除される関連データ</h6>
            </div>
            <div class="card-body">
              <ul class="list-unstyled mb-0">
                <li><i class="fas fa-ticket-alt text-primary me-2"></i>アクティブチケット: <span id="deleteActiveTickets"></span>枚</li>
                <li><i class="fas fa-history text-info me-2"></i>使用履歴: <span id="deleteTotalUsages"></span>件</li>
                <li><i class="fas fa-yen-sign text-success me-2"></i>残額: <span id="deleteRemainingValue"></span></li>
                <li><i class="fas fa-calendar text-warning me-2"></i>予約データ（user_idのみnullに変更）</li>
                <li><i class="fas fa-bell text-secondary me-2"></i>通知設定・ログ</li>
              </ul>
            </div>
          </div>

          <div class="modal-footer" style="width: 80%; margin: 0 auto; display: flex; flex-direction: column; align-items: flex-start; gap: 1rem;">
            <div class="form-check" style="width: 100%; text-align: left;">
              <input class="form-check-input" type="checkbox" id="confirmDeletionCheck">
              <label class="form-check-label" for="confirmDeletionCheck" style="text-align: left;">
                削除を実行することを確認します
              </label>
            </div>
            <div style="width: 100%; text-align: left;">
              <label for="confirmationText" class="form-label" style="text-align: left;">確認のため、ユーザー名を入力してください:</label>
              <input type="text" class="form-control" id="confirmationText" placeholder="ユーザー名を入力" style="text-align: left;">
            </div>
            <div class="d-flex justify-content-end gap-2" style="width: 100%; margin-top: 1rem;">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">キャンセル</button>
              <button type="button" class="btn btn-danger" id="confirmDeleteBtn" disabled>
                <i class="fas fa-trash me-1"></i>削除を実行
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
  document.addEventListener('DOMContentLoaded', function() {
    const deleteBtn = document.getElementById('deleteUserBtn');
    const modal = document.getElementById('deleteUserModal');
    const confirmCheck = document.getElementById('confirmDeletionCheck');
    const confirmationText = document.getElementById('confirmationText');
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    
    console.log('削除ボタン初期化開始');
    console.log('deleteBtn:', deleteBtn);
    console.log('modal:', modal);
    
    if (!deleteBtn || !modal) {
      console.error('必要な要素が見つかりません');
      return;
    }
    
    let currentUserId = null;
    let currentUserName = null;
    
    // 削除ボタンクリック時
    deleteBtn.addEventListener('click', function(e) {
      e.preventDefault();
      console.log('削除ボタンがクリックされました');
      
      currentUserId = this.getAttribute('data-user-id');
      currentUserName = this.getAttribute('data-user-name');
      const activeTickets = this.getAttribute('data-active-tickets');
      const totalUsages = this.getAttribute('data-total-usages');
      const remainingValue = this.getAttribute('data-remaining-value');
      
      console.log('ユーザー情報:', { currentUserId, currentUserName, activeTickets, totalUsages, remainingValue });
      
      // モーダルにデータを設定
      const userNameElement = document.getElementById('deleteUserName');
      const userIdElement = document.getElementById('deleteUserId');
      const activeTicketsElement = document.getElementById('deleteActiveTickets');
      const totalUsagesElement = document.getElementById('deleteTotalUsages');
      const remainingValueElement = document.getElementById('deleteRemainingValue');
      const confirmUserNameElement = document.getElementById('confirmUserName');
      
      if (userNameElement) userNameElement.textContent = currentUserName;
      if (userIdElement) userIdElement.textContent = currentUserId;
      if (activeTicketsElement) activeTicketsElement.textContent = activeTickets;
      if (totalUsagesElement) totalUsagesElement.textContent = totalUsages;
      if (remainingValueElement) remainingValueElement.textContent = remainingValue;
      if (confirmUserNameElement) confirmUserNameElement.textContent = currentUserName;
      
      // フォームをリセット
      if (confirmCheck) confirmCheck.checked = false;
      if (confirmationText) confirmationText.value = '';
      if (confirmDeleteBtn) confirmDeleteBtn.disabled = true;
      
      // モーダルを表示
      try {
        const bootstrapModal = new bootstrap.Modal(modal);
        bootstrapModal.show();
        console.log('モーダルを表示しました');
      } catch (error) {
        console.error('モーダル表示エラー:', error);
        // フォールバック: 直接スタイルを変更
        modal.style.display = 'block';
        modal.classList.add('show');
        document.body.classList.add('modal-open');
      }
    });
    
    // バリデーション関数
    function validateForm() {
      if (!confirmCheck || !confirmationText || !confirmDeleteBtn) return;
      
      const isChecked = confirmCheck.checked;
      const textMatches = confirmationText.value.trim() === currentUserName;
      
      confirmDeleteBtn.disabled = !(isChecked && textMatches);
      
      // 入力テキストの色を変更
      if (confirmationText.value.trim() === '') {
        confirmationText.className = 'form-control';
      } else if (textMatches) {
        confirmationText.className = 'form-control is-valid';
      } else {
        confirmationText.className = 'form-control is-invalid';
      }
    }
    
    // バリデーション実行
    if (confirmCheck) confirmCheck.addEventListener('change', validateForm);
    if (confirmationText) confirmationText.addEventListener('input', validateForm);
    
    // 最終削除実行
    if (confirmDeleteBtn) {
      confirmDeleteBtn.addEventListener('click', function() {
        if (this.disabled) return;
        
        console.log('削除実行開始');
        
        this.disabled = true;
        this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>削除中...';
        
        // CSRF トークンを取得
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        
        if (!csrfToken) {
          console.error('CSRFトークンが見つかりません');
          alert('セキュリティトークンが見つかりません。ページを再読み込みしてください。');
          this.disabled = false;
          this.innerHTML = '<i class="fas fa-trash me-1"></i>削除を実行';
          return;
        }
        
        console.log('削除リクエスト送信:', `/admin/users/${currentUserId}`);
        
        // 削除リクエストを送信
        fetch(`/admin/users/${currentUserId}`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': csrfToken,
            'Content-Type': 'application/json'
          }
        })
        .then(response => {
          console.log('削除レスポンス:', response);
          
          if (response.redirected) {
            // 成功時はリダイレクトされる
            console.log('削除成功、リダイレクト:', response.url);
            window.location.href = response.url;
          } else if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
          } else {
            // 成功時は手動でリダイレクト
            console.log('削除成功');
            window.location.href = '/admin/users';
          }
        })
        .catch(error => {
          console.error('削除エラー:', error);
          alert('削除中にエラーが発生しました: ' + error.message);
          
          // ボタンを元に戻す
          this.disabled = false;
          this.innerHTML = '<i class="fas fa-trash me-1"></i>削除を実行';
        });
      });
    }
    
    // モーダルが閉じられたときのクリーンアップ
    if (modal) {
      modal.addEventListener('hidden.bs.modal', function() {
        if (confirmCheck) confirmCheck.checked = false;
        if (confirmationText) {
          confirmationText.value = '';
          confirmationText.className = 'form-control';
        }
        if (confirmDeleteBtn) {
          confirmDeleteBtn.disabled = true;
          confirmDeleteBtn.innerHTML = '<i class="fas fa-trash me-1"></i>削除を実行';
        }
      });
    }
    
    console.log('削除ボタン初期化完了');
  });
  </script>
  
  <div class="card mb-4 shadow-sm">
    <div class="card-header bg-warning text-dark fw-bold">管理者メモ</div>
    <div class="card-body">
      <% if @user.admin_memo.present? %>
        <pre class="mb-0"><%= @user.admin_memo %></pre>
      <% else %>
        <p class="text-muted mb-0">メモは登録されていません。</p>
      <% end %>
    </div>
  </div>

  <!-- 📊 利用状況サマリー -->
  <div class="card mb-4 shadow-sm">
    <div class="card-header bg-info text-white fw-bold">
      利用状況サマリー
    </div>
    <div class="card-body">
      <ul class="list-group list-group-flush">
        <li class="list-group-item">累計使用回数：<strong><%= @total_usages %></strong></li>
        <li class="list-group-item">最終使用日：
          <strong>
            <%= @last_used_at.present? ? @last_used_at.strftime('%Y-%m-%d') : "未使用" %>
          </strong>
        </li>
        <li class="list-group-item">アクティブチケット数：<strong><%= @active_tickets.count %></strong></li>
        <li class="list-group-item">
          アクティブチケット種類：
          <% if @active_ticket_types.present? %>
            <ul class="mb-0 ps-3">
              <% @active_ticket_types.each do |title, count| %>
                <li><%= title %>（<%= count %> 枚）</li>
              <% end %>
            </ul>
          <% else %>
            <span class="text-muted">なし</span>
          <% end %>
        </li>
      </ul>
    </div>
  </div>

  <!-- 🎫 チケット管理へのリンク -->
  <div class="card mb-5 shadow-sm">
    <div class="card-header bg-dark text-white fw-bold">
      チケット管理
    </div>
    <div class="card-body text-center">
      <p class="mb-3">チケットの発行・消化・削除を行うには、専用のチケット管理ページをご利用ください。</p>
      <%= link_to "チケット管理ページへ", ticket_management_admin_user_path(@user), 
          class: "btn btn-primary btn-lg" %>
    </div>
  </div>

  <!-- 🎫 所持チケット一覧（表示のみ） -->
  <div class="card mb-5 shadow-sm">
    <div class="card-header bg-success text-white fw-bold">
      所持チケット一覧（表示のみ）
    </div>
    <div class="card-body p-0">
      <% if @active_tickets.any? %>
        <div class="table-responsive">
          <table class="table table-hover table-striped align-middle mb-0">
            <thead class="table-light text-center">
              <tr>
                <th>チケット名</th>
                <th>購入日</th>
                <th>有効期限</th>
                <th>消化済</th>
                <th>残数</th>
              </tr>
            </thead>
            <tbody>
              <% @active_tickets.each do |ticket| %>
                <tr>
                  <td class="text-center"><%= ticket.ticket_template.name %></td>
                  <td class="text-nowrap text-center"><%= ticket.purchase_date.strftime("%Y-%m-%d") %></td>
                  <td class="text-nowrap text-center">
                    <% if ticket.expiry_date < Time.zone.today %>
                      <span class="badge bg-danger me-1">期限切れ</span>
                      <span class="text-muted"><%= ticket.expiry_date.strftime("%Y-%m-%d") %></span>
                    <% elsif ticket.expiry_date < 1.month.from_now %>
                      <span class="badge bg-warning text-dark me-1">期限間近</span>
                      <%= ticket.expiry_date.strftime("%Y-%m-%d") %>
                    <% else %>
                      <%= ticket.expiry_date.strftime("%Y-%m-%d") %>
                    <% end %>
                  </td>
                  <td class="text-center"><%= ticket.total_count - ticket.remaining_count %> 回</td>
                  <td class="text-center fw-bold"><%= ticket.remaining_count %> 回</td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
      <% else %>
        <div class="p-3">
          <p class="text-muted">使用可能なチケットはありません。</p>
        </div>
      <% end %>
    </div>
  </div>

  <!-- 🕒 最近の使用履歴 -->
  <div class="card mb-5 shadow-sm">
    <div class="card-header bg-primary text-white fw-bold">
      最近のチケット使用履歴（最新10件）
    </div>
    <div class="card-body p-0">
      <% if @recent_ticket_usages.any? %>
        <table class="table table-striped table-hover align-middle mb-0">
          <thead class="table-light">
            <tr>
              <th>チケット名</th>
              <th>使用日時</th>
              <th>残回数</th>
              <th>メモ</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <% @recent_ticket_usages.each do |usage| %>
              <tr>
                <td><%= usage.ticket.ticket_template.name %></td>
                <td><%= usage.used_at.strftime('%Y-%m-%d %H:%M') %></td>
                <td><%= usage.ticket.remaining_count %> 回</td>
                <td><%= usage.note.present? ? truncate(usage.note, length: 30) : "—" %></td>
                <td>
                  <%= link_to "詳細・編集", edit_admin_ticket_usage_path(usage), class: "btn btn-sm btn-outline-primary" %>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      <% else %>
        <div class="p-3">
          <p class="text-muted">まだ使用履歴がありません。</p>
        </div>
      <% end %>
      <p class="mt-3 px-3">
        <%= link_to "全ての使用履歴を見る", ticket_usages_admin_user_path(@user), class: "btn btn-outline-secondary btn-sm" %>
      </p>
    </div>
  </div>
  
  <!-- 🗂 使用済みチケット一覧 -->
  <div class="card shadow-sm">
    <div class="card-header bg-secondary text-white fw-bold">
      使用済みチケット
    </div>
    <div class="card-body p-0">
      <% if @used_up_tickets.any? %>
        <table class="table table-hover table-striped align-middle mb-0">
          <thead class="table-light">
            <tr>
              <th>チケット名</th>
              <th>残回数</th>
              <th>購入日</th>
              <th>有効期限</th>
            </tr>
          </thead>
          <tbody>
                          <% @used_up_tickets.each do |ticket| %>
                <tr>
                  <td><%= ticket.ticket_template.name %></td>
                  <td>0 / <%= ticket.total_count %></td>
                  <td><%= ticket.purchase_date.strftime("%Y-%m-%d") %></td>
                  <td><%= ticket.expiry_date.strftime("%Y-%m-%d") %></td>
                </tr>
              <% end %>
          </tbody>
        </table>
      <% else %>
        <div class="p-3">
          <p class="text-muted">使用済みチケットはまだありません。</p>
        </div>
      <% end %>
    </div>
  </div>
</div>