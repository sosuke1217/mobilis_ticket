<div class="container-lg my-5">
  <div class="card shadow-sm">
    <div class="card-header bg-dark text-white">
      <div class="d-flex justify-content-between align-items-center">
        <h2 class="h5 mb-0">👥 ユーザー一覧（管理者用）</h2>
        <button type="button" class="btn btn-success btn-sm" id="addUserBtn">
          <i class="fas fa-user-plus me-1"></i>新規ユーザー追加
        </button>
      </div>
    </div>

    <div class="card-body">
      <!-- 🔍 検索フォーム -->
      <%= search_form_for @q, url: admin_users_path, method: :get, html: { class: "row g-3 align-items-end mb-4" } do |f| %>
        <div class="col-md-4">
          <div class="input-group">
            <%= f.search_field :name_cont, class: "form-control", placeholder: "名前で検索" %>
            <button class="btn btn-primary" type="submit">検索</button>
            <% if params[:q].present? %>
              <%= link_to "リセット", admin_users_path, class: "btn btn-outline-secondary" %>
            <% end %>
          </div>
        </div>
        <div class="col-md-auto text-muted small">
          全 <%= @users.count %> 件
        </div>
      <% end %>

      <!-- 👤 ユーザー一覧テーブル -->
      <div class="table-responsive">
        <table class="table table-hover table-striped align-middle mb-0">
          <thead class="table-light">
            <tr>
              <th>ID</th>
              <th>名前</th>
              <th>LINE ID</th>
              <th>登録日</th>
              <th>残チケット</th>
              <th>最終来店日</th>
              <th>残額合計</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <% @users.each do |user| %>
              <tr>
                <td><%= user.id %></td>
                <td>
                  <div class="d-flex align-items-center">
                    <div>
                      <% if user.display_name_or_name.present? %>
                        <%= link_to user.display_name_or_name, admin_user_path(user), class: "fw-semibold" %>
                        <% if user.display_name.present? && user.name.present? && user.display_name != user.name %>
                          <br><small class="text-muted">登録名: <%= user.name %></small>
                        <% end %>
                      <% else %>
                        <span class="text-muted fst-italic">未登録</span>
                      <% end %>
                    </div>
                  </div>
                </td>
                <td>
                  <% if user.line_user_id.present? && user.line_user_id != '' %>
                    <span class="badge bg-success"><%= user.line_user_id %></span>
                  <% else %>
                    <span class="badge bg-danger">未連携</span>
                  <% end %>
                </td>
                <td><%= l(user.created_at.to_date) %></td>
                <td><%= user.active_ticket_count %> 回</td>
                <td><%= user.last_usage_date&.strftime("%Y/%m/%d") || "未使用" %></td>
                <td><%= number_to_currency(user.remaining_ticket_value, unit: "¥", precision: 0) %></td>
                <td>
                  <% if user.name.present? %>
                    <%= link_to "チケット管理", ticket_management_admin_user_path(user), class: "btn btn-sm btn-outline-primary" %>
                  <% else %>
                    <span class="text-muted fst-italic">未登録</span>
                  <% end %>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
      <div class="mt-3">
        <%= paginate @users %>
      </div>
    </div>
  </div>
</div>

<!-- 新規ユーザー追加モーダル -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-success text-white">
        <h5 class="modal-title" id="addUserModalLabel">
          <i class="fas fa-user-plus me-2"></i>新規ユーザー追加
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="閉じる"></button>
      </div>
      <div class="modal-body">
        <form id="addUserForm">
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="userName" class="form-label">氏名 <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="userName" required placeholder="例: 山田太郎">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="userPhone" class="form-label">電話番号</label>
                <input type="tel" class="form-control" id="userPhone" placeholder="例: 090-1234-5678">
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="userEmail" class="form-label">メールアドレス</label>
                <input type="email" class="form-control" id="userEmail" placeholder="例: example@email.com">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="userBirthDate" class="form-label">生年月日</label>
                <input type="date" class="form-control" id="userBirthDate">
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-4">
              <div class="mb-3">
                <label for="userPostalCode" class="form-label">郵便番号</label>
                <input type="text" class="form-control" id="userPostalCode" placeholder="例: 123-4567">
              </div>
            </div>
            <div class="col-md-8">
              <div class="mb-3">
                <label for="userAddress" class="form-label">住所</label>
                <input type="text" class="form-control" id="userAddress" placeholder="例: 東京都渋谷区...">
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label for="userMemo" class="form-label">管理者メモ</label>
            <textarea class="form-control" id="userMemo" rows="3" placeholder="初回来店の経緯、アレルギー情報、特記事項など"></textarea>
          </div>

        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">キャンセル</button>
        <button type="button" class="btn btn-success" id="saveUserBtn">
          <i class="fas fa-save me-1"></i>ユーザーを追加
        </button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const addUserBtn = document.getElementById('addUserBtn');
  const modal = document.getElementById('addUserModal');
  const form = document.getElementById('addUserForm');
  const saveBtn = document.getElementById('saveUserBtn');
  
  if (!addUserBtn || !modal || !form || !saveBtn) return;
  
  // 新規ユーザー追加ボタンクリック
  addUserBtn.addEventListener('click', function() {
    // フォームをリセット
    form.reset();
    
    // バリデーションクラスをクリア
    form.querySelectorAll('.form-control').forEach(input => {
      input.classList.remove('is-valid', 'is-invalid');
    });
    
    // ボタンを有効化
    saveBtn.disabled = false;
    saveBtn.innerHTML = '<i class="fas fa-save me-1"></i>ユーザーを追加';
    
    // モーダルを表示
    new bootstrap.Modal(modal).show();
  });
  
  // バリデーション
  const nameInput = document.getElementById('userName');
  if (nameInput) {
    nameInput.addEventListener('input', function() {
      if (this.value.trim()) {
        this.classList.remove('is-invalid');
        this.classList.add('is-valid');
      } else {
        this.classList.remove('is-valid');
        this.classList.add('is-invalid');
      }
    });
  }
  
  // 保存ボタンクリック
  saveBtn.addEventListener('click', function() {
    const userName = document.getElementById('userName').value.trim();
    const userPhone = document.getElementById('userPhone').value.trim();
    const userEmail = document.getElementById('userEmail').value.trim();
    const userBirthDate = document.getElementById('userBirthDate').value;
    const userPostalCode = document.getElementById('userPostalCode').value.trim();
    const userAddress = document.getElementById('userAddress').value.trim();
    const userMemo = document.getElementById('userMemo').value.trim();
    
    // バリデーション
    if (!userName) {
      alert('氏名を入力してください');
      document.getElementById('userName').focus();
      return;
    }
    
    // ボタンを無効化
    this.disabled = true;
    this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>追加中...';
    
    // CSRF トークンを取得
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    console.log('CSRF Token:', csrfToken);
    
    if (!csrfToken) {
      alert('CSRFトークンが見つかりません。ページを再読み込みしてください。');
      return;
    }
    
    // リクエストデータを準備
    const requestData = {
      user: {
        name: userName,
        phone_number: userPhone,
        email: userEmail,
        birth_date: userBirthDate || null,
        postal_code: userPostalCode,
        address: userAddress,
        admin_memo: userMemo
      }
    };
    
    console.log('Request data:', requestData);
    
    // ユーザー作成リクエストを送信
    fetch('/admin/users', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-CSRF-Token': csrfToken
      },
      body: JSON.stringify(requestData)
    })
    .then(response => {
      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers);
      
      if (!response.ok) {
        // レスポンスのテキストを取得して詳細を確認
        return response.text().then(text => {
          console.log('Response text:', text);
          try {
            const data = JSON.parse(text);
            console.log('Error response data:', data);
            throw new Error(data.errors ? data.errors.join(', ') : 'ユーザー作成に失敗しました');
          } catch (parseError) {
            console.log('JSON parse error:', parseError);
            throw new Error(`サーバーエラーが発生しました。ステータス: ${response.status}`);
          }
        });
      }
      return response.json();
    })
    .then(data => {
      console.log('✅ User created:', data);
      
      // 成功メッセージを表示
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-success alert-dismissible fade show';
      alertDiv.innerHTML = `
        <i class="fas fa-check-circle me-2"></i>
        ユーザー「${userName}」を追加しました！
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.querySelector('.container-lg').insertBefore(alertDiv, document.querySelector('.card'));
      
      // モーダルを閉じる
      bootstrap.Modal.getInstance(modal).hide();
      
      // ページをリロード（新しいユーザーを表示するため）
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    })
    .catch(error => {
      console.error('❌ Error creating user:', error);
      console.error('Error name:', error.name);
      console.error('Error message:', error.message);
      console.error('Error stack:', error.stack);
      
      // エラーメッセージを表示
      let errorMessage = 'ユーザー作成エラー: ';
      if (error.message.includes('Unexpected token')) {
        errorMessage += 'サーバーエラーが発生しました。ページを再読み込みしてください。';
      } else if (error.message.includes('Failed to fetch')) {
        errorMessage += 'ネットワークエラーが発生しました。サーバーが起動しているか確認してください。';
      } else {
        errorMessage += error.message || '不明なエラーが発生しました';
      }
      
      alert(errorMessage);
      
      // ボタンを元に戻す
      this.disabled = false;
      this.innerHTML = '<i class="fas fa-save me-1"></i>ユーザーを追加';
    });
  });
  
  // モーダルが閉じられたときのクリーンアップ
  modal.addEventListener('hidden.bs.modal', function() {
    form.reset();
    form.querySelectorAll('.form-control').forEach(input => {
      input.classList.remove('is-valid', 'is-invalid');
    });
    saveBtn.disabled = false;
    saveBtn.innerHTML = '<i class="fas fa-save me-1"></i>ユーザーを追加';
  });
});
</script>