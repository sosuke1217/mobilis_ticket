<div class="container my-4">
  <h1 class="mb-4">チケット一覧</h1>
  <%= search_form_for @q, url: admin_tickets_path, method: :get, html: { class: "row g-3 align-items-end mb-4" } do |f| %>
    <div class="col-md-4">
      <%= f.label :user_name_cont, "ユーザー名", class: "form-label" %>
      <%= f.text_field :user_name_cont, class: "form-control", placeholder: "例: 山田太郎" %>
    </div>

    <div class="col-md-3">
      <label for="q_remaining_status" class="form-label">ステータス</label>
      <%= select_tag "q[remaining_status]",
            options_for_select([
              ["すべて", ""],
              ["未使用あり", "unused"],
              ["すべて使用済み", "used"]
            ], params.dig(:q, :remaining_status)),
            class: "form-select" %>
    </div>

    <div class="col-md-auto d-flex align-items-end">
      <%= f.submit "検索", class: "btn btn-primary me-2" %>
      <%= link_to "リセット", admin_tickets_path, class: "btn btn-outline-secondary" %>
    </div>
  <% end %>
  <div class="mb-3">
    <%= link_to "CSVダウンロード", admin_tickets_path(format: :csv), class: "btn btn-sm btn-outline-success" %>
  </div>
  <table class="table table-striped table-hover align-middle">
    <thead class="table-dark">
      <tr>
        <th><%= sort_link(@q, :id, "ID") %></th>
        <th><%= sort_link(@q, 'user.name', "ユーザー") %></th>
        <th><%= sort_link(@q, :title, "タイトル") %></th>
        <th><%= sort_link(@q, :remaining_count, "残回数") %></th>
        <th><%= sort_link(@q, :expiry_date, "期限") %></th>
        <th>操作</th>
      </tr>
    </thead>
    <tbody>
      <% @tickets.each do |ticket| %>
        <tr>
          <td><%= ticket.id %></td>
          <td><%= ticket.user&.name.presence || ticket.user&.line_user_id %></td>
          <td><%= ticket.title.presence || ticket.ticket_template&.name || "チケット#{ticket.id}" %></td>
          <td>残り: <%= ticket.remaining_count %> 回</td>
          <td><%= ticket.expiry_date.strftime("%Y-%m-%d") %></td>
          <td>
            <button type="button" 
                    class="btn btn-sm btn-outline-danger delete-ticket-btn"
                    data-ticket-id="<%= ticket.id %>"
                    data-ticket-name="<%= ticket.title.presence || ticket.ticket_template&.name || "チケット#{ticket.id}" %>"
                    data-user-name="<%= ticket.user&.name.presence || ticket.user&.line_user_id %>">
              <i class="fas fa-trash"></i> 削除
            </button>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
  <div class="mt-3">
    <%= paginate @tickets %>
  </div>
</div>

<!-- チケット削除確認モーダル -->
<div class="modal fade" id="deleteTicketModal" tabindex="-1" aria-labelledby="deleteTicketModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="deleteTicketModalLabel">
          <i class="fas fa-exclamation-triangle me-2"></i>
          チケット削除の確認
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-4">
        <div class="text-center">
          <i class="fas fa-trash-alt fa-3x text-danger mb-3"></i>
          <p class="mb-3">以下のチケットを削除しますか？</p>
          <div class="alert alert-warning mb-3">
            <strong>チケット名:</strong> <span id="deleteTicketName"></span><br>
            <strong>ユーザー:</strong> <span id="deleteTicketUser"></span><br>
            <strong>残り回数:</strong> <span id="deleteTicketRemaining"></span> 回<br>
            <strong>注意:</strong> この操作は取り消すことができません
          </div>
          <p class="text-muted small mb-0">
            <i class="fas fa-info-circle me-1"></i>
            この操作は取り消すことができません
          </p>
        </div>
      </div>
      <div class="modal-footer justify-content-center p-3">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="cleanupModalBackground()">
          <i class="fas fa-times me-1"></i>キャンセル
        </button>
        <button type="button" class="btn btn-danger" id="confirmDeleteTicketBtn">
          <i class="fas fa-trash me-1"></i>削除する
        </button>
      </div>
    </div>
  </div>
</div>

<!-- モーダルのカスタムスタイル -->
<style>
  /* 削除モーダルのカスタムスタイル */
  #deleteTicketModal .modal-content {
    /* 高さ制限を完全に削除 */
    max-height: none;
    min-height: 400px;
    overflow: visible;
  }
  
  #deleteTicketModal .modal-body {
    /* スクロール制限を完全に削除 */
    overflow: visible;
    padding: 2rem;
    min-height: 200px;
  }
  
  #deleteTicketModal .modal-footer {
    border-top: 1px solid #dee2e6;
    padding: 1.5rem;
    background-color: #f8f9fa;
    margin-top: 0;
    min-height: 80px;
    /* フッターの幅をボディと合わせる */
    width: 100%;
    margin-left: 0;
    margin-right: 0;
  }
  
  #deleteTicketModal .alert {
    margin-bottom: 0;
    border: none;
    background-color: #fff3cd;
    color: #856404;
  }
  
  #deleteTicketModal .btn {
    padding: 0.5rem 1.5rem;
    font-weight: 500;
  }
  
  #deleteTicketModal .text-danger {
    color: #dc3545 !important;
  }
  
  #deleteTicketModal .text-muted {
    color: #6c757d !important;
  }
  
  /* モーダル背景の暗さを調整 */
  #deleteTicketModal.modal-backdrop {
    opacity: 0.1 !important;
  }
  
  /* モーダルが閉じた後の背景を明るくする */
  body.modal-open {
    background-color: rgba(0, 0, 0, 0.02) !important;
  }
  
  /* モーダル背景の透明度を調整 */
  .modal-backdrop.show {
    opacity: 0.1 !important;
  }
</style>

<!-- 独立したスクリプトセクション -->
<script type="text/javascript">
// チケット一覧ページ専用のJavaScript
// 重複実行を完全に防ぐための強力なメカニズム

// グローバルスコープでの重複実行チェック（より強力な方法）
if (typeof window.ticketListScriptLoaded === 'undefined') {
  window.ticketListScriptLoaded = true;
  
  // スクリプト実行時刻を記録
  window.ticketListScriptTimestamp = Date.now();
  
  console.log('🎫 チケット一覧ページスクリプト初期化開始', {
    timestamp: window.ticketListScriptTimestamp,
    url: window.location.href
  });
  
  // メイン処理を即座に実行
  (function() {
    'use strict';
    
    // ローカルスコープでの変数宣言
    let isProcessing = false;
    let isInitialized = false;
    let initializationAttempts = 0;
    const maxInitializationAttempts = 3;
    
    // 初期化完了フラグを設定
    function markAsInitialized() {
      isInitialized = true;
      window.ticketListInitializationComplete = true;
      console.log('✅ チケット一覧ページ初期化完了フラグを設定');
    }
    
    // チケット一覧ページの初期化
    function initializeTicketList() {
      try {
        if (isInitialized) {
          console.log('⚠️ 既に初期化済みです');
          return true;
        }
        
        console.log('🎫 チケット一覧ページ初期化開始（試行回数:', initializationAttempts + 1, '）');
        
        // ページ全体のHTML確認
        console.log('🔍 ページ全体のHTML確認:', document.body.innerHTML.length);
        
        // 初期化時のモーダル要素確認
        const deleteTicketModal = document.querySelector('#deleteTicketModal');
        const deleteTicketName = document.querySelector('#deleteTicketName');
        const deleteTicketUser = document.querySelector('#deleteTicketUser');
        const deleteTicketRemaining = document.querySelector('#deleteTicketRemaining');
        const confirmDeleteTicketBtn = document.querySelector('#confirmDeleteTicketBtn');
        
        console.log('🔍 初期化時のモーダル要素確認:', {
          modal: !!deleteTicketModal,
          name: !!deleteTicketName,
          user: !!deleteTicketUser,
          remaining: !!deleteTicketRemaining,
          confirmBtn: !!confirmDeleteTicketBtn
        });
        
        // 必要な要素がすべて存在するかチェック
        if (!deleteTicketModal || !deleteTicketName || !deleteTicketUser || !deleteTicketRemaining || !confirmDeleteTicketBtn) {
          console.error('❌ 必要なモーダル要素が見つかりません。詳細調査を実行します...');
          
          // 削除関連のIDを持つ要素を検索
          const deleteElements = document.querySelectorAll('[id*="delete"]');
          console.log('🔍 削除関連のIDを持つ要素:', deleteElements);
          
          // モーダル要素を検索
          const modalElements = document.querySelectorAll('.modal');
          console.log('🔍 モーダル要素:', modalElements);
          
          // 各モーダルの詳細情報を出力
          modalElements.forEach((modal, index) => {
            console.log(`🔍 モーダル${index + 1}:`, {
              id: modal.id,
              visible: modal.style.display !== 'none',
              children: modal.children.length
            });
          });
          
          return false;
        }
        
        console.log('✅ モーダル要素の確認完了');
        
        // 削除ボタンのイベントリスナーを設定
        const deleteButtons = document.querySelectorAll('.delete-ticket-btn');
        console.log(`🔘 削除ボタン${deleteButtons.length}個を発見`);
        
        deleteButtons.forEach(button => {
          // 既存のイベントリスナーを削除
          button.removeEventListener('click', handleTicketDelete);
          
          // 新しいイベントリスナーを追加
          button.addEventListener('click', handleTicketDelete);
        });
        
        markAsInitialized();
        console.log('✅ チケット一覧ページ初期化完了');
        return true;
        
      } catch (error) {
        console.error('❌ チケット一覧ページ初期化中にエラーが発生しました:', error);
        return false;
      }
    }
  
  // チケット削除処理
  function handleTicketDelete(event) {
    try {
      const ticketId = event.target.getAttribute('data-ticket-id');
      const ticketName = event.target.getAttribute('data-ticket-name');
      const userName = event.target.getAttribute('data-user-name');
      
      console.log('🗑️ チケット削除処理開始:', { ticketId, ticketName, userName });
      
      // 必要な属性の確認
      if (!ticketId || !ticketName) {
        console.error('❌ 削除ボタンに必要な属性が設定されていません:', { ticketId, ticketName });
        return;
      }
      
      // モーダル表示関数を呼び出し
      showDeleteModal(ticketId, ticketName, userName);
      
    } catch (error) {
      console.error('❌ チケット削除処理中にエラーが発生しました:', error);
      alert('削除処理の準備中にエラーが発生しました: ' + error.message);
    }
  }
  
  // 削除確認モーダルを表示する関数
  function showDeleteModal(ticketId, ticketName, userName) {
    try {
      console.log('🎭 モーダル表示開始:', { ticketId, ticketName, userName });
      
      // より確実な要素検索
      const deleteTicketModal = document.querySelector('#deleteTicketModal');
      const deleteTicketName = document.querySelector('#deleteTicketName');
      const deleteTicketUser = document.querySelector('#deleteTicketUser');
      const deleteTicketRemaining = document.querySelector('#deleteTicketRemaining');
      
      // 要素の存在確認とデバッグ情報
      console.log('🔍 モーダル要素検索結果:', {
        modal: !!deleteTicketModal,
        name: !!deleteTicketName,
        user: !!deleteTicketUser,
        remaining: !!deleteTicketRemaining
      });
      
      if (!deleteTicketModal) {
        console.error('❌ モーダル本体が見つかりません');
        console.log('🔍 ページ内のモーダル要素:', document.querySelectorAll('.modal'));
        return;
      }
      
      if (!deleteTicketName) {
        console.error('❌ チケット名要素が見つかりません');
        console.log('🔍 ページ内の要素:', document.querySelectorAll('[id*="delete"]'));
        return;
      }
      
      if (!deleteTicketUser) {
        console.error('❌ ユーザー名要素が見つかりません');
        return;
      }
      
      if (!deleteTicketRemaining) {
        console.error('❌ 残り回数要素が見つかりません');
        return;
      }
      
      // チケット行から残り回数を取得
      const ticketRow = document.querySelector(`tr:has(button[data-ticket-id="${ticketId}"])`);
      if (!ticketRow) {
        console.error('❌ チケット行が見つかりません');
        return;
      }
      
      // 残り回数を取得（4列目）
      const remainingCountCell = ticketRow.children[3]; // 0-indexedなので4列目は3
      if (!remainingCountCell) {
        console.error('❌ 残り回数セルが見つかりません');
        return;
      }
      
      // 残り回数を抽出（例: "残り: 3 回" から "3" を取得）
      const remainingCountMatch = remainingCountCell.textContent.match(/残り:\s*(\d+)\s*回/);
      if (!remainingCountMatch) {
        console.error('❌ 残り回数の形式が期待と異なります:', remainingCountCell.textContent);
        return;
      }
      
      const remainingCount = remainingCountMatch[1];
      console.log('📊 残り回数:', remainingCount);
      
      // モーダルにデータを設定
      deleteTicketName.textContent = ticketName || '不明';
      deleteTicketUser.textContent = userName || '不明';
      deleteTicketRemaining.textContent = remainingCount || '不明';
      
      // モーダルを表示
      const deleteModal = new bootstrap.Modal(deleteTicketModal);
      deleteModal.show();
      
      // 削除実行ボタンのイベントリスナー
      const confirmBtn = document.querySelector('#confirmDeleteTicketBtn');
      if (confirmBtn) {
        confirmBtn.onclick = function() {
          deleteTicket(ticketId);
          deleteModal.hide();
          cleanupModalBackground();
        };
      }
      
      console.log('✅ 削除確認モーダル表示完了');
      
    } catch (error) {
      console.error('❌ モーダル表示中にエラーが発生しました:', error);
      alert('モーダル表示中にエラーが発生しました: ' + error.message);
    }
  }
  
  // チケット削除実行
  function deleteTicket(ticketId) {
    if (isProcessing) {
      console.log('⚠️ 既に処理中のため、重複実行をスキップ');
      return;
    }
    
    isProcessing = true;
    
    try {
      console.log('🔄 チケット削除API呼び出し中...');
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      if (!csrfToken) {
        throw new Error('CSRFトークンが見つかりません');
      }
      
      // チケット削除APIを呼び出し
      fetch(`/admin/tickets/${ticketId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        }
      })
      .then(response => {
        console.log('Response status:', response.status);
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        return response.json().catch(() => ({ success: true }));
      })
      .then(data => {
        console.log('✅ Ticket deleted:', data);
        
        // 成功メッセージを表示
        showAlert('success', 'チケットを削除しました');
        
        // チケット行を即座に削除
        const ticketRow = document.querySelector(`tr:has(button[data-ticket-id="${ticketId}"])`);
        if (ticketRow) {
          ticketRow.remove();
          console.log('✅ チケット行を削除しました');
        }
        
        // チケットが0件になった場合の処理
        const remainingRows = document.querySelectorAll('tbody tr');
        if (remainingRows.length === 0) {
          const tbody = document.querySelector('tbody');
          tbody.innerHTML = `
            <tr>
              <td colspan="6" class="text-center py-4">
                <i class="fas fa-ticket-alt fa-3x text-muted mb-3"></i>
                <p class="text-muted">チケットがありません</p>
              </td>
            </tr>
          `;
          console.log('✅ 「チケットがありません」の表示を追加しました');
        }
        
        // 成功メッセージを3秒後に自動で消す
        setTimeout(() => {
          const alertElement = document.querySelector('.alert-success');
          if (alertElement && alertElement.parentNode) {
            alertElement.remove();
          }
        }, 3000);
        
        console.log('🔄 チケット削除完了');
      })
      .catch(error => {
        console.error('❌ Error deleting ticket:', error);
        showAlert('danger', `チケット削除エラー: ${error.message}`);
      })
      .finally(() => {
        isProcessing = false;
      });
      
    } catch (error) {
      console.error('❌ チケット削除処理中にエラーが発生しました:', error);
      showAlert('danger', `削除処理エラー: ${error.message}`);
      isProcessing = false;
    }
  }
  
  // アラート表示関数
  function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
      <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    const container = document.querySelector('.container');
    if (container) {
      container.insertBefore(alertDiv, container.firstChild);
      
      // アラートを自動で消す
      setTimeout(() => {
        if (alertDiv && alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 5000);
    }
  }
  
  // モーダル背景のクリーンアップ
  function cleanupModalBackground() {
    try {
      console.log('🔄 モーダル背景クリーンアップ開始');
      
      const modalBackdrops = document.querySelectorAll('.modal-backdrop');
      modalBackdrops.forEach(backdrop => backdrop.remove());
      
      document.body.classList.remove('modal-open');
      document.body.style.overflow = '';
      document.body.style.paddingRight = '';
      
      console.log('✅ モーダル背景クリーンアップ完了');
    } catch (error) {
      console.error('❌ モーダル背景クリーンアップ中にエラーが発生しました:', error);
    }
  }
  
  // イベントリスナーの設定
  function setupEventListeners() {
    // チケット削除ボタンクリック時
    document.addEventListener('click', function(e) {
      const deleteBtn = e.target.classList.contains('delete-ticket-btn') ? e.target : e.target.closest('.delete-ticket-btn');
      
      if (deleteBtn && !deleteBtn.disabled && !isProcessing) {
        e.preventDefault();
        e.stopPropagation();
        
        // 属性の詳細なログ出力
        console.log('🔍 削除ボタンの詳細情報:', {
          element: deleteBtn,
          classList: Array.from(deleteBtn.classList),
          attributes: Array.from(deleteBtn.attributes).map(attr => ({ name: attr.name, value: attr.value })),
          dataset: deleteBtn.dataset,
          outerHTML: deleteBtn.outerHTML.substring(0, 200) + '...'
        });
        
        const ticketId = deleteBtn.getAttribute('data-ticket-id');
        const ticketName = deleteBtn.getAttribute('data-ticket-name');
        const userName = deleteBtn.getAttribute('data-user-name');
        
        console.log('📋 取得された属性値:', {
          ticketId: ticketId,
          ticketName: ticketName,
          userName: userName,
          ticketIdType: typeof ticketId,
          ticketNameType: typeof ticketName,
          userNameType: typeof userName
        });
        
        if (ticketId && ticketName) {
          handleTicketDelete(e); // イベントオブジェクトを渡す
        } else {
          console.error('❌ 削除ボタンに必要な属性が設定されていません:', {
            ticketId: !!ticketId,
            ticketName: !!ticketName,
            button: deleteBtn
          });
          
          // 空文字列の場合の詳細ログ
          if (ticketName === '') {
            console.error('⚠️ ticketNameが空文字列です。HTMLの確認が必要です。');
            console.log('🔍 ボタンの完全なHTML:', deleteBtn.outerHTML);
            console.log('🔍 ボタンの全属性:', Array.from(deleteBtn.attributes).map(attr => ({ name: attr.name, value: attr.value })));
          }
          
          alert('削除ボタンの設定に問題があります。ページを再読み込みしてください。');
        }
      }
    });
  }
  
  // 初期化の実行
  function startInitialization() {
    // 既に初期化済みの場合は何もしない
    if (isInitialized || window.ticketListInitializationComplete) {
      console.log('⚠️ 既に初期化済みです');
      return;
    }
    
    // 最大試行回数をチェック
    if (initializationAttempts >= maxInitializationAttempts) {
      console.error('❌ 最大初期化試行回数に達しました。初期化を中止します。');
      return;
    }
    
    initializationAttempts++;
    
    if (initializeTicketList()) {
      setupEventListeners();
      console.log('✅ チケット一覧ページ初期化完了');
    } else {
      console.error('❌ チケット一覧ページ初期化に失敗しました（試行回数:', initializationAttempts, '/', maxInitializationAttempts, '）');
      
      // 初期化失敗時の再試行
      if (initializationAttempts < maxInitializationAttempts) {
        const delay = Math.min(300 * initializationAttempts, 1000); // 最大1秒まで
        console.log(`🔄 ${delay}ms 後に再試行します...`);
        setTimeout(startInitialization, delay);
      } else {
        console.error('❌ 最大試行回数に達しました。初期化を中止します。');
        // エラー状態を記録
        window.ticketListInitializationFailed = true;
      }
    }
  }
  
  // 初期化の開始（単一のタイミングで実行）
  function beginInitialization() {
    // 既に初期化が開始されている場合は何もしない
    if (window.ticketListInitializationStarted) {
      console.log('⚠️ 初期化は既に開始されています');
      return;
    }
    
    window.ticketListInitializationStarted = true;
    console.log('🚀 初期化プロセスを開始します');
    
    // DOMの準備状態に応じて初期化を実行
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() {
        console.log('🎫 DOMContentLoaded イベント発生');
        setTimeout(startInitialization, 100);
      });
    } else {
      console.log('🎫 readyState 既に完了 - 即座に初期化');
      startInitialization();
    }
  }
  
  // バックアップ初期化（1回のみ）
  window.addEventListener('load', function() {
    console.log('🎫 load イベント発生');
    if (!isInitialized && !window.ticketListInitializationComplete) {
      console.log('🔄 バックアップ初期化を実行します');
      setTimeout(startInitialization, 200);
    }
  });
  
  // グローバル関数として公開（必要に応じて）
  window.cleanupModalBackground = cleanupModalBackground;
  
})();
</script>

