<div class="container my-4">
  <h1 class="mb-4">チケット一覧</h1>
  <%= search_form_for @q, url: admin_tickets_path, method: :get, html: { class: "row g-3 align-items-end mb-4" } do |f| %>
    <div class="col-md-4">
      <%= f.label :user_name_cont, "ユーザー名", class: "form-label" %>
      <%= f.text_field :user_name_cont, class: "form-control", placeholder: "例: 山田太郎" %>
    </div>

    <div class="col-md-3">
      <label for="q_remaining_status" class="form-label">ステータス</label>
      <%= select_tag "q[remaining_status]",
            options_for_select([
              ["すべて", ""],
              ["未使用あり", "unused"],
              ["すべて使用済み", "used"]
            ], params.dig(:q, :remaining_status)),
            class: "form-select" %>
    </div>

    <div class="col-md-auto d-flex align-items-end">
      <%= f.submit "検索", class: "btn btn-primary me-2" %>
      <%= link_to "リセット", admin_tickets_path, class: "btn btn-outline-secondary" %>
    </div>
  <% end %>
  <div class="mb-3">
    <%= link_to "CSVダウンロード", admin_tickets_path(format: :csv), class: "btn btn-sm btn-outline-success" %>
  </div>
  <table class="table table-striped table-hover align-middle">
    <thead class="table-dark">
      <tr>
        <th><%= sort_link(@q, :id, "ID") %></th>
        <th><%= sort_link(@q, 'user.name', "ユーザー") %></th>
        <th><%= sort_link(@q, :title, "タイトル") %></th>
        <th><%= sort_link(@q, :remaining_count, "残回数") %></th>
        <th><%= sort_link(@q, :expiry_date, "期限") %></th>
        <th>操作</th>
      </tr>
    </thead>
    <tbody>
      <% @tickets.each do |ticket| %>
        <tr>
          <td><%= ticket.id %></td>
          <td><%= ticket.user&.name.presence || ticket.user&.line_user_id %></td>
          <td><%= ticket.title %></td>
          <td>残り: <%= ticket.remaining_count %> 回</td>
          <td><%= ticket.expiry_date.strftime("%Y-%m-%d") %></td>
          <td>
            <button type="button" 
                    class="btn btn-sm btn-outline-danger delete-ticket-btn"
                    data-ticket-id="<%= ticket.id %>"
                    data-ticket-name="<%= ticket.title %>"
                    data-user-name="<%= ticket.user&.name.presence || ticket.user&.line_user_id %>">
              <i class="fas fa-trash"></i> 削除
            </button>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
  <div class="mt-3">
    <%= paginate @tickets %>
  </div>
</div>

<!-- チケット削除確認モーダル -->
<div class="modal fade" id="deleteTicketModal" tabindex="-1" aria-labelledby="deleteTicketModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="deleteTicketModalLabel">
          <i class="fas fa-exclamation-triangle me-2"></i>チケット削除の確認
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>以下のチケットを削除しますか？</p>
        <div class="alert alert-warning">
          <strong>チケット名:</strong> <span id="deleteTicketName"></span><br>
          <strong>ユーザー:</strong> <span id="deleteTicketUser"></span><br>
          <strong>注意:</strong> この操作は取り消せません。
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">キャンセル</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteTicketBtn">
          <i class="fas fa-trash me-1"></i>削除を実行
        </button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  console.log('🎫 チケット一覧ページ初期化開始');
  
  // チケット削除ボタンクリック時
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('delete-ticket-btn') || e.target.closest('.delete-ticket-btn')) {
      const deleteBtn = e.target.classList.contains('delete-ticket-btn') ? e.target : e.target.closest('.delete-ticket-btn');
      
      // 既に処理中の場合は何もしない
      if (deleteBtn.disabled) {
        console.log('⚠️ 既に処理中のため、重複実行をスキップ');
        return;
      }
      
      const ticketId = deleteBtn.getAttribute('data-ticket-id');
      const ticketName = deleteBtn.getAttribute('data-ticket-name');
      const userName = deleteBtn.getAttribute('data-user-name');
      
      console.log('🗑️ チケット削除処理開始:', { ticketId, ticketName, userName });
      
      // モーダルにデータを設定
      const deleteTicketName = document.getElementById('deleteTicketName');
      const deleteTicketUser = document.getElementById('deleteTicketUser');
      
      if (!deleteTicketName || !deleteTicketUser) {
        console.error('❌ 削除確認モーダルの要素が見つかりません');
        alert('削除確認モーダルの準備に失敗しました');
        return;
      }
      
      deleteTicketName.textContent = ticketName;
      deleteTicketUser.textContent = userName;
      
      // モーダルを表示
      const deleteModal = new bootstrap.Modal(document.getElementById('deleteTicketModal'));
      deleteModal.show();
      
      // 削除実行ボタンのイベントリスナー
      document.getElementById('confirmDeleteTicketBtn').onclick = function() {
        deleteTicket(ticketId, deleteBtn);
        deleteModal.hide();
        
        // 即座に背景をクリーンアップ
        cleanupModalBackground();
      };
    }
  });
  
  // チケット削除実行
  function deleteTicket(ticketId, deleteBtn) {
    try {
      console.log('🔄 チケット削除API呼び出し中...');
      
      // 削除ボタンを無効化
      const originalText = deleteBtn.innerHTML;
      deleteBtn.disabled = true;
      deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 削除中...';
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      if (!csrfToken) {
        throw new Error('CSRFトークンが見つかりません');
      }
      
      // チケット削除APIを呼び出し
      fetch(`/admin/tickets/${ticketId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        }
      })
      .then(response => {
        console.log('Response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || `HTTP ${response.status}`);
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ Ticket deleted:', data);
        
        // 成功メッセージを表示
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success alert-dismissible fade show';
        alertDiv.innerHTML = `
          <i class="fas fa-check-circle me-2"></i>
          チケットを削除しました
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.querySelector('.container').insertBefore(alertDiv, document.querySelector('h1'));
        
        // チケット行を即座に削除
        const ticketRow = deleteBtn.closest('tr');
        if (ticketRow) {
          ticketRow.remove();
          console.log('✅ チケット行を削除しました');
        }
        
        // チケットが0件になった場合の処理
        const remainingRows = document.querySelectorAll('tbody tr');
        if (remainingRows.length === 0) {
          const tbody = document.querySelector('tbody');
          tbody.innerHTML = `
            <tr>
              <td colspan="6" class="text-center py-4">
                <i class="fas fa-ticket-alt fa-3x text-muted mb-3"></i>
                <p class="text-muted">チケットがありません</p>
              </td>
            </tr>
          `;
          console.log('✅ 「チケットがありません」の表示を追加しました');
        }
        
        // 成功メッセージを3秒後に自動で消す
        setTimeout(() => {
          if (alertDiv && alertDiv.parentNode) {
            alertDiv.remove();
          }
        }, 3000);
        
        console.log('🔄 チケット削除完了');
      })
      .catch(error => {
        console.error('❌ Error deleting ticket:', error);
        
        // エラーメッセージを表示
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-danger alert-dismissible fade show';
        alertDiv.innerHTML = `
          <i class="fas fa-exclamation-triangle me-2"></i>
          チケット削除エラー: ${error.message}
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.querySelector('.container').insertBefore(alertDiv, document.querySelector('h1'));
        
        // エラーメッセージを5秒後に自動で消す
        setTimeout(() => {
          if (alertDiv && alertDiv.parentNode) {
            alertDiv.remove();
          }
        }, 5000);
      })
      .finally(() => {
        // ボタンを元に戻す
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = originalText;
        console.log('🔄 チケット削除処理完了');
      });
      
    } catch (error) {
      console.error('❌ チケット削除処理中にエラーが発生しました:', error);
      
      // エラーメッセージを表示
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-danger alert-dismissible fade show';
      alertDiv.innerHTML = `
        <i class="fas fa-exclamation-triangle me-2"></i>
        チケット削除エラー: ${error.message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.querySelector('.container').insertBefore(alertDiv, document.querySelector('h1'));
      
      // エラーメッセージを5秒後に自動で消す
      setTimeout(() => {
        if (alertDiv && alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 5000);
      
      // ボタンを元に戻す
      deleteBtn.disabled = false;
      deleteBtn.innerHTML = originalText;
    }
  }
  
  // モーダル背景のクリーンアップ
  function cleanupModalBackground() {
    try {
      console.log('🔄 モーダル背景クリーンアップ開始');
      
      // モーダル背景要素を削除
      const modalBackdrops = document.querySelectorAll('.modal-backdrop');
      modalBackdrops.forEach(backdrop => {
        backdrop.remove();
        console.log('🗑️ モーダル背景要素を削除しました');
      });
      
      // bodyの状態をリセット
      document.body.classList.remove('modal-open');
      document.body.style.overflow = '';
      document.body.style.paddingRight = '';
      
      console.log('✅ モーダル背景クリーンアップ完了');
    } catch (error) {
      console.error('❌ モーダル背景クリーンアップ中にエラーが発生しました:', error);
    }
  }
  
  console.log('🎫 チケット一覧ページ初期化完了');
});
</script>
