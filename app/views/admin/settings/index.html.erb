<!-- app/views/admin/settings/index.html.erb -->
<div class="container-lg my-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h2">⚙️ システム設定</h1>
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><%= link_to "管理画面", admin_root_path %></li>
        <li class="breadcrumb-item active">システム設定</li>
      </ol>
    </nav>
  </div>

  <div class="row">
    <!-- 予約設定 -->
    <div class="col-md-6">
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">🕐 予約時間設定</h5>
        </div>
        <div class="card-body">
          <%= form_with model: @settings, url: admin_settings_path, local: true, class: "needs-validation business-hours-form", novalidate: true do |f| %>
            
            <div class="mb-3">
              <label for="application_setting_reservation_interval_minutes" class="form-label">
                📏 予約間インターバル
                <i class="fas fa-info-circle" data-bs-toggle="tooltip" title="前の予約終了から次の予約開始までの準備・移動時間"></i>
              </label>
              <div class="input-group">
                <%= f.number_field :reservation_interval_minutes, 
                    class: "form-control", 
                    min: 0, 
                    max: 60, 
                    step: 5,
                    required: true %>
                <span class="input-group-text">分</span>
              </div>
              <div class="form-text">
                <strong>推奨：20分</strong> - 出張サービスの移動時間を考慮<br>
                例：20分設定の場合、13:00-14:00の予約の次は14:20以降から予約可能
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-6">
                <label for="application_setting_business_hours_start" class="form-label">🌅 営業開始時間</label>
                <div class="input-group">
                  <%= f.number_field :business_hours_start, 
                      class: "form-control business-hours-input", 
                      min: 0, 
                      max: 23,
                      required: true %>
                  <span class="input-group-text">時</span>
                </div>
              </div>
              <div class="col-6">
                <label for="application_setting_business_hours_end" class="form-label">🌆 営業終了時間</label>
                <div class="input-group">
                  <%= f.number_field :business_hours_end, 
                      class: "form-control business-hours-input", 
                      min: 1, 
                      max: 24,
                      required: true %>
                  <span class="input-group-text">時</span>
                </div>
              </div>
            </div>

            <div class="mb-3">
              <label for="application_setting_slot_interval_minutes" class="form-label">
                ⏱️ 予約スロット間隔
              </label>
              <div class="input-group">
                <%= f.select :slot_interval_minutes, 
                    options_for_select([
                      ['10分', 10],
                      ['15分', 15],
                      ['30分', 30],
                      ['60分', 60]
                    ], @settings.slot_interval_minutes),
                    {}, 
                    { class: "form-select", required: true } %>
              </div>
              <div class="form-text">予約可能時間の刻み幅</div>
            </div>

            <div class="border-top pt-3">
              <button type="submit" class="btn btn-success">
                <i class="fas fa-save me-1"></i>設定を保存
              </button>

            </div>
          <% end %>
        </div>
      </div>
    </div>

    <!-- 予約制限設定 -->
    <div class="col-md-6">
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">⚠️ 予約制限設定</h5>
        </div>
        <div class="card-body">
          <%= form_with model: @settings, url: admin_settings_path, local: true, class: "needs-validation", novalidate: true do |f| %>
            
            <div class="mb-3">
              <label for="application_setting_max_advance_booking_days" class="form-label">
                📅 最大予約可能日数
              </label>
              <div class="input-group">
                <%= f.number_field :max_advance_booking_days, 
                    class: "form-control", 
                    min: 1, 
                    max: 365,
                    required: true %>
                <span class="input-group-text">日先まで</span>
              </div>
            </div>

            <div class="mb-3">
              <label for="application_setting_min_advance_booking_hours" class="form-label">
                ⏰ 最低予約時間
              </label>
              <div class="input-group">
                <%= f.number_field :min_advance_booking_hours, 
                    class: "form-control", 
                    min: 0, 
                    max: 168,
                    required: true %>
                <span class="input-group-text">時間前まで</span>
              </div>
              <div class="form-text">
                <small class="text-muted">※管理者による予約作成時は制限なし</small>
              </div>
            </div>

            <div class="mb-3">
              <div class="form-check">
                <%= f.check_box :sunday_closed, class: "form-check-input" %>
                <label class="form-check-label" for="application_setting_sunday_closed">
                  🔒 日曜日を休業日とする
                </label>
              </div>
            </div>

            <div class="border-top pt-3">
              <button type="submit" class="btn btn-warning">
                <i class="fas fa-save me-1"></i>制限設定を保存
              </button>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- 現在の設定プレビュー -->
  <div class="card shadow-sm">
    <div class="card-header bg-info text-white">
      <h5 class="mb-0">📊 現在の設定プレビュー</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <h6>⏰ 営業時間・予約設定</h6>
          <ul class="list-unstyled">
            <li><strong>営業時間:</strong> <%= @settings.business_hours_range %></li>
            <li><strong>予約間隔:</strong> <%= @settings.slot_interval_minutes %>分刻み</li>
            <li><strong>インターバル:</strong> 
              <span class="badge bg-primary"><%= @settings.reservation_interval_minutes %>分</span>
            </li>
            <li><strong>休業日:</strong> <%= @settings.sunday_closed? ? "日曜日" : "なし" %></li>
          </ul>
        </div>
        <div class="col-md-6">
          <h6>🚫 予約制限</h6>
          <ul class="list-unstyled">
            <li><strong>最大予約期間:</strong> <%= @settings.max_advance_booking_days %>日先まで</li>
            <li><strong>最低予約時間:</strong> <%= @settings.min_advance_booking_hours %>時間前まで</li>
          </ul>
          
          <h6 class="mt-3">📝 設定例</h6>
          <div class="alert alert-light">
            <small>
              <strong>今日が15:00の場合:</strong><br>
              • 明日の16:00以降から予約可能<br>
              • 60分コース予約後、<%= @settings.reservation_interval_minutes %>分の準備・移動時間<br>
              • 13:00-14:00の次は14:<%= @settings.reservation_interval_minutes.to_s.rjust(2, '0') %>以降から予約可能
            </small>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // ツールチップを有効化
  const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
  });

  // フォームバリデーション
  const forms = document.querySelectorAll('.needs-validation');
  Array.from(forms).forEach(form => {
    form.addEventListener('submit', event => {
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
      }
      form.classList.add('was-validated');
    }, false);
  });

  // 営業時間の妥当性チェックとリアルタイム更新
  const startTime = document.getElementById('application_setting_business_hours_start');
  const endTime = document.getElementById('application_setting_business_hours_end');
  
  function validateBusinessHours() {
    const start = parseInt(startTime.value);
    const end = parseInt(endTime.value);
    
    if (start >= end) {
      endTime.setCustomValidity('営業終了時間は開始時間より後に設定してください');
      return false;
    } else {
      endTime.setCustomValidity('');
      return true;
    }
  }
  
  // 営業時間のリアルタイム更新
  function updateBusinessHours() {
    const start = parseInt(startTime.value);
    const end = parseInt(endTime.value);
    
    if (start < end) {
      console.log(`🔄 営業時間を更新: ${start}:00-${end}:00`);
      
      // カレンダーページが開いている場合は更新
      if (window.shiftHighlighter) {
        window.shiftHighlighter.changeShift(start, end);
      }
      
      // サーバーに保存
      saveBusinessHoursToServer(start, end);
      
      // 成功通知を表示
      showNotification('営業時間が更新されました', 'success');
    }
  }
  
  // サーバーに営業時間を保存
  async function saveBusinessHoursToServer(start, end) {
    try {
      const response = await fetch('/admin/settings/1/update_business_hours', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        },
        body: JSON.stringify({
          business_hours_start: start,
          business_hours_end: end
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        console.log('✅ Business hours saved to server:', data);
      } else {
        console.error('❌ Failed to save business hours:', data.error);
        showNotification('営業時間の保存に失敗しました', 'error');
      }
    } catch (error) {
      console.error('❌ Network error:', error);
      showNotification('ネットワークエラーが発生しました', 'error');
    }
  }
  
  if (startTime && endTime) {
    startTime.addEventListener('change', () => {
      validateBusinessHours();
      updateBusinessHours();
    });
    endTime.addEventListener('change', () => {
      validateBusinessHours();
      updateBusinessHours();
    });
  }
  
  // 通知表示関数
  function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    notification.style.cssText = `
      top: 20px;
      right: 20px;
      z-index: 1050;
      min-width: 300px;
      animation: slideIn 0.3s ease-out;
    `;
    notification.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(notification);
    
    // 3秒後に自動削除
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
  

});
</script>

<style>
.card {
  transition: box-shadow 0.15s ease-in-out;
}

.card:hover {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
}

.form-control:focus, .form-select:focus {
  border-color: #86b7fe;
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.alert-light {
  background-color: #f8f9fa;
  border: 1px solid #dee2e6;
}

.badge {
  font-size: 0.9em;
}
</style>