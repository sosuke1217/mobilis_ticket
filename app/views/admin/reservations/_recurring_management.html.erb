<!-- app/views/admin/reservations/_recurring_management.html.erb -->
<div class="card">
  <div class="card-header bg-light">
    <h6 class="mb-0">
      <i class="fas fa-repeat me-2"></i>繰り返し予約管理
    </h6>
  </div>
  <div class="card-body">
    
    <!-- 既存の繰り返し予約情報表示 -->
    <div id="existingRecurringInfo" style="display: none;">
      <div class="alert alert-info">
        <h6 class="alert-heading">
          <i class="fas fa-info-circle me-2"></i>この予約は繰り返し予約です
        </h6>
        <div class="row">
          <div class="col-md-4">
            <strong>パターン:</strong> 
            <span id="currentRecurringType">-</span>
          </div>
          <div class="col-md-4">
            <strong>終了日:</strong> 
            <span id="currentRecurringUntil">-</span>
          </div>
          <div class="col-md-4">
            <strong>子予約数:</strong> 
            <span id="childReservationsCount">-</span>件
          </div>
        </div>
        <hr>
        <div class="mb-0">
          <button type="button" class="btn btn-warning btn-sm" id="cancelRecurringBtn">
            <i class="fas fa-stop me-1"></i>繰り返し予約を停止
          </button>
          <button type="button" class="btn btn-info btn-sm ms-2" id="viewChildReservationsBtn">
            <i class="fas fa-list me-1"></i>関連予約を表示
          </button>
        </div>
      </div>
    </div>

    <!-- 新規繰り返し予約作成 -->
    <div id="newRecurringSection">
      <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" id="enableRecurring">
        <label class="form-check-label" for="enableRecurring">
          <strong>この予約を繰り返し予約にする</strong>
        </label>
      </div>

      <div id="recurringSettings" style="display: none;">
        <div class="border rounded p-3 mb-3">
          <div class="row">
            <div class="col-md-6">
              <label for="recurringType" class="form-label">
                <i class="fas fa-calendar-alt me-1"></i>繰り返しパターン
              </label>
              <select class="form-select" id="recurringType">
                <option value="weekly">毎週（同じ曜日・時間）</option>
                <option value="monthly">毎月（同じ日・時間）</option>
              </select>
              <div class="form-text">
                <small id="recurringPatternDescription">毎週同じ曜日の同じ時間に予約を作成します</small>
              </div>
            </div>
            <div class="col-md-6">
              <label for="recurringUntil" class="form-label">
                <i class="fas fa-calendar-times me-1"></i>終了日
              </label>
              <input type="date" class="form-select" id="recurringUntil">
              <div class="form-text">
                <small>この日まで繰り返し予約を作成します</small>
              </div>
            </div>
          </div>

          <!-- プレビュー -->
          <div class="mt-3">
            <h6 class="mb-2">
              <i class="fas fa-eye me-1"></i>プレビュー
            </h6>
            <div id="recurringPreview" class="bg-light p-2 rounded">
              設定を選択するとプレビューが表示されます
            </div>
          </div>

          <!-- 確認と作成 -->
          <div class="mt-3 d-flex justify-content-between align-items-center">
            <div>
              <small class="text-muted">
                <i class="fas fa-exclamation-triangle me-1"></i>
                作成される予約数: <span id="estimatedCount">0</span>件
              </small>
            </div>
            <button type="button" class="btn btn-success" id="createRecurringBtn">
              <i class="fas fa-magic me-1"></i>繰り返し予約を作成
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- 高度な設定 -->
    <div class="accordion mt-3" id="advancedSettings">
      <div class="accordion-item">
        <h2 class="accordion-header">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#advancedOptions">
            <i class="fas fa-cog me-2"></i>高度な設定
          </button>
        </h2>
        <div id="advancedOptions" class="accordion-collapse collapse" data-bs-parent="#advancedSettings">
          <div class="accordion-body">
            <div class="row">
              <div class="col-md-6">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="skipHolidays">
                  <label class="form-check-label" for="skipHolidays">
                    祝日をスキップする
                  </label>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="autoConfirm" checked>
                  <label class="form-check-label" for="autoConfirm">
                    作成した予約を自動確定する
                  </label>
                </div>
              </div>
            </div>
            <div class="row mt-2">
              <div class="col-md-6">
                <label for="maxReservations" class="form-label">最大作成数</label>
                <input type="number" class="form-control" id="maxReservations" value="50" min="1" max="100">
              </div>
              <div class="col-md-6">
                <label for="reminderDays" class="form-label">リマインダー送信日数前</label>
                <input type="number" class="form-control" id="reminderDays" value="1" min="0" max="7">
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 子予約一覧モーダル -->
<div class="modal fade" id="childReservationsModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-list me-2"></i>関連する繰り返し予約
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div id="childReservationsList">
          <div class="text-center py-3">
            <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
            <p class="mt-2 text-muted">読み込み中...</p>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">閉じる</button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  initializeRecurringManagement();
});

function initializeRecurringManagement() {
  const enableRecurringCheck = document.getElementById('enableRecurring');
  const recurringSettings = document.getElementById('recurringSettings');
  const recurringType = document.getElementById('recurringType');
  const recurringUntil = document.getElementById('recurringUntil');
  const createBtn = document.getElementById('createRecurringBtn');
  const cancelBtn = document.getElementById('cancelRecurringBtn');
  const viewChildBtn = document.getElementById('viewChildReservationsBtn');

  // 繰り返し有効化チェックボックス
  if (enableRecurringCheck && recurringSettings) {
    enableRecurringCheck.addEventListener('change', function() {
      if (this.checked) {
        recurringSettings.style.display = 'block';
        updateRecurringPreview();
      } else {
        recurringSettings.style.display = 'none';
      }
    });
  }

  // 設定変更時のプレビュー更新
  [recurringType, recurringUntil].forEach(element => {
    if (element) {
      element.addEventListener('change', updateRecurringPreview);
    }
  });

  // 繰り返しパターンの説明更新
  if (recurringType) {
    recurringType.addEventListener('change', function() {
      const description = document.getElementById('recurringPatternDescription');
      if (description) {
        if (this.value === 'weekly') {
          description.textContent = '毎週同じ曜日の同じ時間に予約を作成します';
        } else {
          description.textContent = '毎月同じ日の同じ時間に予約を作成します';
        }
      }
    });
  }

  // 作成ボタン
  if (createBtn) {
    createBtn.addEventListener('click', function() {
      const reservationId = document.getElementById('reservationId').value;
      const type = recurringType.value;
      const until = recurringUntil.value;
      
      if (!reservationId) {
        alert('予約を先に保存してから繰り返し設定を行ってください');
        return;
      }
      
      if (!until) {
        alert('終了日を選択してください');
        return;
      }
      
      if (new Date(until) <= new Date()) {
        alert('終了日は今日より後の日付を選択してください');
        return;
      }
      
      createRecurringReservations(reservationId, type, until);
    });
  }

  // キャンセルボタン
  if (cancelBtn) {
    cancelBtn.addEventListener('click', function() {
      if (confirm('繰り返し予約を停止しますか？\n※今後作成予定の予約がキャンセルされます。')) {
        cancelRecurringReservations();
      }
    });
  }

  // 子予約表示ボタン
  if (viewChildBtn) {
    viewChildBtn.addEventListener('click', function() {
      showChildReservations();
    });
  }
}

function updateRecurringPreview() {
  const recurringType = document.getElementById('recurringType').value;
  const recurringUntil = document.getElementById('recurringUntil').value;
  const preview = document.getElementById('recurringPreview');
  const estimatedCount = document.getElementById('estimatedCount');
  
  if (!recurringUntil || !preview) return;
  
  const startDate = new Date(document.getElementById('reservationDate')?.value || new Date());
  const endDate = new Date(recurringUntil);
  
  if (endDate <= startDate) {
    preview.innerHTML = '<span class="text-danger">終了日は開始日より後の日付を選択してください</span>';
    estimatedCount.textContent = '0';
    return;
  }
  
  let count = 0;
  let currentDate = new Date(startDate);
  const maxCount = parseInt(document.getElementById('maxReservations')?.value || 50);
  
  while (currentDate <= endDate && count < maxCount) {
    count++;
    if (recurringType === 'weekly') {
      currentDate.setDate(currentDate.getDate() + 7);
    } else {
      currentDate.setMonth(currentDate.getMonth() + 1);
    }
  }
  
  const patternText = recurringType === 'weekly' ? '毎週' : '毎月';
  const weekday = startDate.toLocaleDateString('ja-JP', { weekday: 'long' });
  const time = startDate.toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' });
  
  preview.innerHTML = `
    <div class="d-flex align-items-center">
      <i class="fas fa-calendar-check text-success me-2"></i>
      <span>${patternText}${weekday} ${time} に予約を作成</span>
    </div>
    <div class="mt-1">
      <small class="text-muted">
        ${startDate.toLocaleDateString('ja-JP')} ～ ${endDate.toLocaleDateString('ja-JP')}
      </small>
    </div>
  `;
  
  estimatedCount.textContent = count.toString();
  
  // 警告表示
  if (count >= maxCount) {
    preview.innerHTML += '<div class="text-warning mt-1"><small><i class="fas fa-exclamation-triangle me-1"></i>最大作成数に達しました</small></div>';
  }
}

function createRecurringReservations(reservationId, recurringType, recurringUntil) {
  const createBtn = document.getElementById('createRecurringBtn');
  const originalText = createBtn.innerHTML;
  
  createBtn.disabled = true;
  createBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>作成中...';
  
  // 高度な設定の取得
  const skipHolidays = document.getElementById('skipHolidays')?.checked || false;
  const autoConfirm = document.getElementById('autoConfirm')?.checked || true;
  const maxReservations = parseInt(document.getElementById('maxReservations')?.value || 50);
  const reminderDays = parseInt(document.getElementById('reminderDays')?.value || 1);
  
  fetch(`/admin/reservations/${reservationId}/create_recurring`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
    },
    body: JSON.stringify({
      recurring_type: recurringType,
      recurring_until: recurringUntil,
      options: {
        skip_holidays: skipHolidays,
        auto_confirm: autoConfirm,
        max_reservations: maxReservations,
        reminder_days: reminderDays
      }
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showRecurringMessage(`${data.created_count || '複数の'}予約を作成しました`, 'success');
      
      // UI更新
      updateRecurringDisplay(data);
      
      // カレンダー更新
      if (window.pageCalendar) {
        window.pageCalendar.refetchEvents();
      }
      
    } else {
      showRecurringMessage(data.error || '繰り返し予約の作成に失敗しました', 'error');
    }
  })
  .catch(error => {
    console.error('Recurring reservation creation failed:', error);
    showRecurringMessage('繰り返し予約作成中にエラーが発生しました', 'error');
  })
  .finally(() => {
    createBtn.disabled = false;
    createBtn.innerHTML = originalText;
  });
}

function cancelRecurringReservations() {
  const reservationId = document.getElementById('reservationId').value;
  
  fetch(`/admin/reservations/${reservationId}/cancel_recurring`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showRecurringMessage('繰り返し予約を停止しました', 'success');
      updateRecurringDisplay({ recurring: false });
      
      if (window.pageCalendar) {
        window.pageCalendar.refetchEvents();
      }
    } else {
      showRecurringMessage(data.error || '繰り返し予約の停止に失敗しました', 'error');
    }
  })
  .catch(error => {
    console.error('Cancel recurring failed:', error);
    showRecurringMessage('エラーが発生しました', 'error');
  });
}

function showChildReservations() {
  const reservationId = document.getElementById('reservationId').value;
  const modal = new bootstrap.Modal(document.getElementById('childReservationsModal'));
  const listContainer = document.getElementById('childReservationsList');
  
  modal.show();
  
  fetch(`/admin/reservations/${reservationId}/child_reservations`)
    .then(response => response.json())
    .then(data => {
      if (data.success && data.reservations) {
        displayChildReservations(data.reservations);
      } else {
        listContainer.innerHTML = '<p class="text-muted">関連する予約が見つかりません</p>';
      }
    })
    .catch(error => {
      console.error('Failed to load child reservations:', error);
      listContainer.innerHTML = '<p class="text-danger">読み込みに失敗しました</p>';
    });
}

function displayChildReservations(reservations) {
  const listContainer = document.getElementById('childReservationsList');
  
  if (reservations.length === 0) {
    listContainer.innerHTML = '<p class="text-muted">関連する予約がありません</p>';
    return;
  }
  
  const html = `
    <div class="table-responsive">
      <table class="table table-sm">
        <thead>
          <tr>
            <th>日時</th>
            <th>ステータス</th>
            <th>アクション</th>
          </tr>
        </thead>
        <tbody>
          ${reservations.map(r => `
            <tr>
              <td>${new Date(r.start_time).toLocaleString('ja-JP')}</td>
              <td>
                <span class="badge bg-${getStatusBadgeColor(r.status)}">
                  ${getStatusText(r.status)}
                </span>
              </td>
              <td>
                <button class="btn btn-sm btn-outline-primary" onclick="editReservation(${r.id})">
                  編集
                </button>
              </td>
            </tr>
          `).join('')}
        </tbody>
      </table>
    </div>
  `;
  
  listContainer.innerHTML = html;
}

function updateRecurringDisplay(data) {
  const existingInfo = document.getElementById('existingRecurringInfo');
  const newSection = document.getElementById('newRecurringSection');
  
  if (data.recurring) {
    // 繰り返し予約として表示
    document.getElementById('currentRecurringType').textContent = 
      data.recurring_type === 'weekly' ? '毎週' : '毎月';
    document.getElementById('currentRecurringUntil').textContent = 
      data.recurring_until || '-';
    document.getElementById('childReservationsCount').textContent = 
      data.child_count || 0;
    
    existingInfo.style.display = 'block';
    newSection.style.display = 'none';
  } else {
    // 通常予約として表示
    existingInfo.style.display = 'none';
    newSection.style.display = 'block';
  }
}

function getStatusBadgeColor(status) {
  const colors = {
    'confirmed': 'success',
    'tentative': 'warning',
    'cancelled': 'danger',
    'completed': 'secondary',
    'no_show': 'warning'
  };
  return colors[status] || 'primary';
}

function getStatusText(status) {
  const texts = {
    'confirmed': '確定',
    'tentative': '仮予約',
    'cancelled': 'キャンセル',
    'completed': '完了',
    'no_show': '無断キャンセル'
  };
  return texts[status] || status;
}

function showRecurringMessage(message, type) {
  const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
  const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
  
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
  alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
  alertDiv.innerHTML = `
    <i class="fas ${iconClass} me-2"></i>${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  
  document.body.appendChild(alertDiv);
  
  setTimeout(() => {
    if (alertDiv.parentNode) {
      alertDiv.parentNode.removeChild(alertDiv);
    }
  }, 5000);
}

// グローバル関数として公開
window.initializeRecurringForm = function(reservationData) {
  if (reservationData?.recurring) {
    updateRecurringDisplay(reservationData);
  }
};

window.editReservation = function(reservationId) {
  // 子予約編集用の関数
  fetch(`/admin/reservations/${reservationId}.json`)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // モーダルを閉じて、新しい予約を開く
        const childModal = bootstrap.Modal.getInstance(document.getElementById('childReservationsModal'));
        if (childModal) childModal.hide();
        
        setTimeout(() => {
          if (window.openReservationModal) {
            window.openReservationModal(data.reservation);
          }
        }, 300);
      }
    })
    .catch(error => {
      console.error('Failed to load reservation:', error);
      alert('予約情報の読み込みに失敗しました');
    });
};
</script>