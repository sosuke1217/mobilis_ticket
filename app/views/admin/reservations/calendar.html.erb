<!-- app/views/admin/reservations/calendar.html.erb の修正版 -->
<div class="container my-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h2>予約カレンダー</h2>
    <div class="btn-group">
      <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
        表示オプション
      </button>
      <ul class="dropdown-menu">
        <li><a class="dropdown-item" href="#" id="showAllReservations">全ての予約</a></li>
        <li><a class="dropdown-item" href="#" id="showConfirmedOnly">確定予約のみ</a></li>
        <li><a class="dropdown-item" href="#" id="showTentativeOnly">仮予約のみ</a></li>
        <li><hr class="dropdown-divider"></li>
        <li><a class="dropdown-item" href="#" id="showRecurringOnly">繰り返し予約のみ</a></li>
      </ul>
    </div>
  </div>

  <!-- フラッシュメッセージエリア -->
  <div id="flash"></div>

  <!-- ステータス凡例 -->
  <div class="card mb-3">
    <div class="card-body py-2">
      <div class="row align-items-center">
        <div class="col-auto">
          <strong>ステータス凡例：</strong>
        </div>
        <div class="col">
          <span class="badge bg-success me-2">確定</span>
          <span class="badge bg-warning text-dark me-2">仮予約</span>
          <span class="badge bg-danger me-2">キャンセル</span>
          <span class="badge bg-secondary me-2">完了</span>
          <span class="badge bg-warning me-2">無断キャンセル</span>
        </div>
      </div>
    </div>
  </div>
  
  <div class="table-responsive">
    <div id="calendar" style="width: 100%; max-width: 100%; margin: auto;"></div>
  </div>
</div>

<!-- 予約詳細・編集モーダル（修正版） -->
<div class="modal fade" id="reservationModal" tabindex="-1" aria-labelledby="reservationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reservationModalLabel">予約管理</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="閉じる"></button>
      </div>
      <div class="modal-body">
        <form id="reservationForm">
          <!-- 隠しフィールド -->
          <input type="hidden" id="reservationId">
          
          <!-- 基本情報セクション -->
          <div class="card mb-3">
            <div class="card-header">
              <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0">予約者選択</h6>
                <div class="form-check form-switch">
                  <input class="form-check-input" type="checkbox" id="newUserToggle">
                  <label class="form-check-label" for="newUserToggle">
                    新規ユーザーを作成
                  </label>
                </div>
              </div>
            </div>
            <div class="card-body">
              <!-- 既存ユーザー選択 -->
              <div id="existingUserSection">
                <label for="reservationUserId" class="form-label">既存ユーザーを選択</label>
                <select class="form-control" id="reservationUserId">
                  <option value="">ユーザーを選択してください</option>
                </select>
              </div>

              <!-- 新規ユーザー作成フォーム -->
              <div id="newUserSection" style="display: none;">
                <div class="row">
                  <div class="col-md-6">
                    <label for="newUserName" class="form-label">氏名 <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="newUserName" placeholder="例: 山田太郎">
                  </div>
                  <div class="col-md-6">
                    <label for="newUserPhone" class="form-label">電話番号</label>
                    <input type="tel" class="form-control" id="newUserPhone" placeholder="例: 090-1234-5678">
                  </div>
                </div>
                <div class="row mt-2">
                  <div class="col-md-6">
                    <label for="newUserEmail" class="form-label">メールアドレス</label>
                    <input type="email" class="form-control" id="newUserEmail" placeholder="例: example@email.com">
                  </div>
                  <div class="col-md-6">
                    <label for="newUserBirthDate" class="form-label">生年月日</label>
                    <input type="date" class="form-control" id="newUserBirthDate">
                  </div>
                </div>
                <div class="mt-2">
                  <label for="newUserAddress" class="form-label">住所</label>
                  <input type="text" class="form-control" id="newUserAddress" placeholder="例: 東京都渋谷区...">
                </div>
                <div class="mt-2">
                  <label for="newUserMemo" class="form-label">管理者メモ</label>
                  <textarea class="form-control" id="newUserMemo" rows="2" placeholder="初回来店、アレルギー情報など"></textarea>
                </div>
              </div>
            </div>
          </div>

          <!-- 予約詳細セクション -->
          <div class="card mb-3">
            <div class="card-header">
              <h6 class="mb-0">予約詳細</h6>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <label for="reservationDate" class="form-label">予約日</label>
                  <input type="date" class="form-control" id="reservationDate" required>
                </div>
                <div class="col-md-6">
                  <label for="reservationTime" class="form-label">開始時間</label>
                  <select class="form-control" id="reservationTime" required>
                    <option value="">時間を選択してください</option>
                  </select>
                </div>
              </div>

              <div class="row mt-2">
                <div class="col-md-6">
                  <label for="reservationCourse" class="form-label">コース</label>
                  <select class="form-control" id="reservationCourse">
                    <option value="40分">40分コース</option>
                    <option value="60分" selected>60分コース</option>
                    <option value="80分">80分コース</option>
                  </select>
                </div>
                <div class="col-md-6">
                  <label class="form-label">終了予定時間</label>
                  <div id="endTimeDisplay" class="form-control-plaintext text-muted">時間とコースを選択してください</div>
                </div>
              </div>

              <div class="row mt-2">
                <div class="col-md-6">
                  <label for="reservationStatus" class="form-label">ステータス</label>
                  <select class="form-control" id="reservationStatus">
                    <option value="confirmed">確定</option>
                    <option value="tentative">仮予約</option>
                    <option value="cancelled">キャンセル</option>
                    <option value="completed">完了</option>
                    <option value="no_show">無断キャンセル</option>
                  </select>
                </div>
                <div class="col-md-6">
                  <!-- 空きスペース -->
                </div>
              </div>

              <div class="mt-2">
                <label for="reservationNote" class="form-label">備考</label>
                <textarea class="form-control" id="reservationNote" rows="2" placeholder="特別な要望や注意事項など"></textarea>
              </div>

              <!-- キャンセル理由入力エリア -->
              <div id="cancellationReasonArea" style="display: none;" class="mt-3">
                <label for="cancellationReason" class="form-label">キャンセル理由 <span class="text-danger">*</span></label>
                <textarea class="form-control" id="cancellationReason" rows="3" placeholder="キャンセルの理由を入力してください"></textarea>
              </div>
            </div>
          </div>
        </form>

        <!-- アクションボタンエリア -->
        <div class="d-flex justify-content-between mt-4">
          <div>
            <button type="button" id="deleteReservationBtn" class="btn btn-danger d-none">
              <i class="fas fa-trash me-1"></i>削除
            </button>
            <button type="button" id="cancelReservationBtn" class="btn btn-warning d-none">
              <i class="fas fa-times me-1"></i>キャンセル
            </button>
          </div>
          <div>
            <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">閉じる</button>
            <button type="button" id="saveReservationBtn" class="btn btn-primary">
              <i class="fas fa-save me-1"></i>保存
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- app/views/admin/reservations/calendar.html.erb の修正版（scriptセクションのみ） -->

<script>
// カレンダー機能のJavaScript（完全修正版）
(function() {
  'use strict';
  
  let pageCalendar = null;
  let currentUsers = [];
  
  // ===== ヘルパー関数群 =====
  
  /**
   * 時間を10分刻みに調整する関数
   */
  function adjustTimeToTenMinutes(timeString) {
    if (!timeString) return "10:00";
    
    try {
      const [hours, minutes] = timeString.split(':').map(Number);
      
      // 営業時間チェック（10:00-19:50）
      if (hours < 10) {
        return "10:00";
      } else if (hours > 19 || (hours === 19 && minutes > 50)) {
        return "19:50";
      }
      
      // 10分刻みに調整
      const adjustedMinutes = Math.round(minutes / 10) * 10;
      
      // 60分を超えた場合の処理
      if (adjustedMinutes >= 60) {
        const newHours = hours + 1;
        if (newHours > 19) {
          return "19:50";
        }
        return `${newHours.toString().padStart(2, '0')}:00`;
      }
      
      return `${hours.toString().padStart(2, '0')}:${adjustedMinutes.toString().padStart(2, '0')}`;
    } catch (error) {
      console.error('Time adjustment error:', error);
      return "10:00";
    }
  }
  
  /**
   * コースから分数を取得する関数
   */
  function getDurationFromCourse(course) {
    switch(course) {
      case '40分': return 40;
      case '60分': return 60;
      case '80分': return 80;
      default: return 60;
    }
  }
  
  // ===== メイン機能 =====
  
  // 初期化関数
  function initializeCalendar() {
    console.log('📅 Calendar initialization started');
    
    const calendarEl = document.getElementById('calendar');
    if (!calendarEl || typeof FullCalendar === 'undefined') {
      console.log('Calendar element or FullCalendar not found, retrying...');
      setTimeout(initializeCalendar, 500);
      return;
    }
    
    if (pageCalendar) {
      pageCalendar.destroy();
      pageCalendar = null;
    }
    
    pageCalendar = new FullCalendar.Calendar(calendarEl, {
      initialView: window.innerWidth < 768 ? "timeGridDay" : "timeGridWeek",
      locale: 'ja',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'timeGridWeek,timeGridDay'
      },
      slotMinTime: "10:00:00",
      slotMaxTime: "20:30:00",
      slotDuration: "00:10:00",
      scrollTime: "10:00:00",
      height: "auto",
      
      // ドラッグ&ドロップを有効化
      editable: true,
      droppable: true,
      eventStartEditable: true,
      eventDurationEditable: true,
      snapDuration: '00:10:00',
      
      events: {
        url: "/admin/reservations.json",
        failure: function() {
          console.error("Failed to fetch events");
        }
      },
      
      // イベントの色をステータスに応じて変更
      eventDidMount: function(info) {
        const status = info.event.extendedProps.status;
        let backgroundColor, borderColor;
        
        switch(status) {
          case 'confirmed':
            backgroundColor = '#28a745';
            borderColor = '#1e7e34';
            break;
          case 'tentative':
            backgroundColor = '#ffc107';
            borderColor = '#e0a800';
            info.el.style.color = '#000';
            break;
          case 'cancelled':
            backgroundColor = '#dc3545';
            borderColor = '#c82333';
            info.el.style.textDecoration = 'line-through';
            break;
          case 'completed':
            backgroundColor = '#6c757d';
            borderColor = '#5a6268';
            break;
          case 'no_show':
            backgroundColor = '#fd7e14';
            borderColor = '#e55a00';
            break;
          default:
            backgroundColor = '#007bff';
            borderColor = '#0056b3';
        }
        
        info.el.style.backgroundColor = backgroundColor;
        info.el.style.borderColor = borderColor;
      },
      
      dateClick: function(info) {
        console.log('📅 Date clicked:', info.dateStr);
        openReservationModal(null, info.dateStr);
      },
      
      eventClick: function(info) {
        console.log('📅 Event clicked:', info.event.title);
        openReservationModal(info.event);
      },
      
      eventDrop: function(info) {
        updateReservationTime(info.event, info.revert);
      },
      
      eventResize: function(info) {
        updateReservationTime(info.event, info.revert);
      }
    });
    
    pageCalendar.render();
    window.pageCalendar = pageCalendar;
    console.log('✅ Calendar initialized successfully');
  }
  
  // ユーザー一覧を取得
  function loadUsers() {
    fetch('/admin/users.json')
      .then(response => response.json())
      .then(users => {
        currentUsers = users;
        updateUserSelect();
      })
      .catch(error => {
        console.error('ユーザー取得エラー:', error);
      });
  }
  
  // ユーザー選択セレクトボックスを更新
  function updateUserSelect() {
    const userSelect = document.getElementById('reservationUserId');
    if (!userSelect) return;
    
    // 既存のオプションをクリア（デフォルトオプションは残す）
    const defaultOption = userSelect.querySelector('option[value=""]');
    userSelect.innerHTML = '';
    if (defaultOption) {
      userSelect.appendChild(defaultOption);
    }
    
    // ユーザーオプションを追加
    currentUsers.forEach(user => {
      const option = document.createElement('option');
      option.value = user.id;
      option.textContent = user.name || `ID: ${user.id}`;
      userSelect.appendChild(option);
    });
  }
  
  // 予約時間を更新する関数
  function updateReservationTime(event, revertFunc) {
    const reservationId = event.id;
    const newStartTime = event.start.toISOString();
    const newEndTime = event.end ? event.end.toISOString() : null;
    
    if (!confirm(`予約「${event.title}」の時間を変更しますか？`)) {
      revertFunc();
      return;
    }
    
    fetch(`/admin/reservations/${reservationId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || '',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        reservation: {
          start_time: newStartTime,
          end_time: newEndTime
        }
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success !== false) {
        showMessage(`予約「${event.title}」の時間を変更しました`, 'success');
      } else {
        revertFunc();
        showMessage(data.errors ? data.errors.join(', ') : '時間の変更に失敗しました', 'danger');
      }
    })
    .catch(error => {
      console.error('Update failed:', error);
      revertFunc();
      showMessage(`時間の変更に失敗しました: ${error.message}`, 'danger');
    });
  }
  
  // モーダルを開く関数
  function openReservationModal(event = null, dateStr = null) {
    console.log('🔧 Opening modal:', { event, dateStr });
    
    const modal = document.getElementById('reservationModal');
    if (!modal) {
      console.error('Modal not found');
      return;
    }
    
    // フォームをリセット
    resetForm();
    
    if (event) {
      // 既存予約の編集
      console.log('✏️ Editing existing reservation');
      populateFormWithEvent(event);
    } else if (dateStr) {
      // 新規予約
      console.log('➕ Creating new reservation');
      populateFormWithDate(dateStr);
    }
    
    // モーダルを表示
    try {
      new bootstrap.Modal(modal).show();
    } catch (error) {
      console.error('Error showing modal:', error);
    }
  }
  
  // フォームをリセット
  function resetForm() {
    console.log('🔄 Resetting form');
    
    const form = document.getElementById('reservationForm');
    if (form) form.reset();
    
    document.getElementById('reservationId').value = '';
    
    const deleteBtn = document.getElementById('deleteReservationBtn');
    const cancelBtn = document.getElementById('cancelReservationBtn');
    
    if (deleteBtn) {
      deleteBtn.classList.add('d-none');
      deleteBtn.removeAttribute('data-reservation-id');
      deleteBtn.disabled = false;
      deleteBtn.innerHTML = '<i class="fas fa-trash me-1"></i>削除';
    }
    
    if (cancelBtn) {
      cancelBtn.classList.add('d-none');
      cancelBtn.removeAttribute('data-reservation-id');
      cancelBtn.disabled = false;
      cancelBtn.innerHTML = '<i class="fas fa-times me-1"></i>キャンセル';
    }
    
    document.getElementById('cancellationReasonArea').style.display = 'none';
    document.getElementById('newUserSection').style.display = 'none';
    document.getElementById('existingUserSection').style.display = 'block';
    document.getElementById('newUserToggle').checked = false;
  }
  
  // 既存イベントでフォームを埋める
  function populateFormWithEvent(event) {
    console.log('📝 Populating form with event:', event);
    
    document.getElementById('reservationId').value = event.id || '';
    document.getElementById('reservationUserId').value = event.extendedProps?.user_id || '';
    
    // 日付と時間を設定
    if (event.start) {
      const startDate = new Date(event.start);
      document.getElementById('reservationDate').value = startDate.toISOString().split('T')[0];
      
      // 時間を10分刻みに丸めてセレクトボックスに設定
      const hours = startDate.getHours();
      const minutes = Math.round(startDate.getMinutes() / 10) * 10;
      
      // 営業時間内の時間に調整
      let timeValue;
      if (hours >= 10 && hours < 19) {
        timeValue = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
      } else if (hours === 19 && minutes <= 50) {
        timeValue = `19:${minutes.toString().padStart(2, '0')}`;
      } else {
        // 営業時間外の場合は最も近い営業時間内の時間に設定
        if (hours < 10) {
          timeValue = '10:00';
        } else {
          timeValue = '19:50';
        }
      }
      
      document.getElementById('reservationTime').value = timeValue;
    }
    
    document.getElementById('reservationCourse').value = event.extendedProps?.description || event.extendedProps?.course || '60分';
    document.getElementById('reservationStatus').value = event.extendedProps?.status || 'confirmed';
    document.getElementById('reservationNote').value = event.extendedProps?.note || '';
    
    // 終了時間表示を更新
    updateEndTimeDisplay();
    
    // ボタンの表示制御
    const deleteBtn = document.getElementById('deleteReservationBtn');
    const cancelBtn = document.getElementById('cancelReservationBtn');
    
    if (deleteBtn) {
      deleteBtn.classList.remove('d-none');
      deleteBtn.setAttribute('data-reservation-id', event.id);
    }
    
    if (cancelBtn && event.extendedProps?.status !== 'cancelled') {
      cancelBtn.classList.remove('d-none');
      cancelBtn.setAttribute('data-reservation-id', event.id);
    }
    
    console.log('✅ Form populated successfully, reservation ID:', event.id);
  }
  
  // 終了時間表示を更新する関数
  function updateEndTimeDisplay() {
    const courseSelect = document.getElementById('reservationCourse');
    const dateInput = document.getElementById('reservationDate');
    const timeInput = document.getElementById('reservationTime');
    
    const course = courseSelect?.value;
    const date = dateInput?.value;
    const time = timeInput?.value;
    
    if (course && date && time) {
      const duration = getDurationFromCourse(course);
      const adjustedTime = adjustTimeToTenMinutes(time);
      
      // 日本時間で計算
      const startDateTime = new Date(`${date}T${adjustedTime}:00+09:00`);
      const endDateTime = new Date(startDateTime.getTime() + (duration * 60000));
      
      const endTimeDisplay = document.getElementById('endTimeDisplay');
      if (endTimeDisplay) {
        // 日本時間での表示
        const endHours = endDateTime.getHours();
        const endMinutes = endDateTime.getMinutes();
        endTimeDisplay.textContent = `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')} 終了予定`;
      }
      
      console.log('🕐 End time display update:', {
        course,
        duration,
        adjustedTime,
        startDateTime: startDateTime.toString(),
        endDateTime: endDateTime.toString()
      });
    }
  }
  
  // 新規予約で日付を設定
  function populateFormWithDate(dateStr) {
    try {
      const date = new Date(dateStr);
      document.getElementById('reservationDate').value = date.toISOString().split('T')[0];
      
      // デフォルトの時間として、クリックした時間を10分刻みに丸める
      const hours = date.getHours();
      const minutes = Math.round(date.getMinutes() / 10) * 10;
      
      // 営業時間内かチェック（10:00-19:50）
      let timeValue;
      if (hours >= 10 && hours < 19) {
        timeValue = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
      } else if (hours === 19 && minutes <= 50) {
        timeValue = `19:${minutes.toString().padStart(2, '0')}`;
      } else {
        // 営業時間外の場合はデフォルトで10:00を設定
        timeValue = '10:00';
      }
      
      document.getElementById('reservationTime').value = timeValue;
      
      // 終了時間表示を更新
      updateEndTimeDisplay();
    } catch (error) {
      console.error('日付解析エラー:', error);
      // フォールバック: デフォルト時間を設定
      document.getElementById('reservationTime').value = '10:00';
      updateEndTimeDisplay();
    }
  }
  
  // 予約を保存
  function saveReservation() {
    console.log('💾 Saving reservation...');
    
    const reservationId = document.getElementById('reservationId').value;
    const isNewUser = document.getElementById('newUserToggle').checked;
    
    // バリデーション
    if (!validateReservationForm()) {
      return;
    }
    
    let data;
    
    if (isNewUser) {
      // 新規ユーザーと予約を作成
      const newUserData = getNewUserData();
      const reservationData = getReservationData();
      
      console.log('📝 New user data:', newUserData);
      console.log('📝 Reservation data:', reservationData);
      
      data = {
        new_user: newUserData,
        reservation: reservationData
      };
    } else {
      // 既存ユーザーで予約を作成/更新
      data = {
        reservation: getReservationData()
      };
      
      console.log('📝 Reservation data:', data.reservation);
    }
    
    const url = reservationId ? `/admin/reservations/${reservationId}` : '/admin/reservations';
    const method = reservationId ? 'PATCH' : 'POST';
    
    console.log(`🔄 ${method} request to ${url}`);
    console.log('📤 Request data:', data);
    
    // ボタンを無効化
    const saveBtn = document.getElementById('saveReservationBtn');
    if (saveBtn) {
      saveBtn.disabled = true;
      saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>保存中...';
    }
    
    fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || '',
        'Accept': 'application/json'
      },
      body: JSON.stringify(data)
    })
    .then(response => {
      console.log('🔄 Response status:', response.status);
      return response.json().then(data => ({ status: response.status, data }));
    })
    .then(({ status, data }) => {
      console.log('📥 Response data:', data);
      
      if (status === 200 || status === 201 || data.success !== false) {
        showMessage(reservationId ? '予約を更新しました' : '予約を作成しました', 'success');
        closeModal();
        refreshCalendar();
      } else {
        console.error('❌ Validation errors:', data.errors);
        let errorMessage = '保存に失敗しました';
        if (data.errors && Array.isArray(data.errors)) {
          errorMessage += ':\n' + data.errors.join('\n');
        } else if (data.error) {
          errorMessage += ': ' + data.error;
        }
        showMessage(errorMessage, 'danger');
      }
    })
    .catch(error => {
      console.error('❌ Save failed:', error);
      showMessage('保存中にエラーが発生しました: ' + error.message, 'danger');
    })
    .finally(() => {
      // ボタンを元に戻す
      if (saveBtn) {
        saveBtn.disabled = false;
        saveBtn.innerHTML = '<i class="fas fa-save me-1"></i>保存';
      }
    });
  }
  
  // フォームバリデーション
  function validateReservationForm() {
    const isNewUser = document.getElementById('newUserToggle').checked;
    const errors = [];
    
    // 新規ユーザーの場合
    if (isNewUser) {
      const newUserName = document.getElementById('newUserName').value.trim();
      if (!newUserName) {
        errors.push('ユーザー名を入力してください');
      }
    } else {
      // 既存ユーザーの場合
      const userId = document.getElementById('reservationUserId').value;
      if (!userId) {
        errors.push('ユーザーを選択してください');
      }
    }
    
    // 予約詳細
    const date = document.getElementById('reservationDate').value;
    const time = document.getElementById('reservationTime').value;
    const course = document.getElementById('reservationCourse').value;
    
    if (!date) {
      errors.push('予約日を選択してください');
    }
    
    if (!time) {
      errors.push('開始時間を選択してください');
    }
    
    if (!course) {
      errors.push('コースを選択してください');
    }
    
    // 時間が営業時間内かチェック
    if (time) {
      const [hours, minutes] = time.split(':').map(Number);
      if (hours < 10 || (hours === 20 && minutes > 0) || hours > 20) {
        errors.push('営業時間内（10:00-20:00）の時間を選択してください');
      }
    }
    
    // キャンセル理由
    const status = document.getElementById('reservationStatus').value;
    if (status === 'cancelled') {
      const reason = document.getElementById('cancellationReason').value.trim();
      if (!reason) {
        errors.push('キャンセル理由を入力してください');
      }
    }
    
    if (errors.length > 0) {
      showMessage('入力エラー:\n' + errors.join('\n'), 'danger');
      return false;
    }
    
    return true;
  }
  
  // 新規ユーザーデータを取得
  function getNewUserData() {
    return {
      name: document.getElementById('newUserName').value,
      phone_number: document.getElementById('newUserPhone').value,
      email: document.getElementById('newUserEmail').value,
      birth_date: document.getElementById('newUserBirthDate').value || null,
      address: document.getElementById('newUserAddress').value,
      admin_memo: document.getElementById('newUserMemo').value
    };
  }
  
  // 予約データを取得
  function getReservationData() {
    const date = document.getElementById('reservationDate').value;
    const time = document.getElementById('reservationTime').value;
    const course = document.getElementById('reservationCourse').value;
    
    // 既に10分刻みの時間が選択されているので調整不要
    const startDateTime = new Date(`${date}T${time}:00+09:00`);
    
    // 終了時間を計算
    const duration = getDurationFromCourse(course);
    const endDateTime = new Date(startDateTime.getTime() + (duration * 60000));
    
    // ISO文字列として送信（サーバー側でタイムゾーン処理）
    const startTime = startDateTime.toISOString();
    const endTime = endDateTime.toISOString();
    
    console.log('🕐 Start time calculation:', {
      date,
      time,
      course,
      duration,
      startDateTime: startDateTime.toString(),
      endDateTime: endDateTime.toString(),
      startTime,
      endTime
    });
    
    const data = {
      user_id: document.getElementById('reservationUserId').value || null,
      start_time: startTime,
      end_time: endTime,
      course: course,
      status: document.getElementById('reservationStatus').value,
      note: document.getElementById('reservationNote').value
    };
    
    // キャンセル理由が必要な場合
    if (data.status === 'cancelled') {
      data.cancellation_reason = document.getElementById('cancellationReason').value;
    }
    
    console.log('📝 Final reservation data:', data);
    
    return data;
  }
  
  // 10分刻みの時間オプションを生成
  function generateTimeOptions() {
    const timeSelect = document.getElementById('reservationTime');
    if (!timeSelect) return;
    
    // 既存のオプションをクリア（デフォルトオプション以外）
    const defaultOption = timeSelect.querySelector('option[value=""]');
    timeSelect.innerHTML = '';
    if (defaultOption) {
      timeSelect.appendChild(defaultOption);
    }
    
    // 10:00から19:50まで10分刻みで生成（20:00開始は60分コースだと21:00終了になるため除外）
    for (let hour = 10; hour < 20; hour++) {
      for (let minute = 0; minute < 60; minute += 10) {
        // 19:50以降は除外（最長80分コースを考慮）
        if (hour === 19 && minute > 50) break;
        
        const timeValue = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        const option = document.createElement('option');
        option.value = timeValue;
        option.textContent = timeValue;
        timeSelect.appendChild(option);
      }
    }
    
    console.log('⏰ Generated time options for 10-minute intervals (10:00-19:50)');
  }
  
  // 予約を削除
  function deleteReservation() {
    console.log('🗑️ Delete reservation called');
    
    // 複数の方法でIDを取得
    let reservationId = document.getElementById('reservationId').value;
    
    if (!reservationId) {
      const deleteBtn = document.getElementById('deleteReservationBtn');
      reservationId = deleteBtn?.getAttribute('data-reservation-id');
    }
    
    console.log('🔍 Reservation ID:', reservationId);
    
    if (!reservationId) {
      console.error('❌ No reservation ID found');
      showMessage('予約IDが見つかりません', 'danger');
      return;
    }
    
    if (!confirm('この予約を削除しますか？')) {
      return;
    }
    
    console.log(`🗑️ Deleting reservation ${reservationId}`);
    
    // ボタンを無効化
    const deleteBtn = document.getElementById('deleteReservationBtn');
    if (deleteBtn) {
      deleteBtn.disabled = true;
      deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>削除中...';
    }
    
    fetch(`/admin/reservations/${reservationId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || '',
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      console.log('🔄 Delete response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('✅ Delete response:', data);
      if (data.success !== false) {
        showMessage('予約を削除しました', 'success');
        closeModal();
        refreshCalendar();
      } else {
        showMessage(data.error || '削除に失敗しました', 'danger');
      }
    })
    .catch(error => {
      console.error('❌ Delete failed:', error);
      showMessage(`削除中にエラーが発生しました: ${error.message}`, 'danger');
    })
    .finally(() => {
      // ボタンを元に戻す
      if (deleteBtn) {
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = '<i class="fas fa-trash me-1"></i>削除';
      }
    });
  }
  
  // 予約をキャンセル
  function cancelReservation() {
    console.log('❌ Cancel reservation called');
    
    // 複数の方法でIDを取得
    let reservationId = document.getElementById('reservationId').value;
    
    if (!reservationId) {
      const cancelBtn = document.getElementById('cancelReservationBtn');
      reservationId = cancelBtn?.getAttribute('data-reservation-id');
    }
    
    console.log('🔍 Reservation ID for cancel:', reservationId);
    
    if (!reservationId) {
      console.error('❌ No reservation ID found for cancel');
      showMessage('予約IDが見つかりません', 'danger');
      return;
    }
    
    const reason = prompt('キャンセル理由を入力してください:');
    if (!reason || reason.trim() === '') {
      return;
    }
    
    console.log(`❌ Cancelling reservation ${reservationId} with reason: ${reason}`);
    
    // ボタンを無効化
    const cancelBtn = document.getElementById('cancelReservationBtn');
    if (cancelBtn) {
      cancelBtn.disabled = true;
      cancelBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>キャンセル中...';
    }
    
    fetch(`/admin/reservations/${reservationId}/cancel`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || '',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        cancellation_reason: reason.trim()
      })
    })
    .then(response => {
      console.log('🔄 Cancel response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('✅ Cancel response:', data);
      if (data.success) {
        showMessage(data.message || '予約をキャンセルしました', 'success');
        closeModal();
        refreshCalendar();
      } else {
        showMessage(data.error || 'キャンセルに失敗しました', 'danger');
      }
    })
    .catch(error => {
      console.error('❌ Cancel failed:', error);
      showMessage(`キャンセル中にエラーが発生しました: ${error.message}`, 'danger');
    })
    .finally(() => {
      // ボタンを元に戻す
      if (cancelBtn) {
        cancelBtn.disabled = false;
        cancelBtn.innerHTML = '<i class="fas fa-times me-1"></i>キャンセル';
      }
    });
  }
  
  // カレンダーを更新
  function refreshCalendar() {
    if (pageCalendar) {
      pageCalendar.refetchEvents();
    }
  }
  
  // モーダルを閉じる
  function closeModal() {
    const modal = bootstrap.Modal.getInstance(document.getElementById('reservationModal'));
    if (modal) modal.hide();
  }
  
  // メッセージを表示
  function showMessage(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    const flashContainer = document.getElementById('flash');
    flashContainer.innerHTML = '';
    flashContainer.appendChild(alertDiv);
    
    setTimeout(() => {
      if (alertDiv.parentNode) {
        alertDiv.parentNode.removeChild(alertDiv);
      }
    }, 5000);
  }
  
  // イベントリスナーを設定
  function setupEventListeners() {
    // 新規ユーザートグル
    const newUserToggle = document.getElementById('newUserToggle');
    if (newUserToggle) {
      newUserToggle.addEventListener('change', function() {
        const newUserSection = document.getElementById('newUserSection');
        const existingUserSection = document.getElementById('existingUserSection');
        
        if (this.checked) {
          newUserSection.style.display = 'block';
          existingUserSection.style.display = 'none';
        } else {
          newUserSection.style.display = 'none';
          existingUserSection.style.display = 'block';
        }
      });
    }
    
    // ステータス変更時のキャンセル理由表示
    const statusSelect = document.getElementById('reservationStatus');
    if (statusSelect) {
      statusSelect.addEventListener('change', function() {
        const cancellationArea = document.getElementById('cancellationReasonArea');
        if (this.value === 'cancelled') {
          cancellationArea.style.display = 'block';
        } else {
          cancellationArea.style.display = 'none';
        }
      });
    }
    
    // コース、日付、時間変更時の終了時間自動更新
    const courseSelect = document.getElementById('reservationCourse');
    const dateInput = document.getElementById('reservationDate');
    const timeInput = document.getElementById('reservationTime');
    
    if (courseSelect) {
      courseSelect.addEventListener('change', updateEndTimeDisplay);
    }
    
    if (dateInput) {
      dateInput.addEventListener('change', updateEndTimeDisplay);
    }
    
    if (timeInput) {
      timeInput.addEventListener('change', updateEndTimeDisplay);
    }
    
    // 保存ボタン
    const saveBtn = document.getElementById('saveReservationBtn');
    if (saveBtn) {
      saveBtn.addEventListener('click', saveReservation);
    }
    
    // 削除ボタン
    const deleteBtn = document.getElementById('deleteReservationBtn');
    if (deleteBtn) {
      deleteBtn.addEventListener('click', deleteReservation);
    }
    
    // キャンセルボタン
    const cancelBtn = document.getElementById('cancelReservationBtn');
    if (cancelBtn) {
      cancelBtn.addEventListener('click', cancelReservation);
    }
  }
  
  // 初期化
  function initialize() {
    console.log('🚀 Initializing calendar application');
    
    // 関数の存在確認
    console.log('📋 Function checks:', {
      generateTimeOptions: typeof generateTimeOptions,
      updateEndTimeDisplay: typeof updateEndTimeDisplay,
      getDurationFromCourse: typeof getDurationFromCourse,
      adjustTimeToTenMinutes: typeof adjustTimeToTenMinutes,
      openReservationModal: typeof openReservationModal
    });
    
    initializeCalendar();
    loadUsers();
    generateTimeOptions(); // 時間オプションを生成
    setupEventListeners();
  }
  
  // グローバル関数として公開
  window.openReservationModal = openReservationModal;
  window.refreshCalendar = refreshCalendar;
  
  // イベントリスナー
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }
  
  document.addEventListener('turbo:load', initialize);
  
  document.addEventListener('turbo:before-cache', function() {
    if (pageCalendar) {
      pageCalendar.destroy();
      pageCalendar = null;
    }
  });
  
})();
</script>