<% content_for :title, "予約カレンダー - Mobilis" %>

<div class="calendar-container">
  <div class="calendar-header">
<div class="container-fluid">
      <div class="calendar-toolbar">
        <div class="calendar-nav">
          <button id="prevBtn" class="btn btn-outline-primary">
            <i class="fas fa-chevron-left"></i> 前週
          </button>
          <button id="todayBtn" class="btn btn-primary">
            <i class="fas fa-calendar-day"></i> 今日
          </button>
          <button id="nextBtn" class="btn btn-outline-primary">
            次週 <i class="fas fa-chevron-right"></i>
          </button>
        </div>
        
        <div class="calendar-title">
          <i class="fas fa-calendar-alt me-2"></i>予約カレンダー
      </div>
      
        <div class="calendar-actions">
          <div class="d-flex flex-column gap-2">
            <a href="<%= admin_reservations_path %>" class="btn btn-primary btn-lg" style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); border: none; box-shadow: 0 4px 8px rgba(0,0,0,0.15); font-weight: 600;">
              <i class="fas fa-list me-2"></i>📋 今日の予約一覧
            </a>
            <button id="newReservationBtn" class="btn btn-success">
              <i class="fas fa-plus me-1"></i>新規予約
            </button>
            <button class="btn btn-outline-danger btn-sm" onclick="openCancelledHistoryModal()">
              <i class="fas fa-times-circle me-1"></i>キャンセル履歴
            </button>
          </div>
        </div>
    </div>
    </div>
  </div>
  
  <div class="container-fluid">
    <div id="calendar"></div>
  </div>
</div>

<!-- 予約モーダル -->
<div class="modal fade" id="reservationModal" tabindex="-1" aria-labelledby="reservationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reservationModalLabel">
          <i class="fas fa-calendar-plus me-2"></i>予約作成・編集
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="reservationForm">
          <!-- 隠しフィールド -->
          <input type="hidden" id="currentReservationId" value="">
          <input type="hidden" id="selectedUserId" value="">
          
          <!-- 顧客選択・検索 -->
          <div class="row mb-3">
            <div class="col-12">
              <label for="customerSearch" class="form-label">顧客検索・選択 *</label>
              <div class="position-relative">
                                 <input type="text" class="form-control" id="customerSearch" 
                        placeholder="顧客名、フリガナ、電話番号で検索...">
                <div id="customerSearchResults" class="position-absolute w-100 bg-white border rounded shadow-sm" 
                     style="z-index: 1050; max-height: 200px; overflow-y: auto; display: none;">
                  <!-- 検索結果がここに表示 -->
            </div>
              </div>
          </div>
        </div>
        
          <!-- 選択された顧客情報の表示 -->
          <div id="selectedCustomerInfo" class="row mb-3" style="display: none;">
            <div class="col-12">
              <div class="alert alert-info">
                <div class="d-flex justify-content-between align-items-start">
                  <div>
                    <h6 class="alert-heading mb-1">
                      <i class="fas fa-user me-1"></i>
                      <span id="selectedCustomerName"></span>
                    </h6>
                    <small class="text-muted">
                      <span id="selectedCustomerDetails"></span>
                    </small>
                  </div>
                  <button type="button" class="btn btn-sm btn-outline-secondary" id="clearCustomerBtn">
                    <i class="fas fa-times"></i> 変更
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- 新規顧客登録フォーム（既存顧客が見つからない場合） -->
          <div id="newCustomerForm" class="row mb-3" style="display: none;">
            <div class="col-12">
              <div class="alert alert-warning">
                <h6 class="alert-heading">
                  <i class="fas fa-user-plus me-1"></i>新規顧客として登録
                </h6>
                <p class="mb-2">該当する顧客が見つかりませんでした。新規顧客として登録します。</p>
              </div>
            </div>
            
            <div class="col-md-6">
              <label for="newCustomerName" class="form-label">顧客名 *</label>
              <input type="text" class="form-control" id="newCustomerName" required>
            </div>
            <div class="col-md-6">
              <label for="newCustomerPhone" class="form-label">電話番号</label>
              <input type="tel" class="form-control" id="newCustomerPhone">
            </div>
            
            <div class="col-md-6 mt-2">
              <label for="newCustomerKana" class="form-label">フリガナ</label>
              <input type="text" class="form-control" id="newCustomerKana">
            </div>
            <div class="col-md-6 mt-2">
              <label for="newCustomerEmail" class="form-label">メールアドレス</label>
              <input type="email" class="form-control" id="newCustomerEmail">
            </div>
          </div>
          
          <!-- 予約情報（既存のまま） -->
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="reservationDate" class="form-label">日付 *</label>
              <input type="date" class="form-control" id="reservationDate" required>
            </div>
            <div class="col-md-6">
              <label for="reservationTime" class="form-label">時間 *</label>
              <input type="time" class="form-control" id="reservationTime" min="10:00" max="21:00" required>
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="reservationCourse" class="form-label">コース *</label>
              <select class="form-select" id="reservationCourse" required>
                <option value="">コースを選択</option>
                <option value="40分">40分コース (¥8,000)</option>
                <option value="60分">60分コース (¥12,000)</option>
                <option value="80分">80分コース (¥16,000)</option>
              </select>
            </div>
            <div class="col-md-6">
              <label for="reservationStatus" class="form-label">ステータス</label>
              <select class="form-select" id="reservationStatus">
                <option value="tentative">仮予約</option>
                <option value="confirmed" selected>確定</option>
                <option value="cancelled">キャンセル</option>
                <option value="completed">完了</option>
                <option value="no_show">無断キャンセル</option>
              </select>
            </div>
          </div>
          
          <!-- インターバル設定 -->
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="reservationInterval" class="form-label">整理時間（インターバル）</label>
              <select class="form-select" id="reservationInterval">
                <option value="">システム設定を使用</option>
                <option value="0">0分（整理時間なし）</option>
                <option value="5">5分</option>
                <option value="10">10分</option>
                <option value="15">15分</option>
                <option value="20">20分</option>
                <option value="30">30分</option>
                <option value="45">45分</option>
                <option value="60">60分</option>
              </select>
              <small class="text-muted">個別に整理時間を設定できます</small>
            </div>
            <div class="col-md-6">
              <label class="form-label">現在の設定</label>
              <div id="currentIntervalInfo" class="form-control-plaintext">
                <span class="badge bg-primary">システム設定: 15分</span>
              </div>
            </div>
          </div>
          
          <!-- キャンセル理由（キャンセルステータスの時のみ表示） -->
          <div class="row mb-3" id="cancellationReasonRow" style="display: none;">
            <div class="col-12">
              <label for="cancellationReason" class="form-label">キャンセル理由 <span class="text-danger">*</span></label>
              <textarea class="form-control" id="cancellationReason" rows="2" placeholder="キャンセルの理由を入力してください"></textarea>
            </div>
          </div>
          
          <!-- チケット情報 -->
          <div class="row mb-3">
            <div class="col-12">
              <label class="form-label">チケット情報</label>
              <div id="ticketInfo" class="border rounded p-3 bg-light">
                <div class="text-muted">
                  <i class="fas fa-info-circle me-1"></i>
                  顧客を選択するとチケット情報が表示されます
                </div>
              </div>
            </div>
          </div>
          
          <!-- メモ -->
          <div class="row mb-3">
            <div class="col-12">
              <label for="reservationMemo" class="form-label">メモ・注意事項</label>
              <textarea class="form-control" id="reservationMemo" rows="3" placeholder="予約に関するメモや注意事項を入力してください"></textarea>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1"></i>キャンセル
        </button>
        <button type="button" class="btn btn-danger" id="deleteReservationBtn" style="display: none;">
            <i class="fas fa-trash me-1"></i>削除
          </button>
        <button type="button" class="btn btn-primary" id="saveReservationBtn">
            <i class="fas fa-save me-1"></i>保存
          </button>
      </div>
    </div>
  </div>
</div>

<!-- 顧客履歴モーダル -->
<div class="modal fade" id="customerHistoryModal" tabindex="-1" aria-labelledby="customerHistoryModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="customerHistoryModalLabel">
          <i class="fas fa-history me-2"></i>顧客履歴
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="customerHistoryContent">
          <!-- 顧客履歴がここに表示されます -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- キャンセル履歴モーダル -->
<div class="modal fade" id="cancelledHistoryModal" tabindex="-1" aria-labelledby="cancelledHistoryModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="cancelledHistoryModalLabel">
          <i class="fas fa-times-circle text-danger me-2"></i>キャンセル統計・履歴
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row mb-4">
          <div class="col-md-4">
            <div class="card border-danger">
              <div class="card-body text-center">
                <h3 class="text-danger mb-0" id="modalCancelledCount">0</h3>
                <small class="text-muted">今月のキャンセル数</small>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card border-warning">
              <div class="card-body text-center">
                <h3 class="text-warning mb-0" id="modalCancelledRate">0%</h3>
                <small class="text-muted">キャンセル率</small>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card border-info">
              <div class="card-body text-center">
                <h3 class="text-info mb-0" id="modalTotalReservations">0</h3>
                <small class="text-muted">今月の総予約数</small>
              </div>
            </div>
          </div>
        </div>
        <div id="modalCancelledHistory">
          <div class="text-muted text-center py-3">
            <i class="fas fa-info-circle me-1"></i>
            キャンセル履歴がありません
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1"></i>閉じる
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* ==============================================
   予約イベントの基本スタイル
   ============================================== */
.fc-timegrid-event {
  border-radius: 8px !important;
  font-size: 0.9rem !important;
  font-weight: 600 !important;
  box-shadow: 0 3px 8px rgba(0,0,0,0.15) !important;
  transition: all 0.3s ease !important;
  border: none !important;
  margin: 2px 0 !important;
  min-height: 25px !important;
}

.fc-timegrid-event:hover {
  box-shadow: 0 6px 16px rgba(0,0,0,0.2) !important;
  transform: translateY(-2px) !important;
  z-index: 1000 !important;
}

/* ==============================================
   タブ形式の予約イベント
   ============================================== */
.fc-timegrid-event.reservation-with-tabs {
  min-height: 50px !important;
  padding: 0 !important;
  border-radius: 8px !important;
  overflow: hidden !important;
  border: none !important;
}

.fc-timegrid-event.reservation-with-tabs .fc-event-main {
  padding: 0 !important;
  height: 100% !important;
}

.fc-timegrid-event.reservation-with-tabs .event-tabs {
  display: flex !important;
  flex-direction: column !important;
  height: 100% !important;
  width: 100% !important;
}

.fc-timegrid-event.reservation-with-tabs .event-tab {
  flex: 1 !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  padding: 2px 4px !important;
  font-size: 0.8rem !important;
  font-weight: 500 !important;
  text-align: center !important;
  border-bottom: 1px solid rgba(255, 255, 255, 0.3) !important;
  overflow: hidden !important;
}

.fc-timegrid-event.reservation-with-tabs .event-tab:last-child {
  border-bottom: none !important;
}

.fc-timegrid-event.reservation-with-tabs .event-tab.course {
  background: inherit !important;
  color: inherit !important;
}

.fc-timegrid-event.reservation-with-tabs .event-tab.interval {
  background-color: #6c757d !important;
  color: white !important;
}

.fc-timegrid-event.reservation-with-tabs .event-tab.interval.individual {
  background-color: #fd7e14 !important;
  color: white !important;
  font-weight: 600 !important;
}

.fc-timegrid-event.reservation-with-tabs .event-tab.interval.system {
  background-color: #6c757d !important;
  color: white !important;
}

/* ==============================================
   ステータス別の色分け
   ============================================== */
.fc-timegrid-event.confirmed {
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%) !important;
  border-color: #28a745 !important;
  color: white !important;
}

.fc-timegrid-event.tentative {
  background: linear-gradient(135deg, #ffc107 0%, #ffb84d 100%) !important;
  border-color: #ffc107 !important;
  color: #212529 !important;
}

.fc-timegrid-event.cancelled {
  background: linear-gradient(135deg, #dc3545 0%, #c82333 100%) !important;
  border-color: #dc3545 !important;
  color: white !important;
}

.fc-timegrid-event.completed {
  background: linear-gradient(135deg, #6f42c1 0%, #5a32a3 100%) !important;
  border-color: #6f42c1 !important;
  color: white !important;
}

.fc-timegrid-event.no_show {
  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%) !important;
  border-color: #6c757d !important;
  color: white !important;
}

.fc-timegrid-event.break {
  background: linear-gradient(135deg, #17a2b8 0%, #138496 100%) !important;
  border-color: #17a2b8 !important;
  color: white !important;
}
</style>

<script>
  // カレンダー初期化
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 DOM Content Loaded');
    
    // FullCalendarの初期化
    const calendarEl = document.getElementById('calendar');
    console.log('📅 Calendar element:', calendarEl);
    
    // キャンセル統計と履歴を取得・表示
    function loadCancellationStats() {
      console.log('📊 Loading cancellation stats...');
      
      fetch('/admin/reservations/cancellation_stats')
        .then(response => {
          console.log('📊 Response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('📊 Received data:', data);
          
          // 要素の存在確認とエラーハンドリング
          const cancelledCount = document.getElementById('cancelledCount');
          const cancelledRate = document.getElementById('cancelledRate');
          const historyContainer = document.getElementById('cancelledHistory');
          
          // キャンセル数を更新（要素が存在する場合のみ）
          if (cancelledCount) {
            cancelledCount.textContent = data.cancelled_count;
          }
          if (cancelledRate) {
            cancelledRate.textContent = data.cancelled_rate + '%';
          }
          
          // キャンセル履歴を更新（要素が存在する場合のみ）
          if (historyContainer) {
            if (data.cancelled_history && data.cancelled_history.length > 0) {
              console.log('📊 Rendering history:', data.cancelled_history.length, 'items');
              const historyHtml = data.cancelled_history.map(item => `
                <div class="border-bottom pb-2 mb-2">
                  <div class="d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1">
                      <div class="fw-bold text-dark">${item.customer_name}</div>
                      <div class="small text-muted">
                        <i class="fas fa-calendar me-1"></i>${item.cancelled_at}
                        <span class="mx-2">|</span>
                        <i class="fas fa-clock me-1"></i>${item.course}
                      </div>
                    </div>
                  </div>
                  <div class="mt-1">
                    <small class="text-danger">
                      <i class="fas fa-times-circle me-1"></i>
                      ${item.reason || '理由未入力'}
                    </small>
                  </div>
                </div>
              `).join('');
              historyContainer.innerHTML = historyHtml;
            } else {
              console.log('📊 No cancellation history found');
              historyContainer.innerHTML = `
                <div class="text-muted text-center py-3">
                  <i class="fas fa-info-circle me-1"></i>
                  キャンセル履歴がありません
        </div>
      `;
    }
          } else {
            console.log('📊 Cancellation history container not found, skipping update');
          }
        })
        .catch(error => {
          console.error('❌ キャンセル統計の取得に失敗:', error);
          // エラー時もデフォルト表示
          const cancelledCount = document.getElementById('cancelledCount');
          const cancelledRate = document.getElementById('cancelledRate');
          const cancelledHistory = document.getElementById('cancelledHistory');
          
          if (cancelledCount) cancelledCount.textContent = '0';
          if (cancelledRate) cancelledRate.textContent = '0%';
          if (cancelledHistory) {
            cancelledHistory.innerHTML = `
              <div class="text-muted text-center">
                <i class="fas fa-exclamation-triangle me-1"></i>
                統計の取得に失敗しました
              </div>
            `;
          }
        });
    }

    if (!calendarEl) {
      console.error('❌ Calendar element not found');
      return;
    }
    
    const calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'timeGridWeek',
      locale: 'ja',
      // timeZone設定を削除（デフォルトのローカルタイムゾーンを使用）
      height: 'auto',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      buttonText: {
        today: '今日',
        month: '月',
        week: '週',  
        day: '日'
      },
      slotMinTime: '10:00:00',
      slotMaxTime: '21:00:00',
      slotDuration: '00:10:00', // 10分間隔に変更
      allDaySlot: false,
      selectable: true,
      editable: true,
      nowIndicator: true,
      eventDisplay: 'block', // イベントをブロック表示にして高さを制御
      eventMinHeight: 25, // 最小高さを増加
      dayHeaderFormat: { weekday: 'short', day: 'numeric', month: 'short' }, // ヘッダー形式を改善
      slotLabelFormat: { hour: '2-digit', minute: '2-digit', hour12: false }, // 時間表示を改善
    
    // タイムゾーン処理の設定
    eventTimeFormat: {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
      timeZone: 'Asia/Tokyo'  // 表示時も東京時間を明示
    },
    
    // イベント処理
    eventDrop: function(info) {
      console.log('🔄 Event dropped:', info.event);
      updateReservationTime(info.event);
    },
    
    eventResize: function(info) {
      console.log('📏 Event resized:', info.event);
      updateReservationTime(info.event);
    },
    
    eventClick: function(info) {
      openReservationModal(info.event);
    },
    
    select: function(info) {
      console.log('🔍 Raw select info:', info);
      
      // TimeWithZoneオブジェクトの場合は適切なメソッドを使用
      const startTime = info.start;
      const endTime = info.end;
      
      // 時間と分を取得（TimeWithZone対応）
      const startHour = startTime.getHours ? startTime.getHours() : startTime.hour;
      const startMinute = startTime.getMinutes ? startTime.getMinutes() : startTime.min;
      const endHour = endTime.getHours ? endTime.getHours() : endTime.hour;
      const endMinute = endTime.getMinutes ? endTime.getMinutes() : endTime.min;
      
      console.log('🔍 Start time details:', {
        start: startTime,
        hours: startHour,
        minutes: startMinute,
        toString: startTime.toString()
      });
      
      // 営業時間外の選択をチェック
      if (startHour < 10 || startHour >= 21) {
        console.log('❌ Selected time outside business hours:', startHour);
        showMessage('営業時間外です。10:00から21:00の間で選択してください', 'warning');
        return;
      }
      
      // 選択された時間幅を考慮した営業時間チェック
      const selectionDuration = (endTime - startTime) / (1000 * 60); // 分単位
      
      console.log('🕐 Selection time check:', {
        startHour,
        endHour,
        endMinute,
        selectionDuration,
        businessEnd: '21:00'
      });
      
      if (endHour > 21 || (endHour === 21 && endMinute > 0)) {
        console.log('❌ Selection extends beyond business hours');
        showMessage(`この時間帯は営業時間外になります。終了時刻: ${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`, 'warning');
        return;
      }
      
      // 🔧 修正: openNewReservationModal を呼び出し
      openNewReservationModal(info.start, info.end);
    },
    
    // イベントレンダリングのカスタマイズ
    eventContent: function(arg) {
      const event = arg.event;
      const extendedProps = event.extendedProps;
      
      console.log(`🎨 Rendering event ${event.id}:`, {
        title: event.title,
        start: event.start,
        end: event.end,
        extendedProps: extendedProps
      });
      
      // インターバルがある場合はタブ形式で表示
      if (extendedProps.has_interval && extendedProps.interval_duration > 0) {
        const courseDuration = extendedProps.course_duration; // 分単位
        const intervalDuration = extendedProps.interval_duration; // 分単位
        const totalDuration = extendedProps.total_duration; // 分単位
        
        // タブの高さを計算（時間の比率に基づく）
        const courseHeight = Math.round((courseDuration / totalDuration) * 100);
        const intervalHeight = Math.round((intervalDuration / totalDuration) * 100);
        
        console.log(`📊 Tab calculation for event ${event.id}:`, {
          courseDuration,
          intervalDuration,
          totalDuration,
          courseHeight: `${courseHeight}%`,
          intervalHeight: `${intervalHeight}%`
        });
        
        const intervalType = extendedProps.is_individual_interval ? 'individual' : 'system';
        
        return {
          html: `
            <div class="event-tabs" style="height: 100%; display: flex; flex-direction: column;">
              <div class="event-tab course" style="
                height: ${courseHeight}%; 
                flex: none; 
                display: flex; 
                align-items: center; 
                justify-content: center; 
                padding: 2px 4px; 
                font-size: 0.8rem; 
                font-weight: 500; 
                text-align: center; 
                border-bottom: 1px solid rgba(255, 255, 255, 0.3);
                overflow: hidden;
              ">
                ${event.title}
              </div>
              <div class="event-tab interval ${intervalType}" style="
                height: ${intervalHeight}%; 
                flex: none; 
                display: flex; 
                align-items: center; 
                justify-content: center; 
                padding: 2px 4px; 
                font-size: 0.8rem; 
                font-weight: 500; 
                text-align: center;
                background-color: ${intervalType === 'individual' ? '#fd7e14' : '#6c757d'};
                color: white;
                overflow: hidden;
              ">
                整理${intervalDuration}分
              </div>
            </div>
          `
        };
      } else {
        // インターバルがない場合は通常表示
        return {
          html: `<div class="fc-event-main-frame">
            <div class="fc-event-title-container">
              <div class="fc-event-title fc-sticky">${event.title}</div>
            </div>
          </div>`
        };
      }
    },
    
    // イベントデータの取得
    events: function(info, successCallback, failureCallback) {
      console.log('🔍 Fetching events for:', info.startStr, 'to', info.endStr);
      
      fetch('/admin/reservations.json', {
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(events => {
        console.log('✅ Events loaded:', events.length);
        successCallback(events);
      })
      .catch(error => {
        console.error('❌ Error loading events:', error);
        failureCallback(error);
      });
    }
      });
    
    console.log('🎨 Rendering calendar...');
    calendar.render();
    console.log('✅ Calendar rendered successfully');
    
    // キャンセル履歴モーダルを開く
    window.openCancelledHistoryModal = function() {
      console.log('📊 Opening cancelled history modal');
      
      // キャンセル統計を取得してモーダルに表示
      fetch('/admin/reservations/cancellation_stats')
        .then(response => {
          console.log('📊 Response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('📊 Received data for modal:', data);
          
          // モーダルの統計を更新
          document.getElementById('modalCancelledCount').textContent = data.cancelled_count;
          document.getElementById('modalCancelledRate').textContent = data.cancelled_rate + '%';
          document.getElementById('modalTotalReservations').textContent = data.total_reservations || 0;
          
          // モーダルの履歴を更新
          const modalHistoryContainer = document.getElementById('modalCancelledHistory');
          if (data.cancelled_history && data.cancelled_history.length > 0) {
            console.log('📊 Rendering modal history:', data.cancelled_history.length, 'items');
            const historyHtml = data.cancelled_history.map(item => `
              <div class="border-bottom pb-3 mb-3">
                <div class="d-flex justify-content-between align-items-start">
                  <div class="flex-grow-1">
                    <div class="fw-bold text-dark fs-6">${item.customer_name}</div>
                    <div class="small text-muted mt-1">
                      <i class="fas fa-calendar me-1"></i>${item.cancelled_at}
                      <span class="mx-2">|</span>
                      <i class="fas fa-clock me-1"></i>${item.course}
                    </div>
                  </div>
                </div>
                <div class="mt-2">
                  <span class="badge bg-danger">
                    <i class="fas fa-times-circle me-1"></i>
                    ${item.reason || '理由未入力'}
                  </span>
                </div>
              </div>
            `).join('');
            modalHistoryContainer.innerHTML = historyHtml;
          } else {
            console.log('📊 No cancellation history found for modal');
            modalHistoryContainer.innerHTML = `
              <div class="text-muted text-center py-4">
                <i class="fas fa-info-circle me-1"></i>
                キャンセル履歴がありません
              </div>
            `;
          }
          
          // モーダルを表示
          const modal = new bootstrap.Modal(document.getElementById('cancelledHistoryModal'));
          modal.show();
        })
        .catch(error => {
          console.error('❌ キャンセル統計の取得に失敗:', error);
          // エラー時もモーダルを表示（デフォルト値）
          const modalCancelledCount = document.getElementById('modalCancelledCount');
          const modalCancelledRate = document.getElementById('modalCancelledRate');
          const modalTotalReservations = document.getElementById('modalTotalReservations');
          const modalCancelledHistory = document.getElementById('modalCancelledHistory');
          
          if (modalCancelledCount) modalCancelledCount.textContent = '0';
          if (modalCancelledRate) modalCancelledRate.textContent = '0%';
          if (modalTotalReservations) modalTotalReservations.textContent = '0';
          if (modalCancelledHistory) {
            modalCancelledHistory.innerHTML = `
              <div class="text-muted text-center py-4">
                <i class="fas fa-exclamation-triangle me-1"></i>
                統計の取得に失敗しました
              </div>
            `;
          }
          
          const modal = new bootstrap.Modal(document.getElementById('cancelledHistoryModal'));
          modal.show();
      });
    };
    
    // インターバル情報を更新
    function updateIntervalInfo(extendedProps) {
      const intervalInfo = document.getElementById('currentIntervalInfo');
      const individualInterval = extendedProps?.individual_interval_minutes;
      const effectiveInterval = extendedProps?.effective_interval_minutes || 15;
      
      if (individualInterval !== null && individualInterval !== undefined) {
        intervalInfo.innerHTML = `<span class="badge bg-success">個別設定: ${individualInterval}分</span>`;
      } else {
        intervalInfo.innerHTML = `<span class="badge bg-primary">システム設定: ${effectiveInterval}分</span>`;
      }
    }

    // 初期データ読み込み（エラーハンドリング付き）
    try {
      loadCancellationStats();
    } catch (error) {
      console.log('📊 Initial cancellation stats loading skipped:', error.message);
    }
    
    // URLパラメータから編集モードをチェック
    const urlParams = new URLSearchParams(window.location.search);
    const editReservationId = urlParams.get('edit');
    
    if (editReservationId) {
      console.log('🔧 Edit mode detected for reservation:', editReservationId);
      
      // カレンダーが読み込まれた後に編集モーダルを開く
      setTimeout(() => {
        // カレンダーから該当のイベントを取得
        const event = calendar.getEventById(editReservationId);
        if (event) {
          console.log('✅ Found event for editing:', event);
          openReservationModal(event);
        } else {
          console.log('❌ Event not found for editing:', editReservationId);
          showMessage('編集する予約が見つかりませんでした', 'warning');
        }
      }, 1000); // カレンダーの読み込みを待つ
    }
    
    // ナビゲーションボタン
    document.getElementById('prevBtn').addEventListener('click', () => {
      calendar.prev();
    });
    
    document.getElementById('nextBtn').addEventListener('click', () => {
      calendar.next();
    });
    
    document.getElementById('todayBtn').addEventListener('click', () => {
      calendar.today();
    });
    
    // 新規予約ボタン
    document.getElementById('newReservationBtn').addEventListener('click', () => {
      openNewReservationModal();
    });
    
    // モーダル関連
    const reservationModal = new bootstrap.Modal(document.getElementById('reservationModal'));
    const customerHistoryModal = new bootstrap.Modal(document.getElementById('customerHistoryModal'));
    
    // 顧客検索・選択機能を追加
    // 顧客検索機能
    let searchTimeout;
    const customerSearch = document.getElementById('customerSearch');
    const searchResults = document.getElementById('customerSearchResults');
    const selectedCustomerInfo = document.getElementById('selectedCustomerInfo');
    const newCustomerForm = document.getElementById('newCustomerForm');

    customerSearch.addEventListener('input', function() {
      const query = this.value.trim();
      
      clearTimeout(searchTimeout);
      
      if (query.length < 2) {
        hideSearchResults();
      return;
    }
    
      searchTimeout = setTimeout(() => {
        searchCustomers(query);
      }, 300);
    });

    // 検索結果以外をクリックしたら結果を隠す
    document.addEventListener('click', function(e) {
      if (!e.target.closest('#customerSearch') && !e.target.closest('#customerSearchResults')) {
        hideSearchResults();
      }
    });

    // 検索結果のクリックイベントを処理
    document.addEventListener('click', function(e) {
      const searchResultItem = e.target.closest('.search-result-item');
      if (searchResultItem) {
        const userId = searchResultItem.dataset.userId;
        const userName = searchResultItem.dataset.userName;
        const userPhone = searchResultItem.dataset.userPhone;
        const userEmail = searchResultItem.dataset.userEmail;
        
        console.log('Search result clicked:', { userId, userName, userPhone, userEmail });
        selectCustomer(userId, userName, userPhone, userEmail);
      }
    });

    function searchCustomers(query) {
      fetch(`/admin/users/search?query=${encodeURIComponent(query)}`, {
      headers: {
        'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
    })
    .then(response => {
      if (!response.ok) {
          if (response.status === 401) {
            // 認証エラーの場合、ログインページにリダイレクト
            window.location.href = '/admin_users/sign_in';
            throw new Error('認証が必要です');
      }
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      return response.json();
    })
    .then(data => {
        displaySearchResults(data.users, query);
    })
    .catch(error => {
        console.error('顧客検索エラー:', error);
        hideSearchResults();
      });
    }

    function displaySearchResults(users, query) {
      if (users.length === 0) {
        // 検索結果がない場合は新規顧客登録を提案
        searchResults.innerHTML = `
          <div class="p-3 text-center">
            <div class="text-muted mb-2">
              <i class="fas fa-search me-1"></i>
              「${query}」に該当する顧客が見つかりませんでした
            </div>
            <button type="button" class="btn btn-sm btn-primary" onclick="showNewCustomerForm('${query}')">
              <i class="fas fa-user-plus me-1"></i>新規顧客として登録
            </button>
          </div>
        `;
    } else {
        let html = '';
        users.forEach(user => {
          html += `
            <div class="search-result-item p-3 border-bottom" 
                 style="cursor: pointer; transition: background-color 0.2s;"
                 onmouseover="this.style.backgroundColor='#f8f9fa'"
                 onmouseout="this.style.backgroundColor='white'"
                 data-user-id="${user.id}"
                 data-user-name="${user.name || ''}"
                 data-user-phone="${user.phone_number || ''}"
                 data-user-email="${user.email || ''}">
              <div class="d-flex justify-content-between align-items-start">
                <div>
                  <div class="fw-bold">${user.name || '名前未設定'}</div>
                  <small class="text-muted">
                    ${user.phone_number || '電話番号未登録'}
                    ${user.email ? ` | ${user.email}` : ''}
                  </small>
                  ${user.last_visit ? `<br><small class="text-success">最終来店: ${user.last_visit}</small>` : ''}
                </div>
                <div class="text-end">
                  <small class="badge bg-info">${user.active_tickets}枚</small>
                </div>
              </div>
            </div>
          `;
        });
        searchResults.innerHTML = html;
      }
      
      searchResults.style.display = 'block';
    }

    function hideSearchResults() {
      searchResults.style.display = 'none';
    }

    function selectCustomer(userId, name, phone, email) {
      console.log('selectCustomer called with:', { userId, name, phone, email });
      
      // 選択された顧客情報を保存
      document.getElementById('selectedUserId').value = userId;
      document.getElementById('customerSearch').value = name;
      
      // 顧客情報を表示
      document.getElementById('selectedCustomerName').textContent = name;
      document.getElementById('selectedCustomerDetails').innerHTML = `
        ${phone || '電話番号未登録'} | 
        ${email || 'メール未登録'}
      `;
      
      // UI更新
      selectedCustomerInfo.style.display = 'block';
      newCustomerForm.style.display = 'none';
      hideSearchResults();
      
      // 検索フィールドを無効化（選択済みを示す）
      document.getElementById('customerSearch').disabled = true;
      document.getElementById('customerSearch').style.backgroundColor = '#e9ecef';
      
      // チケット情報を読み込み
      loadCustomerTickets(userId);
      
      // 成功メッセージを表示
      showMessage('顧客が選択されました', 'success');
      
      console.log('顧客が選択されました:', { userId, name, phone, email });
    }

    function showNewCustomerForm(initialName = '') {
      // 新規顧客フォームを表示
      newCustomerForm.style.display = 'block';
      selectedCustomerInfo.style.display = 'none';
      document.getElementById('selectedUserId').value = '';
      
      // 検索した名前を初期値として設定
      if (initialName) {
        document.getElementById('newCustomerName').value = initialName;
      }
      
      hideSearchResults();
      
      // フォーカスを名前フィールドに
      document.getElementById('newCustomerName').focus();
    }

    // 顧客選択をクリア
    document.getElementById('clearCustomerBtn').addEventListener('click', function() {
      document.getElementById('selectedUserId').value = '';
      document.getElementById('customerSearch').value = '';
      
      // 検索フィールドを有効化
      document.getElementById('customerSearch').disabled = false;
      document.getElementById('customerSearch').style.backgroundColor = 'white';
      
      selectedCustomerInfo.style.display = 'none';
      newCustomerForm.style.display = 'none';
      document.getElementById('ticketInfo').innerHTML = `
        <div class="text-muted">
          <i class="fas fa-info-circle me-1"></i>
          顧客を選択するとチケット情報が表示されます
        </div>
      `;
      customerSearch.focus();
      
      showMessage('顧客選択をクリアしました', 'info');
    });

    function resetReservationForm() {
      // フォームをリセット
      document.getElementById('reservationForm').reset();
      document.getElementById('currentReservationId').value = '';
      document.getElementById('selectedUserId').value = '';
      
      // キャンセル理由フィールドをリセット
      document.getElementById('cancellationReason').value = '';
      document.getElementById('cancellationReasonRow').style.display = 'none';
      
      // 検索フィールドを有効化
      document.getElementById('customerSearch').disabled = false;
      document.getElementById('customerSearch').style.backgroundColor = 'white';
      
      // UI表示をリセット
      selectedCustomerInfo.style.display = 'none';
      newCustomerForm.style.display = 'none';
      hideSearchResults();
      
      // チケット情報をリセット
      document.getElementById('ticketInfo').innerHTML = `
        <div class="text-muted">
          <i class="fas fa-info-circle me-1"></i>
          顧客を選択するとチケット情報が表示されます
        </div>
      `;
    }
    
    // openReservationModal 関数を完全に置き換え（522行目付近）
    function openReservationModal(event) {
      // 既存の予約を編集モードで開く
      document.getElementById('reservationModalLabel').innerHTML = '<i class="fas fa-edit me-2"></i>予約編集';
      document.getElementById('deleteReservationBtn').style.display = 'block';
      
      // フォームをリセット
      resetReservationForm();
      
      // フォームに値を設定
      if (event) {
        // 予約IDを設定
        document.getElementById('currentReservationId').value = event.id;
        
        // 🔧 完全な修正: UTC変換を避けてローカル時間を直接取得
        const eventStart = event.start;
        
        // 日付の取得（ローカル時間として）
        const year = eventStart.getFullYear();
        const month = String(eventStart.getMonth() + 1).padStart(2, '0');
        const day = String(eventStart.getDate()).padStart(2, '0');
        const dateString = `${year}-${month}-${day}`;
        
        // 時間の取得（ローカル時間として）
        const hours = String(eventStart.getHours()).padStart(2, '0');
        const minutes = String(eventStart.getMinutes()).padStart(2, '0');
        const timeString = `${hours}:${minutes}`;
        
        console.log('🕐 Edit reservation time:', {
          original: eventStart,
          dateString: dateString,
          timeString: timeString
        });
        
        document.getElementById('reservationDate').value = dateString;
        document.getElementById('reservationTime').value = timeString;
        document.getElementById('reservationCourse').value = event.title.split(' - ')[1] || '';
        document.getElementById('reservationStatus').value = event.extendedProps?.status || 'confirmed';
        document.getElementById('reservationMemo').value = event.extendedProps?.note || '';
        
        // インターバル設定を設定
        const individualInterval = event.extendedProps?.individual_interval_minutes;
        document.getElementById('reservationInterval').value = individualInterval || '';
        
        // 現在のインターバル情報を更新
        updateIntervalInfo(event.extendedProps);
        
        // キャンセル理由を設定
        const cancellationReason = event.extendedProps?.cancellation_reason || '';
        document.getElementById('cancellationReason').value = cancellationReason;
        
        // キャンセルステータスの場合は理由フィールドを表示
        if (event.extendedProps?.status === 'cancelled') {
          document.getElementById('cancellationReasonRow').style.display = 'block';
        }
        
        // 顧客情報を設定（新しい顧客検索機能に対応）
        if (event.extendedProps?.customer) {
          const customer = event.extendedProps.customer;
          
          // 顧客選択状態を設定
          document.getElementById('selectedUserId').value = customer.id;
          document.getElementById('customerSearch').value = customer.name || '';
          
          // 顧客情報を表示
          document.getElementById('selectedCustomerName').textContent = customer.name || '';
          document.getElementById('selectedCustomerDetails').innerHTML = `
            ${customer.phone || '電話番号未登録'} | 
            ${customer.email || 'メール未登録'}
          `;
          
          // UI更新
          document.getElementById('selectedCustomerInfo').style.display = 'block';
          document.getElementById('newCustomerForm').style.display = 'none';
          
          // 検索フィールドを無効化
          document.getElementById('customerSearch').disabled = true;
          document.getElementById('customerSearch').style.backgroundColor = '#e9ecef';
          
          // チケット情報を取得
          loadCustomerTickets(customer.id);
        }
      }
      
      reservationModal.show();
    }

    // openNewReservationModal 関数も同様に修正（561行目付近）
    function openNewReservationModal(start, end) {
      // 新規予約モードで開く
      document.getElementById('reservationModalLabel').innerHTML = '<i class="fas fa-calendar-plus me-2"></i>新規予約';
      document.getElementById('deleteReservationBtn').style.display = 'none';
      
      // フォームをリセット
      resetReservationForm();
      
      // 予約IDをクリア
      document.getElementById('currentReservationId').value = '';
      
      // 日時を設定
      if (start) {
        // 🔧 完全な修正: UTC変換を避けてローカル時間を直接取得
        const eventStart = new Date(start);
        
        const year = eventStart.getFullYear();
        const month = String(eventStart.getMonth() + 1).padStart(2, '0');
        const day = String(eventStart.getDate()).padStart(2, '0');
        const dateString = `${year}-${month}-${day}`;
        
        const hours = String(eventStart.getHours()).padStart(2, '0');
        const minutes = String(eventStart.getMinutes()).padStart(2, '0');
        const timeString = `${hours}:${minutes}`;
        
        console.log('🕐 New reservation time:', {
          original: start,
          eventStart: eventStart,
          dateString: dateString,
          timeString: timeString
        });
        
        document.getElementById('reservationDate').value = dateString;
        document.getElementById('reservationTime').value = timeString;
      }
      
      reservationModal.show();
    }
    
    // イベントの時間更新機能
    function updateReservationTime(event) {
      const reservationId = event.id;
      const newStart = event.start;
      const newEnd = event.end;
      
      console.log('🔄 Updating reservation time:', {
        id: reservationId,
        start: newStart,
        end: newEnd,
        extendedProps: event.extendedProps
      });
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      // ローカル時間を日本時間として明示的にフォーマット（UTC変換を避ける）
      function formatAsJSTDateTime(date) {
        if (!date) return null;
        
        // TimeWithZoneオブジェクトの場合は適切なメソッドを使用
        const year = date.getFullYear ? date.getFullYear() : date.year;
        const month = date.getMonth ? String(date.getMonth() + 1).padStart(2, '0') : String(date.month).padStart(2, '0');
        const day = date.getDate ? String(date.getDate()).padStart(2, '0') : String(date.day).padStart(2, '0');
        const hours = date.getHours ? String(date.getHours()).padStart(2, '0') : String(date.hour).padStart(2, '0');
        const minutes = date.getMinutes ? String(date.getMinutes()).padStart(2, '0') : String(date.min).padStart(2, '0');
        const seconds = date.getSeconds ? String(date.getSeconds()).padStart(2, '0') : String(date.sec).padStart(2, '0');
        
        // JST（UTC+09:00）として明示的にタイムゾーンを指定
        return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}+09:00`;
      }
      
      // ドラッグ時の時間をそのまま送信（コントローラーで適切に処理）
      const startISO = formatAsJSTDateTime(newStart);
      const endISO = formatAsJSTDateTime(newEnd);
      
      console.log('🕐 Drag time conversion:', {
        start: newStart,
        end: newEnd,
        startISO: startISO,
        endISO: endISO,
        effectiveIntervalMinutes: event.extendedProps?.effective_interval_minutes || 0
      });
      
      console.log('🕐 Time conversion:', {
        start: newStart,
        end: newEnd,
        startISO: startISO,
        endISO: endISO,
        startLocalTime: newStart.toLocaleString('ja-JP'),
        endLocalTime: newEnd.toLocaleString('ja-JP'),
        effectiveIntervalMinutes: event.extendedProps?.effective_interval_minutes || 0
      });
      
      // 時間更新APIを呼び出し
      fetch(`/admin/reservations/${reservationId}`, {
        method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({
          reservation: {
            start_time: startISO,
            end_time: endISO
          },
          is_drag_update: true
        })
    })
    .then(response => {
        console.log('📡 Update response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || '時間の更新に失敗しました');
          });
        }
      return response.json();
    })
    .then(data => {
        console.log('✅ Time update response:', data);
      
      if (data.success) {
          showMessage('予約時間を更新しました', 'success');
          
          // 成功時もカレンダーを再読み込みして最新データを表示
          setTimeout(() => {
            calendar.refetchEvents();
          }, 500);
        } else {
          throw new Error(data.error || '時間の更新に失敗しました');
        }
      })
      .catch(error => {
        console.error('❌ Time update error:', error);
        showMessage('時間の更新に失敗しました: ' + error.message, 'danger');
        
        // エラー時はカレンダーを再読み込み
        calendar.refetchEvents();
      });
    }
    
    function loadCustomerTickets(customerId) {
      if (!customerId) return;
      
      fetch(`/admin/users/${customerId}/tickets`)
        .then(response => response.json())
        .then(tickets => {
          const ticketInfo = document.getElementById('ticketInfo');
          if (tickets.length > 0) {
            let html = '<div class="row">';
            tickets.forEach(ticket => {
              const statusClass = ticket.status === 'expired' ? 'text-danger' : 
                                ticket.status === 'low' ? 'text-warning' : 'text-success';
              html += `
                <div class="col-md-6 mb-2">
                  <div class="card">
                    <div class="card-body p-2">
                      <h6 class="card-title mb-1">${ticket.name}</h6>
                                             <p class="card-text mb-1">
                         <small class="text-muted">
                           残り: ${ticket.remaining}/${ticket.total}回
                         </small>
                       </p>
                       <p class="card-text mb-1">
                         <small class="text-muted">
                           期限: ${ticket.expires_at || 'なし'}
                         </small>
                       </p>
                       <p class="card-text mb-0">
                         <small class="${statusClass}">
                           ${ticket.status === 'expired' ? '期限切れ' : 
                             ticket.status === 'low' ? '残り少ない' : '利用可能'}
                         </small>
                       </p>
                    </div>
                  </div>
                </div>
              `;
            });
            html += '</div>';
            ticketInfo.innerHTML = html;
      } else {
            ticketInfo.innerHTML = '<div class="text-muted">チケットがありません</div>';
      }
    })
    .catch(error => {
          console.error('Error loading tickets:', error);
          document.getElementById('ticketInfo').innerHTML = '<div class="text-danger">チケット情報の取得に失敗しました</div>';
        });
    }
    
    // ステータス変更時の処理
    document.getElementById('reservationStatus').addEventListener('change', function() {
      const status = this.value;
      console.log('📊 Status changed to:', status);
      
      // キャンセル理由フィールドの表示/非表示
      const cancellationReasonRow = document.getElementById('cancellationReasonRow');
      if (status === 'cancelled') {
        cancellationReasonRow.style.display = 'block';
      } else {
        cancellationReasonRow.style.display = 'none';
        document.getElementById('cancellationReason').value = '';
      }
    });

    // インターバル設定変更時の処理
    document.getElementById('reservationInterval').addEventListener('change', function() {
      const intervalValue = this.value;
      const intervalInfo = document.getElementById('currentIntervalInfo');
      
      if (intervalValue === '') {
        intervalInfo.innerHTML = '<span class="badge bg-primary">システム設定: 15分</span>';
      } else {
        intervalInfo.innerHTML = `<span class="badge bg-success">個別設定: ${intervalValue}分</span>`;
      }
    });

    // 保存ボタン
    document.getElementById('saveReservationBtn').addEventListener('click', function() {
      console.log('💾 Save button clicked');
      
      // 顧客選択のチェック
      const selectedUserId = document.getElementById('selectedUserId').value;
      if (!selectedUserId) {
        console.log('❌ No customer selected');
        showMessage('顧客を選択してください', 'warning');
      return;
    }
    
      // 必須フィールドのチェック
      const reservationDate = document.getElementById('reservationDate').value;
      const reservationTime = document.getElementById('reservationTime').value;
      const reservationCourse = document.getElementById('reservationCourse').value;
      
      if (!reservationDate || !reservationTime || !reservationCourse) {
        console.log('❌ Required fields missing:', { reservationDate, reservationTime, reservationCourse });
        showMessage('日時とコースを入力してください', 'warning');
        return;
      }
      
      // 時間の範囲チェック（10:00-21:00）
      const timeParts = reservationTime.split(':');
      const hours = parseInt(timeParts[0]);
      const minutes = parseInt(timeParts[1]);
      
      if (hours < 10 || hours >= 21) {
        console.log('❌ Time out of range:', reservationTime);
        showMessage('予約時間は10:00から21:00の間で入力してください', 'warning');
        return;
      }
      
      // コース時間とインターバル時間を考慮した営業時間チェック
      const courseDuration = parseInt(reservationCourse.match(/(\d+)分/)?.[1] || 60);
      const checkIntervalValue = document.getElementById('reservationInterval').value;
      const intervalDuration = checkIntervalValue ? parseInt(checkIntervalValue) : 15; // システムデフォルト
      const totalDuration = courseDuration + intervalDuration;
      
      // 予約終了時刻を計算
      const startTime = new Date(`${reservationDate}T${reservationTime}:00`);
      const endTime = new Date(startTime.getTime() + totalDuration * 60 * 1000);
      const endHour = endTime.getHours();
      const endMinute = endTime.getMinutes();
      
      console.log('🕐 Reservation time check:', {
        startTime: reservationTime,
        courseDuration,
        intervalDuration,
        totalDuration,
        endTime: `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`,
        businessEnd: '21:00'
      });
      
      if (endHour > 21 || (endHour === 21 && endMinute > 0)) {
        console.log('❌ Reservation extends beyond business hours');
        showMessage(`この予約は営業時間外になります。終了時刻: ${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`, 'warning');
        return;
      }
      
      // ボタンを無効化
      const saveBtn = this;
      const originalText = saveBtn.innerHTML;
    saveBtn.disabled = true;
      saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>保存中...';
      
      // 現在の予約IDを取得
      const reservationId = getCurrentReservationId();
      const isEditMode = reservationId && reservationId !== '';
      
      // 選択された顧客IDを取得（既に宣言済み）
      console.log('👤 Selected user ID:', selectedUserId);
      
      // キャンセル理由のチェック
      const status = document.getElementById('reservationStatus').value;
      const cancellationReason = document.getElementById('cancellationReason').value;
      
      if (status === 'cancelled' && !cancellationReason.trim()) {
        console.log('❌ Cancellation reason required');
        showMessage('キャンセル理由を入力してください', 'warning');
        return;
      }
      
      // インターバル設定を取得
      const intervalValue = document.getElementById('reservationInterval').value;
      let individualIntervalMinutes = null;
      
      if (intervalValue !== '' && !isNaN(parseInt(intervalValue))) {
        individualIntervalMinutes = parseInt(intervalValue);
      }
      
      console.log('🕐 Interval setting:', { intervalValue, individualIntervalMinutes });
      
      // 予約データを作成
      const reservationData = {
        reservation: {
          user_id: selectedUserId,
          name: document.getElementById('customerSearch').value,
          date: document.getElementById('reservationDate').value,
          time: document.getElementById('reservationTime').value,
          course: document.getElementById('reservationCourse').value,
          status: document.getElementById('reservationStatus').value,
          cancellation_reason: cancellationReason,
          individual_interval_minutes: individualIntervalMinutes,
          note: document.getElementById('reservationMemo').value
        }
      };
      
      console.log('💾 Saving reservation:', reservationData);
      console.log('🕐 Individual interval minutes in payload:', reservationData.reservation.individual_interval_minutes);
      console.log('📝 Edit mode:', isEditMode);
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      console.log('🔐 CSRF Token:', csrfToken);
      
      // API URLとメソッドを決定
      const url = isEditMode ? `/admin/reservations/${reservationId}` : '/admin/reservations';
      const method = isEditMode ? 'PATCH' : 'POST';
      console.log('🌐 API URL:', url);
      console.log('📡 Method:', method);
      
      // APIを呼び出し
      fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify(reservationData)
      })
      .then(response => {
        console.log('📡 Save response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || '保存に失敗しました');
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ Save response:', data);
        
        if (data.success) {
          // 成功メッセージを表示
          const message = isEditMode ? '予約を更新しました' : '予約を作成しました';
          showMessage(message, 'success');
          
          // モーダルを閉じる
          reservationModal.hide();
          
          // カレンダーを更新
          calendar.refetchEvents();
          
          // キャンセル統計の更新は無効化（エラーの原因となるため）
          console.log('✅ Reservation saved successfully, calendar updated');
  } else {
          throw new Error(data.error || '保存に失敗しました');
        }
      })
      .catch(error => {
        console.error('❌ Save error:', error);
        alert('保存エラー: ' + error.message);
      })
      .finally(() => {
        // ボタンを元に戻す
        saveBtn.disabled = false;
        saveBtn.innerHTML = originalText;
      });
    });
    
    // 削除ボタン
    document.getElementById('deleteReservationBtn').addEventListener('click', function() {
      if (!confirm('この予約を削除しますか？\n削除した予約は復元できません。')) {
        return;
      }
      
      // ボタンを無効化
      const deleteBtn = this;
      const originalText = deleteBtn.innerHTML;
      deleteBtn.disabled = true;
      deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>削除中...';
      
      // 現在の予約IDを取得（モーダルから）
      const reservationId = getCurrentReservationId();
      
      if (!reservationId) {
        alert('削除する予約が選択されていません');
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = originalText;
        return;
      }
      
      console.log('🗑️ Deleting reservation:', reservationId);
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      // 削除APIを呼び出し
      fetch(`/admin/reservations/${reservationId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        }
      })
      .then(response => {
        console.log('📡 Delete response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || '削除に失敗しました');
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ Delete response:', data);
        
        if (data.success) {
          // 成功メッセージを表示
          showMessage('予約を削除しました', 'success');
          
          // モーダルを閉じる
          reservationModal.hide();
          
          // カレンダーを更新
          calendar.refetchEvents();
        } else {
          throw new Error(data.error || '削除に失敗しました');
        }
      })
      .catch(error => {
        console.error('❌ Delete error:', error);
        alert('削除エラー: ' + error.message);
      })
      .finally(() => {
        // ボタンを元に戻す
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = originalText;
      });
    });
    
    // 現在の予約IDを取得する関数
    function getCurrentReservationId() {
      // モーダルから予約IDを取得する方法を実装
      // 例: モーダルに隠しフィールドがある場合
      const hiddenField = document.getElementById('currentReservationId');
      return hiddenField ? hiddenField.value : null;
    }
    
    // メッセージ表示関数
    function showMessage(message, type = 'info') {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
      alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      
      // ページの上部に表示
      const container = document.querySelector('.calendar-container');
      container.insertBefore(alertDiv, container.firstChild);
      
      // 3秒後に自動で消す
      setTimeout(() => {
        alertDiv.remove();
      }, 3000);
    }
  });
</script>

<style>
  /* インターバルイベントのスタイル */
  .fc-event.interval {
    font-weight: 500;
    border-radius: 4px;
  }
  
  /* システム設定のインターバル（灰色） */
  .fc-event.interval.system-interval {
    background-color: #6c757d !important;
    border-color: #545b62 !important;
    color: white !important;
  }
  
  /* 個別設定のインターバル（灰色） */
  .fc-event.interval.individual-interval {
    background-color: #6c757d !important;
    border-color: #545b62 !important;
    color: white !important;
    font-weight: 600;
  }
  
  /* 個別設定のインターバルに特別なアイコンを追加 */
  .fc-event.interval.individual-interval::before {
    content: "⚙️ ";
    margin-right: 2px;
  }
  
  /* ホバー時の効果 */
  .fc-event.interval:hover {
    opacity: 0.8;
    transform: scale(1.02);
    transition: all 0.2s ease;
  }
  
  /* 個別設定のインターバルにツールチップ風のスタイル */
  .fc-event.interval.individual-interval {
    position: relative;
  }
  
  .fc-event.interval.individual-interval:hover::after {
    content: "個別設定";
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 10px;
    white-space: nowrap;
    z-index: 1000;
  }
</style>