<% content_for :title, "予約カレンダー - Mobilis" %>

<div class="calendar-container">
  <div class="calendar-header">
    <div class="container-fluid">
      <div class="calendar-toolbar">
        <div class="calendar-nav">
          <button id="prevBtn" class="btn btn-outline-primary">
            <i class="fas fa-chevron-left"></i> 前週
          </button>
          <button id="todayBtn" class="btn btn-primary">
            <i class="fas fa-calendar-day"></i> 今日
          </button>
          <button id="nextBtn" class="btn btn-outline-primary">
            次週 <i class="fas fa-chevron-right"></i>
          </button>
        </div>
        
        <div class="calendar-title">
          <i class="fas fa-calendar-alt me-2"></i>予約カレンダー
        </div>
        
        <div class="calendar-actions">
          <button id="newReservationBtn" class="btn btn-success">
            <i class="fas fa-plus me-1"></i>新規予約
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <div class="container-fluid">
    <div id="calendar"></div>
  </div>
</div>

<!-- 予約モーダル -->
<div class="modal fade" id="reservationModal" tabindex="-1" aria-labelledby="reservationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reservationModalLabel">
          <i class="fas fa-calendar-plus me-2"></i>予約作成・編集
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="reservationForm">
          <!-- 隠しフィールド -->
          <input type="hidden" id="currentReservationId" value="">
          
          <!-- 顧客情報 -->
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="customerName" class="form-label">顧客名 *</label>
              <input type="text" class="form-control" id="customerName" required>
            </div>
            <div class="col-md-6">
              <label for="customerPhone" class="form-label">電話番号</label>
              <input type="tel" class="form-control" id="customerPhone">
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="customerKana" class="form-label">フリガナ</label>
              <input type="text" class="form-control" id="customerKana">
            </div>
            <div class="col-md-6">
              <label for="customerBirthDate" class="form-label">生年月日</label>
              <input type="date" class="form-control" id="customerBirthDate">
            </div>
          </div>
          
          <!-- 予約情報 -->
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="reservationDate" class="form-label">日付 *</label>
              <input type="date" class="form-control" id="reservationDate" required>
            </div>
            <div class="col-md-6">
              <label for="reservationTime" class="form-label">時間 *</label>
              <input type="time" class="form-control" id="reservationTime" required>
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="reservationCourse" class="form-label">コース *</label>
              <select class="form-select" id="reservationCourse" required>
                <option value="">コースを選択</option>
                <option value="40分コース" data-price="8000">40分コース (¥8,000)</option>
                <option value="60分コース" data-price="12000">60分コース (¥12,000)</option>
                <option value="80分コース" data-price="16000">80分コース (¥16,000)</option>
              </select>
            </div>
            <div class="col-md-6">
              <label for="reservationDuration" class="form-label">所要時間</label>
              <select class="form-select" id="reservationDuration">
                <option value="40">40分</option>
                <option value="60" selected>60分</option>
                <option value="80">80分</option>
              </select>
            </div>
          </div>
          
          <!-- チケット情報 -->
          <div class="row mb-3">
            <div class="col-12">
              <label class="form-label">チケット情報</label>
              <div id="ticketInfo" class="border rounded p-3 bg-light">
                <div class="text-muted">
                  <i class="fas fa-info-circle me-1"></i>
                  顧客を選択するとチケット情報が表示されます
                </div>
              </div>
            </div>
          </div>
          
          <!-- メモ -->
          <div class="row mb-3">
            <div class="col-12">
              <label for="reservationMemo" class="form-label">メモ・注意事項</label>
              <textarea class="form-control" id="reservationMemo" rows="3" placeholder="予約に関するメモや注意事項を入力してください"></textarea>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1"></i>キャンセル
        </button>
        <button type="button" class="btn btn-danger" id="deleteReservationBtn" style="display: none;">
          <i class="fas fa-trash me-1"></i>削除
        </button>
        <button type="button" class="btn btn-primary" id="saveReservationBtn">
          <i class="fas fa-save me-1"></i>保存
        </button>
      </div>
    </div>
  </div>
</div>

<!-- 顧客履歴モーダル -->
<div class="modal fade" id="customerHistoryModal" tabindex="-1" aria-labelledby="customerHistoryModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="customerHistoryModalLabel">
          <i class="fas fa-history me-2"></i>顧客履歴
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="customerHistoryContent">
          <!-- 顧客履歴がここに表示されます -->
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* カスタムスタイル */
  .calendar-container {
    height: calc(100vh - 100px);
    background: #f8f9fa;
  }
  
  .calendar-header {
    background: white;
    border-bottom: 1px solid #dee2e6;
    padding: 15px 0;
  }
  
  .calendar-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .calendar-nav {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .calendar-nav button {
    background: #007bff;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
  }
  
  .calendar-nav button:hover {
    background: #0056b3;
  }
  
  .calendar-title {
    font-size: 1.5rem;
    font-weight: bold;
    color: #333;
  }
  
  .calendar-actions {
    display: flex;
    gap: 10px;
  }
  
  .btn-new-reservation {
    background: #28a745;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
  }
  
  .btn-new-reservation:hover {
    background: #218838;
  }
  
  /* FullCalendar カスタマイズ */
  .fc {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }
  
  .fc-toolbar {
    padding: 15px;
    border-bottom: 1px solid #dee2e6;
  }
  
  .fc-toolbar-title {
    font-size: 1.3rem;
    font-weight: bold;
    color: #333;
  }
  
  .fc-button {
    background: #007bff !important;
    border-color: #007bff !important;
    color: white !important;
  }
  
  .fc-button:hover {
    background: #0056b3 !important;
    border-color: #0056b3 !important;
  }
  
  .fc-button:focus {
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
  }
  
  .fc-timegrid-event {
    border-radius: 4px;
    font-size: 0.9rem;
    font-weight: 500;
  }
  
  .fc-timegrid-event.confirmed {
    background-color: #28a745 !important;
    border-color: #28a745 !important;
  }
  
  .fc-timegrid-event.pending {
    background-color: #ffc107 !important;
    border-color: #ffc107 !important;
    color: #212529 !important;
  }
  
  .fc-timegrid-event.cancelled {
    background-color: #dc3545 !important;
    border-color: #dc3545 !important;
  }
  
  .fc-timegrid-event.break {
    background-color: #6c757d !important;
    border-color: #6c757d !important;
  }
  
  /* レスポンシブ対応 */
  @media (max-width: 768px) {
    .calendar-toolbar {
      flex-direction: column;
      gap: 15px;
    }
    
    .calendar-nav {
      order: 1;
    }
    
    .calendar-title {
      order: 2;
      font-size: 1.2rem;
    }
    
    .calendar-actions {
      order: 3;
    }
  }
</style>

<script>
  // カレンダー初期化
  document.addEventListener('DOMContentLoaded', function() {
    // FullCalendarの初期化
    const calendarEl = document.getElementById('calendar');
    const calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'timeGridWeek',
      locale: 'ja',
      timeZone: 'Asia/Tokyo',
      height: 'auto',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      buttonText: {
        today: '今日',
        month: '月',
        week: '週',
        day: '日'
      },
      slotMinTime: '10:00:00',
      slotMaxTime: '20:00:00',
      slotDuration: '00:30:00',
      allDaySlot: false,
      selectable: true,
      editable: true,
      // タイムゾーン処理の設定
      eventTimeFormat: {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      },
      // ローカル時間での処理を明示的に設定
      now: new Date(),
      // 選択時の時間をローカル時間で取得
      selectMirror: true,
      eventDrop: function(info) {
        // イベントがドラッグされた時の処理
        console.log('🔄 Event dropped:', info.event);
        updateReservationTime(info.event);
      },
      eventResize: function(info) {
        // イベントがリサイズされた時の処理
        console.log('📏 Event resized:', info.event);
        updateReservationTime(info.event);
      },
      eventClick: function(info) {
        openReservationModal(info.event);
      },
      select: function(info) {
        openNewReservationModal(info.start, info.end);
      },
             events: function(info, successCallback, failureCallback) {
         console.log('🔍 Fetching events for:', info.startStr, 'to', info.endStr);
         
         fetch(`/admin/reservations?start=${info.startStr}&end=${info.endStr}`, {
           headers: {
             'Accept': 'application/json',
             'Content-Type': 'application/json'
           }
         })
           .then(response => {
             console.log('📡 Response status:', response.status);
             console.log('📡 Response headers:', response.headers);
             console.log('📡 Response URL:', response.url);
             
             if (!response.ok) {
               return response.text().then(text => {
                 console.error('❌ HTTP Error Response:', text);
                 throw new Error(`HTTP error! status: ${response.status}, body: ${text.substring(0, 200)}`);
               });
             }
             
             return response.text().then(text => {
               console.log('📄 Raw response:', text);
               try {
                 return JSON.parse(text);
               } catch (e) {
                 console.error('❌ JSON parse error:', e);
                 console.error('❌ Raw text that failed to parse:', text);
                 throw new Error('Invalid JSON response');
               }
             });
           })
           .then(data => {
             console.log('✅ Parsed events:', data);
             successCallback(data);
           })
           .catch(error => {
             console.error('❌ Error fetching events:', error);
             
             // エラー時にダミーデータを表示
             console.log('🔄 Showing fallback data due to error');
             const fallbackEvents = [
               {
                 id: 'fallback-1',
                 title: 'テスト予約 - 60分コース',
                 start: new Date().toISOString(),
                 end: new Date(Date.now() + 60 * 60 * 1000).toISOString(),
                 backgroundColor: '#28a745',
                 borderColor: '#28a745',
                 textColor: 'white',
                 extendedProps: {
                   status: 'confirmed',
                   course: '60分コース',
                   memo: 'テスト用データ',
                   customer: {
                     id: null,
                     name: 'テストユーザー',
                     kana: null,
                     phone: '090-1234-5678',
                     email: 'test@example.com',
                     birth_date: null
                   }
                 }
               }
             ];
             successCallback(fallbackEvents);
           });
       }
    });
    
    calendar.render();
    
    // ナビゲーションボタン
    document.getElementById('prevBtn').addEventListener('click', () => {
      calendar.prev();
    });
    
    document.getElementById('nextBtn').addEventListener('click', () => {
      calendar.next();
    });
    
    document.getElementById('todayBtn').addEventListener('click', () => {
      calendar.today();
    });
    
    // 新規予約ボタン
    document.getElementById('newReservationBtn').addEventListener('click', () => {
      openNewReservationModal();
    });
    
    // モーダル関連
    const reservationModal = new bootstrap.Modal(document.getElementById('reservationModal'));
    const customerHistoryModal = new bootstrap.Modal(document.getElementById('customerHistoryModal'));
    
    function openReservationModal(event) {
      // 既存の予約を編集モードで開く
      document.getElementById('reservationModalLabel').innerHTML = '<i class="fas fa-edit me-2"></i>予約編集';
      document.getElementById('deleteReservationBtn').style.display = 'block';
      
      // フォームに値を設定
      if (event) {
        // 予約IDを設定
        document.getElementById('currentReservationId').value = event.id;
        
        document.getElementById('customerName').value = event.title.split(' - ')[0] || '';
        
        // FullCalendarのイベント時間は既にローカル時間
        const localStart = new Date(event.start);
        
        console.log('🕐 Edit reservation time:', {
          original: event.start,
          localStart: localStart,
          isoString: localStart.toISOString(),
          localTimeString: localStart.toLocaleTimeString('ja-JP', { 
            hour: '2-digit', 
            minute: '2-digit',
            hour12: false 
          })
        });
        
        document.getElementById('reservationDate').value = localStart.toISOString().split('T')[0];
        document.getElementById('reservationTime').value = localStart.toLocaleTimeString('ja-JP', { 
          hour: '2-digit', 
          minute: '2-digit',
          hour12: false 
        });
        document.getElementById('reservationCourse').value = event.title.split(' - ')[1] || '';
        document.getElementById('reservationMemo').value = event.extendedProps?.note || '';
        
        // 顧客情報を設定
        if (event.extendedProps?.customer) {
          const customer = event.extendedProps.customer;
          document.getElementById('customerPhone').value = customer.phone || '';
          document.getElementById('customerKana').value = customer.kana || '';
          document.getElementById('customerBirthDate').value = customer.birth_date || '';
          
          // チケット情報を取得
          loadCustomerTickets(customer.id);
        }
      }
      
      reservationModal.show();
    }
    
    function openNewReservationModal(start, end) {
      // 新規予約モードで開く
      document.getElementById('reservationModalLabel').innerHTML = '<i class="fas fa-calendar-plus me-2"></i>新規予約';
      document.getElementById('deleteReservationBtn').style.display = 'none';
      
      // フォームをリセット
      document.getElementById('reservationForm').reset();
      
      // 予約IDをクリア
      document.getElementById('currentReservationId').value = '';
      
      // 日時を設定
      if (start) {
        // FullCalendarの時間は既にローカル時間なので、そのまま使用
        const localDate = new Date(start);
        
        console.log('🕐 New reservation time:', {
          original: start,
          localDate: localDate,
          isoString: localDate.toISOString(),
          localTimeString: localDate.toLocaleTimeString('ja-JP', { 
            hour: '2-digit', 
            minute: '2-digit',
            hour12: false 
          })
        });
        
        document.getElementById('reservationDate').value = localDate.toISOString().split('T')[0];
        document.getElementById('reservationTime').value = localDate.toLocaleTimeString('ja-JP', { 
          hour: '2-digit', 
          minute: '2-digit',
          hour12: false 
        });
      }
      
      reservationModal.show();
    }
    
    // イベントの時間更新機能
    function updateReservationTime(event) {
      const reservationId = event.id;
      const newStart = event.start;
      const newEnd = event.end;
      
      console.log('🔄 Updating reservation time:', {
        id: reservationId,
        start: newStart,
        end: newEnd
      });
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      // ローカル時間をISO文字列に変換（タイムゾーン情報付き）
      const startISO = newStart.toISOString();
      const endISO = newEnd.toISOString();
      
      console.log('🕐 Time conversion:', {
        originalStart: newStart,
        originalEnd: newEnd,
        startISO: startISO,
        endISO: endISO
      });
      
      // 時間更新APIを呼び出し
      fetch(`/admin/reservations/${reservationId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({
          reservation: {
            start_time: startISO,
            end_time: endISO
          }
        })
      })
      .then(response => {
        console.log('📡 Update response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || '時間の更新に失敗しました');
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ Time update response:', data);
        
        if (data.success) {
          showMessage('予約時間を更新しました', 'success');
          
          // 成功時もカレンダーを再読み込みして最新データを表示
          setTimeout(() => {
            calendar.refetchEvents();
          }, 500);
        } else {
          throw new Error(data.error || '時間の更新に失敗しました');
        }
      })
      .catch(error => {
        console.error('❌ Time update error:', error);
        showMessage('時間の更新に失敗しました: ' + error.message, 'danger');
        
        // エラー時はカレンダーを再読み込み
        calendar.refetchEvents();
      });
    }
    
    function loadCustomerTickets(customerId) {
      if (!customerId) return;
      
      fetch(`/admin/users/${customerId}/tickets`)
        .then(response => response.json())
        .then(tickets => {
          const ticketInfo = document.getElementById('ticketInfo');
          if (tickets.length > 0) {
            let html = '<div class="row">';
            tickets.forEach(ticket => {
              const statusClass = ticket.status === 'expired' ? 'text-danger' : 
                                ticket.status === 'low' ? 'text-warning' : 'text-success';
              html += `
                <div class="col-md-6 mb-2">
                  <div class="card">
                    <div class="card-body p-2">
                      <h6 class="card-title mb-1">${ticket.name}</h6>
                                             <p class="card-text mb-1">
                         <small class="text-muted">
                           残り: ${ticket.remaining}/${ticket.total}回
                         </small>
                       </p>
                       <p class="card-text mb-1">
                         <small class="text-muted">
                           期限: ${ticket.expires_at || 'なし'}
                         </small>
                       </p>
                       <p class="card-text mb-0">
                         <small class="${statusClass}">
                           ${ticket.status === 'expired' ? '期限切れ' : 
                             ticket.status === 'low' ? '残り少ない' : '利用可能'}
                         </small>
                       </p>
                    </div>
                  </div>
                </div>
              `;
            });
            html += '</div>';
            ticketInfo.innerHTML = html;
          } else {
            ticketInfo.innerHTML = '<div class="text-muted">チケットがありません</div>';
          }
        })
        .catch(error => {
          console.error('Error loading tickets:', error);
          document.getElementById('ticketInfo').innerHTML = '<div class="text-danger">チケット情報の取得に失敗しました</div>';
        });
    }
    
    // 保存ボタン
    document.getElementById('saveReservationBtn').addEventListener('click', function() {
      // フォームのバリデーション
      const form = document.getElementById('reservationForm');
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }
      
      // ボタンを無効化
      const saveBtn = this;
      const originalText = saveBtn.innerHTML;
      saveBtn.disabled = true;
      saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>保存中...';
      
      // 現在の予約IDを取得
      const reservationId = getCurrentReservationId();
      const isEditMode = reservationId && reservationId !== '';
      
      // 予約データを作成
      const reservationData = {
        reservation: {
          name: document.getElementById('customerName').value,
          date: document.getElementById('reservationDate').value,
          time: document.getElementById('reservationTime').value,
          course: document.getElementById('reservationCourse').value,
          note: document.getElementById('reservationMemo').value
        }
      };
      
      console.log('💾 Saving reservation:', reservationData);
      console.log('📝 Edit mode:', isEditMode);
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      // API URLとメソッドを決定
      const url = isEditMode ? `/admin/reservations/${reservationId}` : '/admin/reservations';
      const method = isEditMode ? 'PATCH' : 'POST';
      
      // APIを呼び出し
      fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify(reservationData)
      })
      .then(response => {
        console.log('📡 Save response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || '保存に失敗しました');
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ Save response:', data);
        
        if (data.success) {
          // 成功メッセージを表示
          const message = isEditMode ? '予約を更新しました' : '予約を作成しました';
          showMessage(message, 'success');
          
          // モーダルを閉じる
          reservationModal.hide();
          
          // カレンダーを更新
          calendar.refetchEvents();
        } else {
          throw new Error(data.error || '保存に失敗しました');
        }
      })
      .catch(error => {
        console.error('❌ Save error:', error);
        alert('保存エラー: ' + error.message);
      })
      .finally(() => {
        // ボタンを元に戻す
        saveBtn.disabled = false;
        saveBtn.innerHTML = originalText;
      });
    });
    
    // 削除ボタン
    document.getElementById('deleteReservationBtn').addEventListener('click', function() {
      if (!confirm('この予約を削除しますか？\n削除した予約は復元できません。')) {
        return;
      }
      
      // ボタンを無効化
      const deleteBtn = this;
      const originalText = deleteBtn.innerHTML;
      deleteBtn.disabled = true;
      deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>削除中...';
      
      // 現在の予約IDを取得（モーダルから）
      const reservationId = getCurrentReservationId();
      
      if (!reservationId) {
        alert('削除する予約が選択されていません');
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = originalText;
        return;
      }
      
      console.log('🗑️ Deleting reservation:', reservationId);
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      // 削除APIを呼び出し
      fetch(`/admin/reservations/${reservationId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        }
      })
      .then(response => {
        console.log('📡 Delete response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || '削除に失敗しました');
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ Delete response:', data);
        
        if (data.success) {
          // 成功メッセージを表示
          showMessage('予約を削除しました', 'success');
          
          // モーダルを閉じる
          reservationModal.hide();
          
          // カレンダーを更新
          calendar.refetchEvents();
        } else {
          throw new Error(data.error || '削除に失敗しました');
        }
      })
      .catch(error => {
        console.error('❌ Delete error:', error);
        alert('削除エラー: ' + error.message);
      })
      .finally(() => {
        // ボタンを元に戻す
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = originalText;
      });
    });
    
    // 現在の予約IDを取得する関数
    function getCurrentReservationId() {
      // モーダルから予約IDを取得する方法を実装
      // 例: モーダルに隠しフィールドがある場合
      const hiddenField = document.getElementById('currentReservationId');
      return hiddenField ? hiddenField.value : null;
    }
    
    // メッセージ表示関数
    function showMessage(message, type = 'info') {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
      alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      
      // ページの上部に表示
      const container = document.querySelector('.calendar-container');
      container.insertBefore(alertDiv, container.firstChild);
      
      // 3秒後に自動で消す
      setTimeout(() => {
        alertDiv.remove();
      }, 3000);
    }
  });
</script>