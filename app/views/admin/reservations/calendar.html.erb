<% content_for :title, "予約カレンダー - Mobilis" %>

<div class="calendar-container">
  <div class="card shadow-sm border-0 mb-4">
    <div class="card-body py-4">
      <div class="row align-items-center" style="min-height: 200px;">
        <!-- 左側：タイトル -->
        <div class="col-lg-4 col-md-6 mb-3 mb-md-0">
          <h1 class="h2 mb-0 text-primary" style="padding-left: 60px;">
            <i class="fas fa-calendar-alt me-2"></i>予約カレンダー
          </h1>
        </div>
        
        <!-- 中央：ミニカレンダー -->
        <div class="col-lg-4 col-md-6 d-flex justify-content-center align-items-center mb-3 mb-md-0">
          <div id="monthCalendar">
            <!-- 年と月の表示とナビゲーション -->
            <div class="mini-calendar-header" style="background: #f8f9fa; border-bottom: 1px solid #dee2e6; border-radius: 4px; display: flex; align-items: center; justify-content: space-between;">
              <button id="prevMonthBtn" class="mini-calendar-nav-btn" style="background: transparent; border: none; color: #6c757d; font-size: 0.5rem; padding: 2px; cursor: pointer;">
                <i class="fas fa-chevron-left"></i>
              </button>
              <div id="currentMonthYear" class="mini-calendar-title" style="font-size: 0.6rem; font-weight: 600; color: #495057; text-align: center; flex: 1; cursor: pointer;">
                <!-- 年と月がここに表示される -->
              </div>
              <button id="nextMonthBtn" class="mini-calendar-nav-btn" style="background: transparent; border: none; color: #6c757d; font-size: 0.5rem; padding: 2px; cursor: pointer;">
                <i class="fas fa-chevron-right"></i>
              </button>
            </div>
            <div id="monthCalendarContent"></div>
          </div>
        </div>
        
        <!-- 右側：アクションボタン -->
        <div class="col-lg-4 col-md-12">
          <div class="d-flex flex-column gap-3">
            <!-- 営業時間ステータス表示 -->
            <div class="business-status-card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px; border-radius: 10px; margin-bottom: 15px;">
              <div class="d-flex align-items-center justify-content-between">
                <div>
                  <h6 class="mb-1" style="margin: 0; font-weight: 600;">
                    <i class="fas fa-clock me-2"></i>営業時間
                  </h6>
                  <div class="business-hours-display" style="font-size: 0.9rem; opacity: 0.9;">
                    <%= ApplicationSetting.current.formatted_business_hours %>
                  </div>
                </div>
                <div class="business-status-indicator" style="text-align: center;">
                  <div class="status-dot <%= ApplicationSetting.current.currently_open? ? 'open' : 'closed' %>" 
                       style="width: 12px; height: 12px; border-radius: 50%; margin: 0 auto 5px; background: <%= ApplicationSetting.current.currently_open? ? '#007bff' : '#6c757d' %>;"></div>
                  <div style="font-size: 0.8rem; font-weight: 500;">
                    <%= ApplicationSetting.current.currently_open? ? '営業中' : '営業時間外' %>
                  </div>
                </div>
              </div>
            </div>
            
            <a href="<%= admin_reservations_path %>" class="btn btn-primary btn-lg shadow-sm">
              <i class="fas fa-list me-2"></i>📋 今日の予約一覧
            </a>
            <div class="d-flex gap-3">
              <button id="newReservationBtn" class="btn btn-success btn-lg">
                <i class="fas fa-plus me-2"></i>新規予約
              </button>
              <button id="shiftSettingsBtn" class="btn btn-info btn-lg">
                <i class="fas fa-clock me-2"></i>シフト設定
              </button>
              <button id="testHighlightBtn" class="btn btn-warning btn-lg">
                <i class="fas fa-paint-brush me-2"></i>テスト背景色
              </button>
              <button class="btn btn-outline-danger btn-lg" onclick="openCancelledHistoryModal()">
                <i class="fas fa-times-circle me-2"></i>キャンセル履歴
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>  

<div class="container-fluid" style="margin-top: 20px; margin-bottom: 20px;">
  <div id="calendar" class="shift-highlight-enabled"></div>
</div>

<!-- シフト設定モーダル -->
<div class="modal fade" id="shiftSettingsModal" tabindex="-1" aria-labelledby="shiftSettingsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="shiftSettingsModalLabel">
          <i class="fas fa-clock me-2"></i>営業時間設定
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="shiftSettingsForm">
          <!-- 日付選択 -->
          <div class="mb-3">
            <label for="shiftDate" class="form-label">
              <i class="fas fa-calendar me-2"></i>日付
            </label>
            <input type="date" class="form-control" id="shiftDate" required>
          </div>
          
          <!-- 営業状態 -->
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="shiftIsOpen" checked>
              <label class="form-check-label" for="shiftIsOpen">
                <i class="fas fa-store me-2"></i>営業する
              </label>
            </div>
          </div>
          
          <!-- 営業時間 -->
          <div class="row">
            <div class="col-md-6">
              <label for="shiftStartTime" class="form-label">
                <i class="fas fa-sun me-2"></i>開始時間
              </label>
              <input type="time" class="form-control" id="shiftStartTime" value="10:00" required>
            </div>
            <div class="col-md-6">
              <label for="shiftEndTime" class="form-label">
                <i class="fas fa-moon me-2"></i>終了時間
              </label>
              <input type="time" class="form-control" id="shiftEndTime" value="20:00" required>
            </div>
          </div>
          
          <!-- プレビュー -->
          <div class="mt-3 p-3 bg-light rounded">
            <h6 class="mb-2">
              <i class="fas fa-eye me-2"></i>プレビュー
            </h6>
            <div id="shiftPreview" class="text-muted">
              選択した日付の営業時間がここに表示されます
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-2"></i>キャンセル
        </button>
        <button type="button" class="btn btn-primary" id="saveShiftBtn">
          <i class="fas fa-save me-2"></i>保存
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* ==============================================
   CLEAN CALENDAR STYLING - 2025-01-27
   ============================================== */
:root {
  /* カラー */
  --primary-color: #007bff;
  --success-color: #28a745;
  --warning-color: #ffc107;
  --danger-color: #dc3545;
  --info-color: #17a2b8;
  --secondary-color: #6c757d;
  
  /* 背景色 */
  --bg-primary: #ffffff;
  --bg-secondary: #f8f9fa;
  --bg-light: #f8f9fa;
  
  /* ボーダー */
  --border-light: #e9ecef;
  --border-medium: #dee2e6;
  
  /* シャドウ */
  --shadow-light: 0 2px 8px rgba(0,0,0,0.15);
  
  /* サイズ */
  --slot-height: 30px;
  --border-radius: 8px;
}
  --border-radius-xl: 20px;
  
  /* トランジション */
  --transition-fast: 0.2s ease;
  --transition-normal: 0.3s ease;
  --transition-slow: 0.5s ease;
}

/* ==============================================
   共通スタイル
   ============================================== */
.fc {
  background: #ffffff;
  border-radius: var(--border-radius-xl);
  box-shadow: var(--shadow-heavy);
  border: 2px solid var(--border-primary);
  margin: 0 auto;
  max-width: 1400px;
  position: relative;
  overflow: hidden;
  animation: slideInUp 0.8s ease-out;
}

.fc::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
  pointer-events: none;
  z-index: 1;
}

.fc-view-harness {
  background: #ffffff;
  border-radius: 18px;
  position: relative;
  z-index: 2;
}

/* ==============================================
   ツールバー
   ============================================== */
.fc-toolbar {
  padding: 8px 0;
  border-bottom: 2px solid var(--border-primary);
  background: #ffffff;
  position: relative;
  z-index: 2;
  width: 100%;
  max-width: 100%;
  margin: 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.fc-toolbar-chunk {
  display: flex;
  align-items: center;
  gap: 10px;
  flex: 1;
  justify-content: center;
}

.fc-toolbar::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent, var(--border-primary), transparent);
}

.fc-toolbar-title {
  font-size: 2rem;
  font-weight: 800;
  color: #1e293b;
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* ==============================================
   ボタン
   ============================================== */
.fc-button {
  background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%) !important;
  border: none !important;
  color: white !important;
  border-radius: var(--border-radius-lg) !important;
  font-weight: 600 !important;
  padding: 16px 20px !important;
  transition: all var(--transition-normal) !important;
  box-shadow: var(--shadow-light) !important;
  position: relative !important;
  overflow: hidden !important;
  margin: 8px 0 !important;
}

.fc-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left var(--transition-slow);
}

.fc-button:hover::before {
  left: 100%;
}

.fc-button:hover {
  background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-darker) 100%) !important;
  transform: translateY(-3px) !important;
  box-shadow: 0 6px 20px rgba(0,0,0,0.2) !important;
}

.fc-button:focus {
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
}

.fc-button-active {
  background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-darker) 100%) !important;
  box-shadow: 0 4px 12px rgba(0,0,0,0.2) !important;
}

/* ==============================================
   タイムグリッド
   ============================================== */
.fc-timegrid-slot {
  height: var(--slot-height) !important;
  min-height: var(--slot-height) !important;
  max-height: var(--slot-height) !important;
  border-top: 1px solid var(--border-light) !important;
  transition: background-color var(--transition-fast);
}

.fc-timegrid-slot[data-time$=":30:00"] {
  border-top: 2px solid var(--border-medium) !important;
}

.fc-timegrid-slot[data-time$=":00:00"] {
  border-top: 3px solid var(--border-dark) !important;
}

.fc-timegrid-slots table {
  height: 100% !important;
}

.fc-timegrid-axis-frame {
  height: var(--slot-height) !important;
  min-height: var(--slot-height) !important;
}

.fc-timegrid-slot-label {
  font-size: 0.75rem !important;
  padding: 2px 4px !important;
  color: #4a5568 !important;
}

.fc-timegrid-axis {
  font-size: 12px;
  border-right: 2px solid var(--border-medium) !important;
  min-width: 80px;
}

.fc-timegrid-col-frame {
  border-right: 1px solid var(--border-primary) !important;
}

/* ==============================================
   営業時間外（動的）
   ============================================== */
.fc-timegrid-slot.business-hour-inactive {
  opacity: 0.7;
  position: relative;
  pointer-events: none;
}

.fc-timegrid-axis.business-hour-inactive {
  color: #6c757d !important;
  font-style: italic;
  font-weight: normal;
}

/* 営業時間内（動的） */
.fc-timegrid-slot.business-hour-active {
  opacity: 1;
  position: relative;
  pointer-events: auto;
}

.fc-timegrid-axis.business-hour-active {
  color: #212529 !important;
  font-weight: 600;
}

/* ==============================================
   営業時間ラベル（動的）
   ============================================== */
.fc-timegrid-slot.business-start-time {
  border-top: 3px solid var(--success-color) !important;
  position: relative;
}

.fc-timegrid-slot.business-end-time {
  border-top: 3px solid var(--danger-color) !important;
  position: relative;
}

.fc-timegrid-slot.business-start-time::before {
  content: "営業開始";
  position: absolute;
  left: 5px;
  top: -15px;
  background: var(--success-color);
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 11px;
  font-weight: bold;
  z-index: 10;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

.fc-timegrid-slot.business-end-time::before {
  content: "営業終了";
  position: absolute;
  left: 5px;
  top: -15px;
  background: var(--danger-color);
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 11px;
  font-weight: bold;
  z-index: 10;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* ==============================================
   ホバー効果（動的）
   ============================================== */
.fc-timegrid-slot.business-hour-active:hover {
  cursor: pointer;
}

.fc-timegrid-slot.business-hour-inactive:hover {
  cursor: not-allowed;
}

/* ==============================================
   イベント基本スタイル
   ============================================== */
.fc-timegrid-event {
  border-radius: var(--border-radius) !important;
  font-size: 0.8rem !important;
  font-weight: 600 !important;
  box-shadow: var(--shadow-light) !important;
  transition: all var(--transition-normal) !important;
  border: 2px solid transparent !important;
  margin: 1px !important;
  overflow: hidden !important;
  position: relative !important;
  height: auto !important;
}

.fc-timegrid-event::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
  pointer-events: none;
  z-index: 1;
}

.fc-timegrid-event:hover {
  box-shadow: var(--shadow-medium) !important;
  transform: translateX(2px) !important;
  z-index: 1000 !important;
}

/* ==============================================
   イベント高さ設定
   ============================================== */
.fc-timegrid-event[data-duration="40"] { height: 120px !important; min-height: 120px !important; }
.fc-timegrid-event[data-duration="45"] { height: 135px !important; min-height: 135px !important; }
.fc-timegrid-event[data-duration="50"] { height: 150px !important; min-height: 150px !important; }
.fc-timegrid-event[data-duration="55"] { height: 165px !important; min-height: 165px !important; }
.fc-timegrid-event[data-duration="60"] { height: 180px !important; min-height: 180px !important; }
.fc-timegrid-event[data-duration="65"] { height: 195px !important; min-height: 195px !important; }
.fc-timegrid-event[data-duration="70"] { height: 210px !important; min-height: 210px !important; }
.fc-timegrid-event[data-duration="75"] { height: 225px !important; min-height: 225px !important; }
.fc-timegrid-event[data-duration="80"] { height: 240px !important; min-height: 240px !important; }
.fc-timegrid-event[data-duration="85"] { height: 255px !important; min-height: 255px !important; }
.fc-timegrid-event[data-duration="90"] { height: 270px !important; min-height: 270px !important; }
.fc-timegrid-event[data-duration="95"] { height: 285px !important; min-height: 285px !important; }
.fc-timegrid-event[data-duration="100"] { height: 300px !important; min-height: 300px !important; }

/* ==============================================
   イベントタブ
   ============================================== */
.fc-timegrid-event .event-tab-container {
  height: 100% !important;
  display: flex !important;
  flex-direction: column !important;
  width: 100% !important;
}

.fc-timegrid-event .event-tab {
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  font-weight: 600 !important;
  text-align: center !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
  transition: all var(--transition-fast) !important;
  border: none !important;
}

.fc-timegrid-event .event-tab.course {
  background: inherit !important;
  color: inherit !important;
  border-bottom: 1px solid rgba(255, 255, 255, 0.3) !important;
}

.fc-timegrid-event .event-tab.interval {
  color: white !important;
  font-weight: 500 !important;
}

.fc-timegrid-event .event-tab.interval.individual {
  background-color: var(--orange-color) !important;
  font-weight: 600 !important;
}

.fc-timegrid-event .event-tab.interval.system {
  background-color: var(--secondary-color) !important;
}

/* ==============================================
   ステータス別色分け
   ============================================== */
.fc-timegrid-event.confirmed {
  background: linear-gradient(135deg, var(--success-color) 0%, var(--success-light) 100%) !important;
  border: 2px solid var(--success-color) !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(0, 123, 255, 0.3) !important;
}

.fc-timegrid-event.tentative {
  background: linear-gradient(135deg, var(--warning-color) 0%, var(--warning-light) 100%) !important;
  border: 2px solid var(--warning-color) !important;
  color: #212529 !important;
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.3) !important;
}

.fc-timegrid-event.cancelled {
  background: linear-gradient(135deg, var(--danger-color) 0%, var(--danger-dark) 100%) !important;
  border: 2px solid var(--danger-color) !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(108, 117, 125, 0.3) !important;
}

.fc-timegrid-event.completed {
  background: linear-gradient(135deg, var(--purple-color) 0%, var(--purple-dark) 100%) !important;
  border: 2px solid var(--purple-color) !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(111, 66, 193, 0.3) !important;
}

.fc-timegrid-event.no_show {
  background: linear-gradient(135deg, var(--secondary-color) 0%, var(--secondary-dark) 100%) !important;
  border: 2px solid var(--secondary-color) !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(108, 117, 125, 0.3) !important;
}

.fc-timegrid-event.break {
  background: linear-gradient(135deg, var(--info-color) 0%, var(--info-dark) 100%) !important;
  border: 2px solid var(--info-color) !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(23, 162, 184, 0.3) !important;
}

/* ==============================================
   インターバル表示
   ============================================== */
.fc-timegrid-event.has-interval .event-tab.interval.individual::before {
  content: "⚙️ ";
  font-size: 0.6em;
  margin-right: 2px;
}

.fc-timegrid-event.has-interval .event-tab.interval.system::before {
  content: "🔧 ";
  font-size: 0.6em;
  margin-right: 2px;
}

.fc-timegrid-event.has-interval:hover::after {
  content: attr(data-interval-info);
  position: absolute;
  top: -30px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.9);
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.7rem;
  white-space: nowrap;
  z-index: 10000;
  pointer-events: none;
}

/* ==============================================
   日付ヘッダー
   ============================================== */
.fc-col-header-cell,
.fc-day-header {
  cursor: pointer !important;
  transition: background-color var(--transition-fast);
}

.fc-col-header-cell:hover,
.fc-day-header:hover {
  background-color: var(--bg-light) !important;
}

.fc-col-header-cell:active,
.fc-day-header:active {
  background-color: #e9ecef !important;
}

.fc-day-header {
  user-select: none !important;
}

/* ==============================================
   アニメーション
   ============================================== */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.calendar-container {
  animation: fadeInUp 0.6s ease-out;
}

/* ==============================================
   レスポンシブ対応
   ============================================== */
@media (max-width: 1024px) {
  .fc {
    margin: 0 auto;
    border-radius: 16px;
  }
  
  .fc-toolbar {
    padding: 8px 0;
    width: 100%;
    max-width: 100%;
  }
  
  .fc-toolbar-title {
    font-size: 1.6rem;
  }
}

@media (max-width: 768px) {
  :root {
    --slot-height: 35px;
  }
  
  .fc-timegrid-event[data-duration="40"] { height: 140px !important; min-height: 140px !important; }
  .fc-timegrid-event[data-duration="45"] { height: 157px !important; min-height: 157px !important; }
  .fc-timegrid-event[data-duration="50"] { height: 175px !important; min-height: 175px !important; }
  .fc-timegrid-event[data-duration="55"] { height: 192px !important; min-height: 192px !important; }
  .fc-timegrid-event[data-duration="60"] { height: 210px !important; min-height: 210px !important; }
  .fc-timegrid-event[data-duration="65"] { height: 227px !important; min-height: 227px !important; }
  .fc-timegrid-event[data-duration="70"] { height: 245px !important; min-height: 245px !important; }
  .fc-timegrid-event[data-duration="75"] { height: 262px !important; min-height: 262px !important; }
  .fc-timegrid-event[data-duration="80"] { height: 280px !important; min-height: 280px !important; }
  .fc-timegrid-event[data-duration="85"] { height: 297px !important; min-height: 297px !important; }
  .fc-timegrid-event[data-duration="90"] { height: 315px !important; min-height: 315px !important; }
  .fc-timegrid-event[data-duration="95"] { height: 332px !important; min-height: 332px !important; }
  .fc-timegrid-event[data-duration="100"] { height: 350px !important; min-height: 350px !important; }
  
  .fc-timegrid-event .event-tab {
    font-size: 0.7rem !important;
    padding: 1px 2px !important;
  }
  
  .fc {
    margin: 15px auto;
    border-radius: 12px;
  }
  
  .fc-toolbar {
    padding: 8px 0;
    width: 100%;
    max-width: 100%;
  }
  
  .fc-toolbar-title {
    font-size: 1.4rem;
  }
}

@media (max-width: 480px) {
  :root {
    --slot-height: 30px;
  }
  
  .fc-timegrid-event[data-duration="40"] { height: 120px !important; min-height: 120px !important; }
  .fc-timegrid-event[data-duration="45"] { height: 135px !important; min-height: 135px !important; }
  .fc-timegrid-event[data-duration="50"] { height: 150px !important; min-height: 150px !important; }
  .fc-timegrid-event[data-duration="55"] { height: 165px !important; min-height: 165px !important; }
  .fc-timegrid-event[data-duration="60"] { height: 180px !important; min-height: 180px !important; }
  .fc-timegrid-event[data-duration="65"] { height: 195px !important; min-height: 195px !important; }
  .fc-timegrid-event[data-duration="70"] { height: 210px !important; min-height: 210px !important; }
  .fc-timegrid-event[data-duration="75"] { height: 225px !important; min-height: 225px !important; }
  .fc-timegrid-event[data-duration="80"] { height: 240px !important; min-height: 240px !important; }
  .fc-timegrid-event[data-duration="85"] { height: 255px !important; min-height: 255px !important; }
  .fc-timegrid-event[data-duration="90"] { height: 270px !important; min-height: 270px !important; }
  .fc-timegrid-event[data-duration="95"] { height: 285px !important; min-height: 285px !important; }
  .fc-timegrid-event[data-duration="100"] { height: 300px !important; min-height: 300px !important; }
  
  .fc-timegrid-event .event-tab {
    font-size: 0.65rem !important;
    padding: 1px !important;
  }

  .fc {
    margin: 10px auto;
    border-radius: 10px;
  }
  
  .fc-toolbar {
    padding: 12px 15px;
  }
  
  .fc-toolbar-title {
    font-size: 1.2rem;
  }
}

/* ==============================================
   アクセシビリティ
   ============================================== */
@media (prefers-contrast: high) {
  .fc-timegrid-event {
    border-width: 3px !important;
  }
  
  .fc-button {
    border: 2px solid currentColor !important;
  }
}

@media (prefers-color-scheme: dark) {
  .fc {
    background: linear-gradient(135deg, var(--bg-dark) 0%, var(--bg-darker) 100%) !important;
    border-color: #4a5568 !important;
  }
  
  .fc-toolbar {
    background: linear-gradient(135deg, var(--bg-dark) 0%, var(--bg-darker) 100%) !important;
    border-bottom-color: #4a5568 !important;
  }
  
  .fc-toolbar-title {
    color: #e2e8f0 !important;
  }
}

/* ==============================================
   フォーカス・ドラッグ状態
   ============================================== */
.fc-timegrid-event:focus,
.fc-timegrid-event:focus-visible {
  outline: 3px solid var(--primary-color);
  outline-offset: 2px;
  z-index: 1001;
}

.fc-timegrid-event.fc-event-selected {
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.3) !important;
  z-index: 1002 !important;
}

.fc-timegrid-event.fc-event-dragging {
  opacity: 0.7 !important;
  transform: rotate(3deg) !important;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3) !important;
  z-index: 1003 !important;
}

.fc-timegrid-event.fc-event-resizing {
  opacity: 0.8 !important;
  box-shadow: 0 4px 20px rgba(0, 123, 255, 0.4) !important;
}

/* ==============================================
   パフォーマンス最適化
   ============================================== */
.fc-timegrid-event {
  will-change: transform, opacity;
}

.fc-timegrid-event:hover {
  will-change: transform, box-shadow;
}

.fc-timegrid-event,
.fc-button {
  transform: translateZ(0);
  backface-visibility: hidden;
}

/* ==============================================
   スクロールバー
   ============================================== */
.fc-timegrid::-webkit-scrollbar {
  width: 8px;
}

.fc-timegrid::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.fc-timegrid::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
  border-radius: 4px;
}

.fc-timegrid::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-darker) 100%);
}

/* ==============================================
   シフト設定モーダル（スクエア風）
   ============================================== */
#shiftSettingsModal .modal-dialog {
  max-width: 600px;
}

#shiftSettingsModal .modal-header {
  border-bottom: 1px solid #e9ecef;
  padding: 1rem 1.5rem;
}

#shiftSettingsModal .modal-title {
  font-size: 1.1rem;
  font-weight: 600;
  color: #333;
}

#shiftSettingsModal .modal-body {
  padding: 1.5rem;
}

#shiftSettingsModal .nav-tabs {
  border-bottom: 1px solid #e9ecef;
}

#shiftSettingsModal .nav-tabs .nav-link {
  border: none;
  color: #6c757d;
  font-weight: 500;
  padding: 0.75rem 1rem;
}

#shiftSettingsModal .nav-tabs .nav-link.active {
  color: #007bff;
  border-bottom: 2px solid #007bff;
  background: none;
}

/* 日付範囲表示 */
.date-range-display {
  display: flex;
  align-items: center;
  font-weight: 600;
  color: #333;
}

.date-range-display span {
  font-size: 1rem;
}

/* 日別設定アイテム */
.daily-setting-item {
  display: flex;
  align-items: center;
  padding: 1rem 0;
  border-bottom: 1px solid #f8f9fa;
}

.daily-setting-item:last-child {
  border-bottom: none;
}

.daily-setting-item .day-info {
  flex: 1;
  display: flex;
  align-items: center;
}

.daily-setting-item .day-checkbox {
  margin-right: 1rem;
}

.daily-setting-item .day-label {
  font-weight: 500;
  color: #333;
  min-width: 120px;
}

.daily-setting-item .time-inputs {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex: 1;
}

.daily-setting-item .time-input {
  width: 80px;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 0.375rem 0.5rem;
  font-size: 0.9rem;
}

.daily-setting-item .time-input:disabled {
  background-color: #f8f9fa;
  color: #6c757d;
}

.daily-setting-item .time-separator {
  color: #6c757d;
  font-weight: 500;
}

.daily-setting-item .action-buttons {
  display: flex;
  gap: 0.25rem;
  margin-left: 1rem;
}

.daily-setting-item .btn-icon {
  width: 32px;
  height: 32px;
  border: 1px solid #ddd;
  border-radius: 4px;
  background: white;
  color: #6c757d;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s;
}

.daily-setting-item .btn-icon:hover {
  background-color: #f8f9fa;
  border-color: #adb5bd;
}

.daily-setting-item .btn-icon.remove {
  color: #6c757d;
}

.daily-setting-item .btn-icon.add {
  color: #007bff;
}

/* 無効状態 */
.daily-setting-item.disabled .day-label {
  color: #6c757d;
}

.daily-setting-item.disabled .time-inputs {
  opacity: 0.5;
}

/* シフトタイプ別の色分け */
.shift-type-normal {
  background-color: var(--success-color) !important;
}

.shift-type-extended {
  background-color: var(--warning-color) !important;
}

.shift-type-shortened {
  background-color: var(--orange-color) !important;
}

.shift-type-closed {
  background-color: var(--danger-color) !important;
}

.shift-type-custom {
  background-color: var(--purple-color) !important;
}

/* レスポンシブ対応 */
@media (max-width: 768px) {
  #shiftSettingsModal .modal-dialog {
    max-width: 95%;
    margin: 10px;
  }
  
  .shift-item .row {
    flex-direction: column;
  }
  
  .shift-item .col-md-1,
  .shift-item .col-md-2,
  .shift-item .col-md-3 {
    margin-bottom: 10px;
  }
  
  .btn-group-vertical {
    flex-direction: row;
    gap: 5px;
  }
}

/* ==============================================
   営業時間の視覚的表示
   ============================================== */
.business-hour-active {
  border-right: 1px solid #e9ecef !important;
  border-top: 1px solid #e9ecef !important;
  border-bottom: 1px solid #e9ecef !important;
}

.business-hour-inactive {
  border-right: 1px solid #e9ecef !important;
  border-top: 1px solid #e9ecef !important;
  border-bottom: 1px solid #e9ecef !important;
  opacity: 0.7;
}

/* 休業日の場合はさらに暗く表示 */
.fc-daygrid-day.closed-day .fc-timegrid-slot,
.fc-daygrid-day.closed-day .fc-timegrid-slot.business-hour-inactive {
  background-color: rgba(108, 117, 125, 0.2) !important;
  border-left: 3px solid var(--danger-color) !important;
  opacity: 0.4;
}

/* 休業日の時間表示も暗く */
.fc-daygrid-day.closed-day .fc-timegrid-slot-label {
  color: var(--danger-color) !important;
  opacity: 0.6;
}

/* 休業日のスロットスタイル */
.fc-timegrid-slot.closed-day {
  background-color: rgba(108, 117, 125, 0.1) !important;
  opacity: 0.3 !important;
  pointer-events: none !important;
  position: relative;
}

/* シフト未設定の日付スタイル */
.fc-daygrid-day.no-shift {
  background-color: #000000 !important;
  color: #ffffff !important;
  opacity: 0.8 !important;
  position: relative;
}

.fc-daygrid-day.no-shift .fc-daygrid-day-number {
  color: #ffffff !important;
}

.fc-daygrid-day.no-shift:hover {
  background-color: #000000 !important;
  opacity: 1 !important;
}

.fc-daygrid-day.has-shift {
  background-color: #ffffff !important;
  border: 2px solid #dee2e6 !important;
}

.fc-daygrid-day.has-shift .fc-daygrid-day-number {
  color: #000000 !important;
}

.fc-timegrid-slot.closed-day::before {
  content: '休業日';
  position: absolute;
  top: 5px;
  left: 5px;
  background: #dc3545;
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 11px;
  font-weight: bold;
  z-index: 10;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* シフト情報ラベル */
.shift-info-label {
  position: absolute;
  top: 5px;
  right: 5px;
  background: #17a2b8;
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 11px;
  font-weight: bold;
  z-index: 10;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* 休業日ラベル */
.closed-day-label {
  position: absolute;
  top: 5px;
  left: 5px;
  background: #dc3545;
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 11px;
  font-weight: bold;
  z-index: 10;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* 営業時間の開始・終了マーカー */
.fc-timegrid-slot.business-hour-active:first-child {
  border-top: 3px solid #28a745 !important;
}

.fc-timegrid-slot.business-hour-inactive:first-child {
  border-top: 3px solid #6c757d !important;
}

/* 営業時間の時間表示 */
.fc-timegrid-slot.business-hour-active .fc-timegrid-slot-label {
  color: #000000 !important;
  font-weight: bold;
}

.fc-timegrid-slot.business-hour-inactive .fc-timegrid-slot-label {
  color: #6c757d !important;
  opacity: 0.7;
}

/* 営業時間のホバー効果 */
.fc-timegrid-slot.business-hour-active:hover {
  background-color: transparent !important;
}

.fc-timegrid-slot.business-hour-inactive:hover {
  background-color: transparent !important;
}

/* 営業時間の境界線 */
.fc-timegrid-slot.business-hour-active + .fc-timegrid-slot.business-hour-inactive,
.fc-timegrid-slot.business-hour-inactive + .fc-timegrid-slot.business-hour-active {
  border-top: 2px dashed #28a745 !important;
}

/* 営業時間のラベル */
.fc-timegrid-slot[data-time="10:00:00"].business-hour-active::before,
.fc-timegrid-slot[data-time="21:00:00"].business-hour-active::before {
  display: none; /* 動的に生成されるラベルを使用 */
}

/* 動的に生成される営業時間ラベル */
.business-start-label,
.business-end-label {
  position: absolute;
  left: 5px;
  top: -15px;
  color: white;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 11px;
  font-weight: bold;
  z-index: 10;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  animation: fadeInUp 0.3s ease-out;
}

.business-start-label {
  background: #28a745;
}

.business-end-label {
  background: #6c757d;
}

/* 営業時間ラベルのアニメーション */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* 営業時間の境界線 */
.fc-timegrid-slot.business-hour-active:first-child {
  border-top: 3px solid #28a745 !important;
}

.fc-timegrid-slot.business-hour-inactive:first-child {
  border-top: 3px solid #6c757d !important;
}

/* 営業時間の時間表示 */
.fc-timegrid-slot.business-hour-active .fc-timegrid-slot-label {
  color: #000000 !important;
  font-weight: bold;
}

.fc-timegrid-slot.business-hour-inactive .fc-timegrid-slot-label {
  color: #6c757d !important;
  opacity: 0.7;
}

/* 営業時間のホバー効果 */
.fc-timegrid-slot.business-hour-active:hover {
  background-color: transparent !important;
}

.fc-timegrid-slot.business-hour-inactive:hover {
  background-color: transparent !important;
}

/* 営業時間の境界線 */
.fc-timegrid-slot.business-hour-active + .fc-timegrid-slot.business-hour-inactive,
.fc-timegrid-slot.business-hour-inactive + .fc-timegrid-slot.business-hour-active {
  border-top: 2px dashed #28a745 !important;
}

/* 営業時間のツールチップ */
.fc-timegrid-slot.business-hour-active::after {
  content: "営業時間";
  position: absolute;
  right: 5px;
  top: 50%;
  transform: translateY(-50%);
  background: #28a745;
  color: white;
  padding: 1px 4px;
  border-radius: 2px;
  font-size: 9px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.fc-timegrid-slot.business-hour-active:hover::after {
  opacity: 1;
}

.fc-timegrid-slot.business-hour-inactive::after {
  content: "営業時間外";
  position: absolute;
  right: 5px;
  top: 50%;
  transform: translateY(-50%);
  background: var(--secondary-color);
  color: white;
  padding: 1px 4px;
  border-radius: 2px;
  font-size: 9px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.fc-timegrid-slot.business-hour-inactive:hover::after {
  opacity: 1;
}

/* レスポンシブ対応 */
@media (max-width: 768px) {
  #shiftSettingsModal .modal-dialog {
    max-width: 95%;
    margin: 10px;
  }
  
  .shift-item .row {
    flex-direction: column;
  }
  
  .shift-item .col-md-1,
  .shift-item .col-md-2,
  .shift-item .col-md-3 {
    margin-bottom: 10px;
  }
  
  .btn-group-vertical {
    flex-direction: row;
    gap: 5px;
  }
}

/* ==============================================
   月表示のシフト表示
   ============================================== */
.fc-daygrid-day {
  cursor: pointer;
  transition: all var(--transition-fast);
}

.fc-daygrid-day:hover {
  background-color: rgba(0, 123, 255, 0.1) !important;
  transform: scale(1.02);
}

.fc-daygrid-day.has-shift {
  position: relative;
}

.fc-daygrid-day.has-shift::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 2px solid transparent;
  border-radius: 4px;
  pointer-events: none;
}

.fc-daygrid-day.shift-normal::after {
  border-color: var(--success-color);
}

.fc-daygrid-day.shift-extended::after {
  border-color: var(--warning-color);
}

.fc-daygrid-day.shift-shortened::after {
  border-color: var(--orange-color);
}

.fc-daygrid-day.shift-closed::after {
  border-color: var(--danger-color);
}

.fc-daygrid-day.shift-custom::after {
  border-color: var(--purple-color);
}

/* シフトインジケーター */
.shift-indicator {
  animation: fadeInScale 0.3s ease-out;
}

@keyframes fadeInScale {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* 月表示の日付セル */
.fc-daygrid-day-frame {
  min-height: 80px;
  position: relative;
}

.fc-daygrid-day-number {
  font-weight: bold;
  color: var(--text-dark);
}

/* シフト設定がある日付の強調表示 */
.fc-daygrid-day.has-shift .fc-daygrid-day-number {
  font-weight: 900;
  text-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

/* ホバー効果の改善 */
.fc-daygrid-day:hover .shift-indicator {
  transform: scale(1.1);
  box-shadow: 0 2px 8px rgba(0,0,0,0.3);
}

/* 月表示のツールチップ */
.fc-daygrid-day.has-shift::before {
  content: attr(data-shift-info);
  position: absolute;
  top: -30px;
  left: 50%;
  transform: translateX(-50%);
  background: var(--text-dark);
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 11px;
  white-space: nowrap;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease;
  z-index: 1000;
}

.fc-daygrid-day.has-shift:hover::before {
  opacity: 1;
}

/* ==============================================
   月間シフト設定
   ============================================== */
.month-shift-grid {
  max-height: 500px;
  overflow-y: auto;
}

.month-shift-header {
  background: var(--light-gray);
  padding: 15px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
}

.month-shift-day {
  padding: 10px;
  border-radius: 6px;
  transition: all var(--transition-fast);
  border: 1px solid transparent;
}

.month-shift-day:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-sm);
}

.month-shift-day.open-day {
  background-color: rgba(40, 167, 69, 0.1);
  border-color: rgba(40, 167, 69, 0.3);
}

.month-shift-day.closed-day {
  background-color: rgba(220, 53, 69, 0.1);
  border-color: rgba(220, 53, 69, 0.3);
}

.day-number {
  font-weight: bold;
  font-size: 1.1em;
  color: var(--text-dark);
}

.weekday {
  font-weight: 500;
  color: var(--text-muted);
}

.business-hours {
  font-weight: 500;
  color: var(--text-dark);
}

/* トグルスイッチのカスタマイズ */
.shift-toggle {
  width: 3rem !important;
  height: 1.5rem !important;
  cursor: pointer;
}

.shift-toggle:checked {
  background-color: var(--success-color) !important;
  border-color: var(--success-color) !important;
}

.shift-toggle:not(:checked) {
  background-color: var(--danger-color) !important;
  border-color: var(--danger-color) !important;
}

/* 営業状態ラベル */
.form-check-label {
  font-weight: 500;
  font-size: 0.9em;
}

/* 詳細設定ボタン */
.edit-day-shift {
  transition: all var(--transition-fast);
}

.edit-day-shift:hover {
  transform: scale(1.1);
}

/* レスポンシブ対応 */
@media (max-width: 768px) {
  .month-shift-day {
    padding: 8px;
  }
  
  .day-number {
    font-size: 1em;
  }
  
  .business-hours {
    font-size: 0.9em;
  }
  
  .shift-toggle {
    width: 2.5rem !important;
    height: 1.2rem !important;
  }
}

/* Clean Calendar Styling */
.fc-timegrid-slot {
  background-color: #ffffff !important;
  border-color: #dee2e6 !important;
}

.fc-timegrid-slot.fc-slot-disabled {
  background-color: #f8f9fa !important;
  pointer-events: none !important;
}

.fc-timegrid-slot.fc-slot-available {
  background-color: #ffffff !important;
  pointer-events: auto !important;
}

/* Remove any fixed background colors */
.fc-timegrid-slot[style*="background-color"] {
  background-color: inherit !important;
}

/* Modal styling */
.modal-content {
  border-radius: 12px;
  border: none;
  box-shadow: 0 10px 30px rgba(0,0,0,0.2);
}

.modal-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 12px 12px 0 0;
}

.modal-title {
  font-weight: 600;
}

/* Form styling */
.form-control:focus {
  border-color: #667eea;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
}

.btn-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border: none;
}

.btn-primary:hover {
  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
}
</style>

<script>
// CLEAN SHIFT SETTINGS IMPLEMENTATION - 2025-01-27
// Square-style booking system with per-day business hours

console.log('🚀 Clean Shift Settings Implementation Loaded');

document.addEventListener('DOMContentLoaded', function() {
  console.log('🚀 Initializing calendar with shift settings');

  // Global variables
  window.currentCalendar = null;
  window.shifts = loadShiftsFromLocalStorage();

  // Initialize calendar
  initializeCalendar();
  
  // Initialize shift settings modal
  initializeShiftModal();
  
  // Add test button listener
  const testBtn = document.getElementById('testHighlightBtn');
  if (testBtn) {
    testBtn.addEventListener('click', function() {
      console.log('🧪 Test button clicked - applying highlights...');
      applyShiftHighlights();
      
      // Also test manual background color application
      const slots = document.querySelectorAll('.fc-timegrid-slot');
      console.log(`🧪 Found ${slots.length} slots for manual test`);
      
      slots.forEach((slot, index) => {
        if (index % 2 === 0) {
          slot.style.setProperty('background-color', '#ffebee', 'important');
          console.log(`🧪 Applied red tint to slot ${index}`);
        } else {
          slot.style.setProperty('background-color', '#e8f5e8', 'important');
          console.log(`🧪 Applied green tint to slot ${index}`);
        }
      });
    });
  }
  
  // Apply initial shift highlights
  setTimeout(() => {
    applyShiftHighlights();
  }, 500);
});

// Calendar initialization
function initializeCalendar() {
  const calendarEl = document.getElementById('calendar');
  if (!calendarEl) {
    console.error('❌ Calendar element not found');
    return;
  }

  const calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: 'timeGridWeek',
    headerToolbar: {
      left: 'prev,next today',
      center: 'title',
      right: 'dayGridMonth,timeGridWeek,timeGridDay'
    },
    locale: 'ja',
    height: 'auto',
    editable: true,
    selectable: true,
    selectMirror: true,
    dayMaxEvents: true,
    weekends: true,
    allDaySlot: false,
    slotMinTime: '08:00:00',
    slotMaxTime: '22:00:00',
    slotDuration: '00:30:00',
    nowIndicator: true,
    events: {
      url: '/admin/reservations.json',
      failure: function(error) {
        console.error('❌ Error loading events:', error);
      }
    },
    dateClick: function(info) {
      handleDateClick(info);
    },
    eventClick: function(info) {
      console.log('📅 Event clicked:', info.event.title);
    },
    datesSet: function(info) {
      console.log('📅 View changed, applying shift highlights...');
      setTimeout(() => applyShiftHighlights(), 100);
    }
  });

  calendar.render();
  window.currentCalendar = calendar;
  console.log('✅ Calendar initialized successfully');
}

// Shift settings modal initialization
function initializeShiftModal() {
  const shiftBtn = document.getElementById('shiftSettingsBtn');
  if (shiftBtn) {
    shiftBtn.addEventListener('click', function() {
      openShiftSettingsModal();
    });
  }
  
  // Create test shift data for demonstration
  createTestShiftData();
}

// Create test shift data
function createTestShiftData() {
  if (window.shifts.length === 0) {
    const today = new Date();
    const testShift = {
      date: formatDateToLocalString(today),
      is_open: true,
      start_time: '10:00',
      end_time: '18:00',
      updated_at: new Date().toISOString()
    };
    
    window.shifts.push(testShift);
    saveShiftsToLocalStorage(window.shifts);
    console.log('📝 Created test shift data:', testShift);
  }
}

// Handle date clicks with shift validation
function handleDateClick(info) {
  const dateStr = formatDateToLocalString(info.date);
  const shift = getShiftForDate(dateStr);
  
  if (!shift || !shift.is_open) {
    showMessage('この日時は予約できません', 'warning');
    return;
  }
  
  const hour = info.date.getHours();
  const startHour = parseInt(shift.start_time.split(':')[0]);
  const endHour = parseInt(shift.end_time.split(':')[0]);
  
  if (hour < startHour || hour >= endHour) {
    showMessage('営業時間外です', 'warning');
    return;
  }
  
  console.log('📅 Valid booking time clicked:', dateStr, hour);
  // Add booking logic here
}

// Apply shift highlights to calendar
  function applyShiftHighlights() {
    console.log('🎨 Applying shift highlights...');

    // Try a different approach - look for the main time grid structure
    const timeGrid = document.querySelector('.fc-timegrid');
    if (!timeGrid) {
      console.log('⚠️ No time grid found, retrying...');
      setTimeout(applyShiftHighlights, 200);
      return;
    }

    console.log(`🔍 Time grid structure:`, timeGrid);
    console.log(`🔍 Time grid children:`, timeGrid.children);

    // Look for the time grid body which should contain the actual slots
    const timeGridBody = timeGrid.querySelector('.fc-timegrid-body');
    if (!timeGridBody) {
      console.log('⚠️ No time grid body found');
      return;
    }

    console.log(`🔍 Time grid body structure:`, timeGridBody);
    console.log(`🔍 Time grid body children:`, timeGridBody.children);

    // Look for the time grid slots table
    const timeGridSlots = timeGridBody.querySelector('.fc-timegrid-slots');
    if (!timeGridSlots) {
      console.log('⚠️ No time grid slots found');
      return;
    }

    console.log(`🔍 Time grid slots structure:`, timeGridSlots);
    console.log(`🔍 Time grid slots children:`, timeGridSlots.children);

    // Get the current week's dates from FullCalendar
    if (!window.currentCalendar) {
      console.log('❌ Calendar not available');
      return;
    }

    const view = window.currentCalendar.view;
    if (!view || !view.currentStart) {
      console.log('❌ Calendar view not available');
      return;
    }

    const weekStart = view.currentStart;
    console.log(`🔍 Week start: ${weekStart}`);

    // Try to find all time slots directly
    let timeSlots = timeGridSlots.querySelectorAll('.fc-timegrid-slot');
    console.log(`🔍 Found ${timeSlots.length} time slots directly in time grid slots`);

    if (timeSlots.length === 0) {
      // Try alternative selectors
      timeSlots = timeGridSlots.querySelectorAll('.fc-timegrid-slot-lane');
      console.log(`🔍 Found ${timeSlots.length} time slot lanes in time grid slots`);
    }

    if (timeSlots.length === 0) {
      // Try finding all td elements
      timeSlots = timeGridSlots.querySelectorAll('td');
      console.log(`🔍 Found ${timeSlots.length} td elements in time grid slots`);
    }

    if (timeSlots.length === 0) {
      // Try finding all div elements
      timeSlots = timeGridSlots.querySelectorAll('div');
      console.log(`🔍 Found ${timeSlots.length} div elements in time grid slots`);
    }

    // Process each time slot
    timeSlots.forEach((slot, slotIndex) => {
      // Skip time label cells
      if (slot.classList.contains('fc-timegrid-slot-label')) {
        return;
      }

      // Debug: log the slot structure
      console.log(`🔍 Slot ${slotIndex}:`, slot);
      console.log(`🔍 Slot ${slotIndex} classes:`, slot.className);
      console.log(`🔍 Slot ${slotIndex} data attributes:`, slot.dataset);

      // Get the date and hour from the slot
      const slotDate = getSlotDate(slot);
      const hour = getSlotHour(slot);
      
      if (slotDate === null || hour === null) {
        console.log(`⚠️ Could not get date or hour for slot ${slotIndex}`);
        return;
      }

      console.log(`🔍 Processing slot ${slotIndex}: date=${slotDate}, hour=${hour}`);

      // Get shift data for this date
      const shift = getShiftForDate(slotDate);
      console.log(`Shift for ${slotDate}:`, shift);

      // Remove existing classes
      slot.classList.remove('fc-slot-available', 'fc-slot-disabled');

      if (!shift || !shift.is_open) {
        // No shift or closed - disabled
        slot.classList.add('fc-slot-disabled');
        slot.style.setProperty('background-color', '#f8f9fa', 'important');
        slot.style.setProperty('pointer-events', 'none', 'important');
        console.log(`🔴 Applied disabled style to ${slotDate} hour ${hour}`);
      } else {
        const startHour = parseInt(shift.start_time.split(':')[0]);
        const endHour = parseInt(shift.end_time.split(':')[0]);

        if (hour >= startHour && hour < endHour) {
          // Within business hours - available
          slot.classList.add('fc-slot-available');
          slot.style.setProperty('background-color', '#ffffff', 'important');
          slot.style.setProperty('pointer-events', 'auto', 'important');
          console.log(`⚪ Applied available style to ${slotDate} hour ${hour}`);
        } else {
          // Outside business hours - disabled
          slot.classList.add('fc-slot-disabled');
          slot.style.setProperty('background-color', '#f8f9fa', 'important');
          slot.style.setProperty('pointer-events', 'none', 'important');
          console.log(`🔴 Applied disabled style to ${slotDate} hour ${hour}`);
        }
      }
    });

    console.log('✅ Shift highlights applied');
  }

// Get date from slot element
function getSlotDate(slot) {
  try {
    // Find the parent td of the slot
    const parentTd = slot.closest('td');
    if (!parentTd) {
      console.log('❌ No parent td found for slot');
      return null;
    }
    
    // Check if this is a time label slot (first column)
    if (parentTd.classList.contains('fc-timegrid-slot-label')) {
      console.log('❌ This is a time label slot, not a day slot');
      return null;
    }
    
    // Use FullCalendar API to get the current view's date range
    if (!window.currentCalendar) {
      console.log('❌ Calendar not available');
      return null;
    }
    
    const view = window.currentCalendar.view;
    if (!view) {
      console.log('❌ Calendar view not available');
      return null;
    }
    
    // Get the current week's start date
    const weekStart = view.currentStart;
    if (!weekStart) {
      console.log('❌ Week start date not available');
      return null;
    }
    
    // Find the row that contains our slot
    const slotRow = parentTd.closest('tr');
    if (!slotRow) {
      console.log('❌ No slot row found');
      return null;
    }
    
    // Get all cells in the slot row
    const rowCells = slotRow.querySelectorAll('td');
    if (rowCells.length === 0) {
      console.log('❌ No row cells found');
      return null;
    }
    
    // Find the index of our slot's parent td in the row
    let slotIndex = -1;
    for (let i = 0; i < rowCells.length; i++) {
      if (rowCells[i] === parentTd) {
        slotIndex = i;
        break;
      }
    }
    
    if (slotIndex === -1) {
      console.log('❌ Could not find slot index in row');
      return null;
    }
    
    // Skip the first cell (time label) and calculate the day offset
    const dayOffset = slotIndex - 1; // Adjust for time label column
    if (dayOffset < 0 || dayOffset > 6) {
      console.log(`❌ Invalid day offset: ${dayOffset}`);
      return null;
    }
    
    // Calculate the date by adding the day offset to the week start
    const targetDate = new Date(weekStart);
    targetDate.setDate(weekStart.getDate() + dayOffset);
    
    const result = formatDateToLocalString(targetDate);
    console.log(`✅ Calculated date: ${result} (week start: ${formatDateToLocalString(weekStart)}, day offset: ${dayOffset})`);
    return result;
    
  } catch (error) {
    console.error('❌ Error getting slot date:', error);
    return null;
  }
}

// Get hour from slot element
function getSlotHour(slot) {
  try {
    // First try to get hour from the slot's data-time attribute
    const timeAttr = slot.getAttribute('data-time');
    if (timeAttr) {
      const hour = parseInt(timeAttr.split(':')[0]);
      console.log(`Extracted hour: ${hour} from data-time: ${timeAttr}`);
      return hour;
    }
    
    // Fallback: get from the time label in the first cell of the row
    const row = slot.closest('tr');
    if (!row) {
      console.log('❌ No row found for slot');
      return 0;
    }
    
    // Get the first cell in this row (time label)
    const timeCell = row.querySelector('td:first-child');
    if (!timeCell) {
      console.log('❌ No time cell found');
      return 0;
    }
    
    const timeText = timeCell.textContent.trim();
    console.log(`Time text: "${timeText}"`);
    
    // Match Japanese time format like "8時", "10時", etc.
    const japaneseMatch = timeText.match(/(\d{1,2})時/);
    if (japaneseMatch) {
      const hour = parseInt(japaneseMatch[1]);
      console.log(`Extracted hour: ${hour} from Japanese format`);
      return hour;
    }
    
    // Fallback: Match time format like "8:00", "10:30", etc.
    const match = timeText.match(/(\d{1,2}):\d{2}/);
    const hour = match ? parseInt(match[1]) : 0;
    
    console.log(`Extracted hour: ${hour} from standard format`);
    return hour;
  } catch (error) {
    console.error('❌ Error getting slot hour:', error);
    return 0;
  }
}

// Get shift for specific date
function getShiftForDate(dateStr) {
  return window.shifts.find(shift => shift.date === dateStr);
}

// Open shift settings modal
function openShiftSettingsModal() {
  const modal = new bootstrap.Modal(document.getElementById('shiftSettingsModal'));
  modal.show();
  
  // Initialize modal content
  initializeModalContent();
}

// Initialize modal content
function initializeModalContent() {
  const dateInput = document.getElementById('shiftDate');
  if (dateInput) {
    dateInput.value = formatDateToLocalString(new Date());
    loadShiftForDate(dateInput.value);
  }
  
  // Add event listeners
  setupModalEventListeners();
}

// Update shift preview
function updateShiftPreview() {
  const dateInput = document.getElementById('shiftDate');
  const isOpenCheckbox = document.getElementById('shiftIsOpen');
  const startTimeInput = document.getElementById('shiftStartTime');
  const endTimeInput = document.getElementById('shiftEndTime');
  const previewDiv = document.getElementById('shiftPreview');
  
  if (!dateInput || !previewDiv) return;
  
  const date = new Date(dateInput.value);
  const dateStr = formatDateToLocalString(date);
  const weekday = ['日', '月', '火', '水', '木', '金', '土'][date.getDay()];
  
  if (!isOpenCheckbox.checked) {
    previewDiv.innerHTML = `
      <div class="text-danger">
        <i class="fas fa-times-circle me-2"></i>
        <strong>${dateStr} (${weekday})</strong> - 休業日
      </div>
    `;
  } else {
    previewDiv.innerHTML = `
      <div class="text-success">
        <i class="fas fa-check-circle me-2"></i>
        <strong>${dateStr} (${weekday})</strong> - 営業時間: ${startTimeInput.value} - ${endTimeInput.value}
      </div>
    `;
  }
}

// Setup modal event listeners
function setupModalEventListeners() {
  const dateInput = document.getElementById('shiftDate');
  const isOpenCheckbox = document.getElementById('shiftIsOpen');
  const startTimeInput = document.getElementById('shiftStartTime');
  const endTimeInput = document.getElementById('shiftEndTime');
  const saveBtn = document.getElementById('saveShiftBtn');
  
  if (dateInput) {
    dateInput.addEventListener('change', function() {
      loadShiftForDate(this.value);
      updateShiftPreview();
    });
  }
  
  if (isOpenCheckbox) {
    isOpenCheckbox.addEventListener('change', function() {
      const timeInputs = [startTimeInput, endTimeInput];
      timeInputs.forEach(input => {
        if (input) input.disabled = !this.checked;
      });
      updateShiftPreview();
    });
  }
  
  if (startTimeInput) {
    startTimeInput.addEventListener('change', updateShiftPreview);
  }
  
  if (endTimeInput) {
    endTimeInput.addEventListener('change', updateShiftPreview);
  }
  
  if (saveBtn) {
    saveBtn.addEventListener('click', saveShiftSettings);
  }
}

// Load shift data for specific date
function loadShiftForDate(dateStr) {
  const shift = getShiftForDate(dateStr);
  
  const isOpenCheckbox = document.getElementById('shiftIsOpen');
  const startTimeInput = document.getElementById('shiftStartTime');
  const endTimeInput = document.getElementById('shiftEndTime');
  
  if (shift) {
    if (isOpenCheckbox) isOpenCheckbox.checked = shift.is_open;
    if (startTimeInput) startTimeInput.value = shift.start_time;
    if (endTimeInput) endTimeInput.value = shift.end_time;
  } else {
    if (isOpenCheckbox) isOpenCheckbox.checked = true;
    if (startTimeInput) startTimeInput.value = '10:00';
    if (endTimeInput) endTimeInput.value = '20:00';
  }
  
  // Update time input states
  if (isOpenCheckbox) {
    const timeInputs = [startTimeInput, endTimeInput];
    timeInputs.forEach(input => {
      if (input) input.disabled = !isOpenCheckbox.checked;
    });
  }
  
  // Update preview
  updateShiftPreview();
}

// Save shift settings
function saveShiftSettings() {
  const dateInput = document.getElementById('shiftDate');
  const isOpenCheckbox = document.getElementById('shiftIsOpen');
  const startTimeInput = document.getElementById('shiftStartTime');
  const endTimeInput = document.getElementById('shiftEndTime');
  
  if (!dateInput || !isOpenCheckbox || !startTimeInput || !endTimeInput) {
    showMessage('フォームが見つかりません', 'error');
    return;
  }
  
  const shift = {
    date: dateInput.value,
    is_open: isOpenCheckbox.checked,
    start_time: startTimeInput.value,
    end_time: endTimeInput.value,
    updated_at: new Date().toISOString()
  };
  
  // Update or add shift
  const existingIndex = window.shifts.findIndex(s => s.date === shift.date);
  if (existingIndex >= 0) {
    window.shifts[existingIndex] = shift;
  } else {
    window.shifts.push(shift);
  }
  
  // Save to localStorage
  saveShiftsToLocalStorage(window.shifts);
  
  // Apply highlights
  applyShiftHighlights();
  
  // Close modal
  const modal = bootstrap.Modal.getInstance(document.getElementById('shiftSettingsModal'));
  if (modal) modal.hide();
  
  showMessage('シフト設定を保存しました', 'success');
}

// Utility functions
function formatDateToLocalString(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

function showMessage(message, type = 'info') {
  console.log(`${type.toUpperCase()}: ${message}`);
  // Add toast notification here if needed
}

function loadShiftsFromLocalStorage() {
  const stored = localStorage.getItem('shifts');
  return stored ? JSON.parse(stored) : [];
}

function saveShiftsToLocalStorage(shifts) {
  localStorage.setItem('shifts', JSON.stringify(shifts));
}
</script> 