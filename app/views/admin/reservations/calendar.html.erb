<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= form_authenticity_token %>">
    <title>予約管理システム</title>
    <%= stylesheet_link_tag 'calendar', media: 'all' %>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📅 予約管理システム</h1>
            <div class="header-controls">
                <div class="week-nav">
                    <button class="nav-btn" onclick="previousWeek()">← 前週</button>
                    <div class="current-week" id="currentWeek">読み込み中...</div>
                    <button class="nav-btn" onclick="nextWeek()">次週 →</button>
                </div>
                <div class="action-buttons">
                    <button class="btn btn-primary" onclick="openBulkReservationModal()">📅 一括予約作成</button>
                </div>
                <div class="mini-calendar-container">
                    <button class="mini-calendar-btn" onclick="toggleMiniCalendar()">
                        📅 週を選択
                    </button>
                    <div class="mini-calendar" id="miniCalendar">
                        <div class="mini-calendar-header">
                            <button class="mini-calendar-year-btn" onclick="previousMiniCalendarYear()" title="前年">‹‹</button>
                            <button class="mini-calendar-nav-btn" onclick="previousMiniCalendarMonth()" title="前月">‹</button>
                            <div class="mini-calendar-title" id="miniCalendarTitle">読み込み中...</div>
                            <button class="mini-calendar-nav-btn" onclick="nextMiniCalendarMonth()" title="翌月">›</button>
                            <button class="mini-calendar-year-btn" onclick="nextMiniCalendarYear()" title="翌年">››</button>
                        </div>
                        <div class="mini-calendar-weekdays">
                            <div class="mini-calendar-weekday">日</div>
                            <div class="mini-calendar-weekday">月</div>
                            <div class="mini-calendar-weekday">火</div>
                            <div class="mini-calendar-weekday">水</div>
                            <div class="mini-calendar-weekday">木</div>
                            <div class="mini-calendar-weekday">金</div>
                            <div class="mini-calendar-weekday">土</div>
                        </div>
                        <div class="mini-calendar-days" id="miniCalendarDays">
                            <!-- 動的に生成される -->
                        </div>
                    </div>
                </div>
                <button id="showCancellationsBtn" onclick="toggleCancellationDisplay()" class="cancellation-btn">
                    ❌ キャンセル履歴 (<span id="cancellation-count">0</span>)
                </button>
                <button class="settings-btn" onclick="openSettingsModal()">
                    ⚙️ 予約可能日時を編集
                </button>
            </div>
        </div>
        
        <div id="cancellation-display" class="cancellation-display" style="display: none;">
            <div class="cancellation-header">
                <h3>❌ キャンセルされた予約</h3>
                <button onclick="clearCancellationDisplay()" class="clear-btn">クリア</button>
            </div>
            <div id="cancellation-list" class="cancellation-list">
                <!-- キャンセルされた予約がここに表示されます -->
            </div>
        </div>

        <div class="schedule-container">
            <div class="schedule-header">
                <div class="time-column-header">時刻</div>
                <div class="day-header sunday">日<br><span style="font-size: 12px;">8/10</span></div>
                <div class="day-header">月<br><span style="font-size: 12px;">8/11</span></div>
                <div class="day-header">火<br><span style="font-size: 12px;">8/12</span></div>
                <div class="day-header">水<br><span style="font-size: 12px;">8/13</span></div>
                <div class="day-header">木<br><span style="font-size: 12px;">8/14</span></div>
                <div class="day-header">金<br><span style="font-size: 12px;">8/15</span></div>
                <div class="day-header saturday">土<br><span style="font-size: 12px;">8/16</span></div>
            </div>
            
            <div class="schedule-body" id="scheduleBody">
                <!-- 時間スロットは動的に生成される -->
            </div>
        </div>
    </div>

    <!-- 設定モーダル -->
    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>⚙️ 予約可能日時を編集</h2>
                <span class="close" onclick="closeSettingsModal()">&times;</span>
            </div>
            <div class="modal-body">
                <div class="settings-tabs">
                    <button class="tab-button active" onclick="switchTab('general')">一回限りの変更</button>
                    <button class="tab-button" onclick="switchTab('recurring')">定期的なスケジュール</button>
                </div>

                <!-- 一回限りの変更タブ -->
                <div id="general-tab" class="tab-content active">
                    <div id="week-info" style="margin-bottom: 20px; padding: 12px; background: #f8f9fa; border-radius: 6px; border-left: 4px solid #007bff;">
                        <strong>現在の週:</strong> <span id="current-week-display"></span>
                        <br><small id="schedule-type-info" style="color: #666;"></small>
                    </div>
                    
                    <div id="daySettings">
                        <!-- 曜日別設定が動的に生成される -->
      </div>
    </div>

                <!-- 定期的なスケジュールタブ -->
                <div id="recurring-tab" class="tab-content">
                    <p style="margin-bottom: 20px; color: #666;">今後の週に適用するデフォルトスケジュールを設定</p>
                    
                    <div id="recurringDaySettings">
                        <!-- 定期的な設定が動的に生成される -->
        </div>
        </div>
        </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeSettingsModal()">キャンセル</button>
                <button class="btn btn-success" onclick="saveSettings()">完了</button>
          </div>
        </div>
        </div>

    <!-- 予約作成モーダル -->
    <div id="bookingModal" class="booking-modal">
        <div class="booking-modal-content">
            <div class="booking-modal-header">
                <h2>📅 新規予約作成</h2>
                <span class="booking-modal-close" onclick="closeBookingModal()">&times;</span>
            </div>
            <div class="booking-modal-body">
                <!-- 予約日時情報セクション -->
                <div class="booking-info-section">
                    <div class="booking-datetime">
                        <span id="bookingDisplayDate"></span> <strong id="bookingDisplayTime"></strong>
                    </div>
                </div>

                <!-- 予約フォームセクション -->
                <div class="booking-form-section">
                    <div class="booking-field">
                        <label class="booking-label">🎯 コース選択</label>
                        <select id="bookingDuration" class="booking-select" required>
                            <option value="">コースを選択してください</option>
                            <option value="40">40分コース</option>
                            <option value="60">60分コース</option>
                            <option value="80">80分コース</option>
                        </select>
                    </div>
                    
                    <div class="booking-field">
                        <label class="booking-label">👤 お客様名 <span style="color: #e74c3c; font-weight: 700;">*</span></label>
                        <input type="text" id="customerName" class="booking-input" required placeholder="山田太郎" autocomplete="off">
                        <div id="userSearchResults" class="user-search-results" style="display: none;"></div>
                    </div>
                    
                    <div class="booking-field">
                        <label class="booking-label">📞 電話番号 <span style="color: #e74c3c; font-weight: 700;">*</span></label>
                        <input type="tel" id="customerPhone" class="booking-input" required placeholder="090-1234-5678">
                    </div>
                    
                    <div class="booking-field">
                        <label class="booking-label">📧 メールアドレス</label>
                        <input type="email" id="customerEmail" class="booking-input" placeholder="example@email.com">
                    </div>
                    
                    <div class="booking-field">
                        <label class="booking-label">📝 備考・ご要望</label>
                        <textarea id="bookingNote" class="booking-textarea" rows="3" placeholder="ご要望やご質問があればご記入ください"></textarea>
                    </div>
                    
                    <div class="booking-field">
                        <label class="booking-label">🏷️ 予約ステータス</label>
                        <select id="bookingStatus" class="booking-select">
                            <option value="tentative">仮予約</option>
                            <option value="confirmed">確定</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="booking-modal-footer">
                <button type="button" class="booking-btn booking-btn-cancel" onclick="closeBookingModal()">キャンセル</button>
                <button type="button" class="booking-btn booking-btn-create" id="submitBookingBtn" onclick="createBooking()">📅 予約作成</button>
            </div>
        </div>
    </div>

    <!-- 休憩作成モーダル -->
    <div id="breakModal" class="break-modal">
        <div class="break-modal-content">
            <div class="break-modal-header">
                <h2>☕ 休憩作成</h2>
                <span class="break-modal-close" onclick="closeBreakModal()">&times;</span>
            </div>
            <div class="break-modal-body">
                <div class="break-info-section">
                    <div class="break-datetime">
                        <span id="breakDisplayDate"></span> <strong id="breakDisplayTime"></strong>
                    </div>
                </div>

                <div class="break-form-section">
                    <div class="break-field">
                        <label class="break-label">🍊 休憩タイトル</label>
                        <select id="breakTitle" class="break-select" required onchange="handleBreakTitleChange()">
                            <option value="">選択してください</option>
                            <option value="休憩">☕ 休憩</option>
                            <option value="準備時間">⚙️ 準備時間</option>
                            <option value="業務">💼 業務</option>
                            <option value="ミーティング">🤝 ミーティング</option>
                            <option value="その他">📝 その他</option>
                        </select>
                    </div>
                    
                    <div class="break-field" id="customBreakTitle" style="display: none;">
                        <label class="break-label">カスタムタイトル</label>
                        <input type="text" id="customBreakTitleInput" class="break-input" placeholder="カスタムタイトルを入力">
                    </div>

                    <div class="break-field">
                        <label class="break-label">⏰ 休憩時間</label>
                        <select id="breakDuration" class="break-select" required>
                            <option value="">選択してください</option>
                            <option value="15">15分</option>
                            <option value="30">30分</option>
                            <option value="45">45分</option>
                            <option value="60">1時間</option>
                            <option value="90">1時間30分</option>
                            <option value="120">2時間</option>
                            <option value="180">3時間</option>
                        </select>
                    </div>

                    <div class="break-field">
                        <label class="break-label">📝 メモ</label>
                        <textarea id="breakNote" class="break-textarea" rows="2" placeholder="必要に応じてメモを入力してください"></textarea>
                    </div>
                </div>
            </div>
            <div class="break-modal-footer">
                <button type="button" class="break-btn break-btn-create" onclick="createBreak()">☕ 休憩作成</button>
                <button type="button" class="break-btn break-btn-cancel" onclick="closeBreakModal()">キャンセル</button>
            </div>
        </div>
    </div>

    <!-- 休憩詳細モーダル -->
    <div id="breakDetailModal" class="break-detail-modal">
        <div class="break-detail-modal-content">
            <div class="break-detail-modal-header">
                <h2 id="breakDetailTitle">☕ 休憩詳細</h2>
                <span class="break-detail-modal-close" onclick="closeBreakDetailModal()">&times;</span>
            </div>
            <div class="break-detail-modal-body">
                <div class="break-detail-info">
                    <div class="break-detail-datetime">
                        <span id="breakDetailDate"></span> <strong id="breakDetailTime"></strong>
                    </div>
                    <div class="break-detail-duration">
                        <span id="breakDetailDuration"></span>
                    </div>
                </div>

                <div class="break-detail-form">
                    <div class="break-detail-field">
                        <label class="break-detail-label">🍊 休憩タイトル</label>
                        <select id="editBreakTitle" class="break-detail-select" onchange="handleEditBreakTitleChange()">
                            <option value="休憩">☕ 休憩</option>
                            <option value="準備時間">⚙️ 準備時間</option>
                            <option value="業務">💼 業務</option>
                            <option value="ミーティング">🤝 ミーティング</option>
                            <option value="その他">📝 その他</option>
                        </select>
                    </div>
                    
                    <div class="break-detail-field" id="editCustomBreakTitle" style="display: none;">
                        <label class="break-detail-label">カスタムタイトル</label>
                        <input type="text" id="editCustomBreakTitleInput" class="break-detail-input" placeholder="カスタムタイトルを入力">
                    </div>

                    <div class="break-detail-field">
                        <label class="break-detail-label">⏰ 休憩時間</label>
                        <select id="editBreakDuration" class="break-detail-select">
                            <option value="15">15分</option>
                            <option value="30">30分</option>
                            <option value="45">45分</option>
                            <option value="60">1時間</option>
                            <option value="90">1時間30分</option>
                            <option value="120">2時間</option>
                            <option value="180">3時間</option>
                        </select>
                    </div>

                    <div class="break-detail-field">
                        <label class="break-detail-label">📝 メモ</label>
                        <textarea id="editBreakNote" class="break-detail-textarea" rows="3" placeholder="必要に応じてメモを入力してください"></textarea>
                    </div>
                </div>
            </div>
            <div class="break-detail-modal-footer">
                <button type="button" class="break-detail-btn break-detail-btn-save" onclick="saveBreakChanges()">💾 保存</button>
                <button type="button" class="break-detail-btn break-detail-btn-delete" onclick="deleteBreakReservation()">🗑️ 削除</button>
                <button type="button" class="break-detail-btn break-detail-btn-cancel" onclick="closeBreakDetailModal()">キャンセル</button>
        </div>
        </div>
      </div>

    <!-- 一括予約作成モーダル -->
    <div id="bulkReservationModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>📅 一括予約作成</h2>
                <span class="close" onclick="closeBulkReservationModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="bulkReservationForm">
                    <div class="form-group mb-3">
                        <label for="bulkStartDate" class="form-label">開始日</label>
                        <input type="date" id="bulkStartDate" class="form-control" required>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bulkEndDate" class="form-label">終了日</label>
                        <input type="date" id="bulkEndDate" class="form-control" required>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bulkStartTime" class="form-label">開始時間</label>
                        <input type="time" id="bulkStartTime" class="form-control" required>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bulkDuration" class="form-label">コース選択</label>
                        <select id="bulkDuration" class="form-select" required>
                            <option value="">コースを選択してください</option>
                            <option value="40">40分コース</option>
                            <option value="60">60分コース</option>
                            <option value="80">80分コース</option>
                        </select>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bulkDaysOfWeek" class="form-label">対象曜日</label>
                        <div class="checkbox-group" id="bulkDaysOfWeek">
                            <label class="checkbox-item">
                                <input type="checkbox" id="bulkDay0" value="0" checked> 日
                            </label>
                            <label class="checkbox-item">
                                <input type="checkbox" id="bulkDay1" value="1" checked> 月
                            </label>
                            <label class="checkbox-item">
                                <input type="checkbox" id="bulkDay2" value="2" checked> 火
                            </label>
                            <label class="checkbox-item">
                                <input type="checkbox" id="bulkDay3" value="3" checked> 水
                            </label>
                            <label class="checkbox-item">
                                <input type="checkbox" id="bulkDay4" value="4" checked> 木
                            </label>
                            <label class="checkbox-item">
                                <input type="checkbox" id="bulkDay5" value="5" checked> 金
                            </label>
                            <label class="checkbox-item">
                                <input type="checkbox" id="bulkDay6" value="6" checked> 土
                            </label>
                        </div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bulkCustomerName" class="form-label">お客様名</label>
                        <div class="position-relative">
                            <input type="text" id="bulkCustomerName" class="form-control" required placeholder="山田太郎" autocomplete="off">
                            <div id="bulkUserSearchResults" class="user-search-results" style="display: none;"></div>
                        </div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bulkCustomerPhone" class="form-label">電話番号</label>
                        <input type="tel" id="bulkCustomerPhone" class="form-control" required placeholder="090-1234-5678">
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bulkCustomerEmail" class="form-label">メールアドレス</label>
                        <input type="email" id="bulkCustomerEmail" class="form-control" placeholder="example@email.com">
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bulkNote" class="form-label">備考</label>
                        <textarea id="bulkNote" class="form-control" rows="3" placeholder="ご要望やご質問があればご記入ください"></textarea>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bulkStatus" class="form-label">予約ステータス</label>
                        <select id="bulkStatus" class="form-select">
                            <option value="tentative">仮予約</option>
                            <option value="confirmed">確定</option>
                        </select>
                    </div>
                    
                    <div class="bulk-preview mb-3">
                        <h4>作成予定の予約</h4>
                        <div id="bulkPreviewList" class="bulk-preview-list">
                            <!-- プレビューがここに表示されます -->
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeBulkReservationModal()">キャンセル</button>
                <button class="btn btn-info" onclick="previewBulkReservations()">プレビュー</button>
                <button class="btn btn-success" id="submitBulkBtn" onclick="createBulkReservations()" disabled>一括作成</button>
            </div>
        </div>
    </div>

     <!-- 予約詳細モーダル -->
    <div id="reservationDetailModal" class="modal">
        <div class="modal-content">
            <div class="modal-body" id="reservationDetailContent">
                <span class="close" onclick="closeReservationDetailModal()">&times;</span>
                <!-- 動的に生成される -->
            </div>
            <div class="modal-footer">
                                 <button type="submit" class="btn btn-primary" form="reservationEditForm" onclick="console.log('💾 Save button clicked')">保存</button>
                 <button type="button" class="btn btn-warning" onclick="cancelReservationFromCalendar()">キャンセル</button>
                 <button type="button" class="btn btn-danger" onclick="deleteReservationFromCalendar()">削除</button>
                 <button type="button" class="btn btn-secondary" onclick="closeReservationDetailModal()">閉じる</button>
            </div>
        </div>
    </div>
    <!-- ユーザー選択モーダル -->
    <div id="userSelectionModal" class="modal">
        <div class="modal-content">
            <div class="modal-body">
                <span class="close" onclick="closeUserSelectionModal()">&times;</span>
                <h3>お客様の変更</h3>
                <div class="user-selection-settings">
                    <div class="form-group">
                        <label for="userSearchInput" class="form-label">お客様を検索してください</label>
                        <input type="text" id="userSearchInput" class="form-control" placeholder="お客様名を入力してください..." autocomplete="off">
                    </div>
                    <div class="user-search-results" id="userSelectionSearchResults">
                        <!-- 検索結果がここに表示されます -->
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" onclick="closeUserSelectionModal()">キャンセル</button>
                        <button class="btn btn-primary" onclick="return saveUserSelection()" id="saveUserBtn" disabled>変更</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        (function() {
            // 今日の週の開始日（日曜日）を計算
            let globalCurrentDate = new Date();
            let currentWeekStart = new Date(globalCurrentDate);
            currentWeekStart.setDate(globalCurrentDate.getDate() - globalCurrentDate.getDay()); // 日曜日に設定
            let weeklySchedules = {}; // 週別スケジュール（週のキーで保存）
            let defaultSchedule = {}; // デフォルトスケジュール
            let reservations = {}; // 予約データ
            let miniCalendarMonth = new Date(globalCurrentDate.getFullYear(), globalCurrentDate.getMonth(), 1); // ミニカレンダーの表示月（現在の月）
            let clickedDate = null; // クリックされた日付
            let currentReservation = null; // 現在表示中の予約
            let searchTimeout = null; // 検索のデバウンス用
            let isEditingReservation = false; // 予約編集モードフラグ
            let reservationToEdit = null; // 編集対象の予約データ
            let cancelledReservations = []; // キャンセルされた予約のリスト
            let cancellationDisplayReady = false; // キャンセル表示の準備完了フラグ
            let domReady = false; // DOMの準備完了フラグ

        // ローカルストレージからキャンセル履歴を読み込み
        function loadCancelledReservations() {
            try {
                const stored = localStorage.getItem('cancelledReservations');
                if (stored) {
                    cancelledReservations = JSON.parse(stored);
        
                }
            } catch (error) {
                console.error('❌ Error loading cancelled reservations:', error);
                cancelledReservations = [];
            }
        }

        // ローカルストレージにキャンセル履歴を保存
        function saveCancelledReservations() {
            try {
                localStorage.setItem('cancelledReservations', JSON.stringify(cancelledReservations));
    
            } catch (error) {
                console.error('❌ Error saving cancelled reservations:', error);
            }
        }
        
        // バックエンドから予約データを読み込み
        <% if @reservations.present? %>
            console.log('🔄 Loading server-side reservations:', <%= @reservations.count %>);
            <% @reservations.each do |reservation| %>
                (function() {
                    const reservationDateKey = '<%= reservation.start_time.strftime('%Y-%m-%d') %>';
                    if (!reservations[reservationDateKey]) {
                        reservations[reservationDateKey] = [];
                    }
                    const reservationData = {
                        id: <%= reservation.id %>,
                        time: '<%= reservation.start_time.strftime('%H:%M') %>',
                        start_time: '<%= reservation.start_time.iso8601 %>', // Add start_time for validation
                        date: '<%= reservation.start_time.strftime('%Y-%m-%d') %>', // Add date for validation
                        duration: <%= extract_course_duration(reservation.course) %>,
                        customer: '<%= j(reservation.name || reservation.user&.name || '未設定') %>',
                        phone: '<%= j(reservation.user&.phone_number || '') %>',
                        email: '<%= j(reservation.user&.email || '') %>',
                        note: '<%= j(reservation.note || '') %>',
                        status: '<%= reservation.status %>',
                        is_break: false,
                        createdAt: '<%= reservation.created_at.iso8601 %>',
                        updatedAt: '<%= reservation.updated_at.iso8601 %>',
                        userId: <%= reservation.user_id || 'null' %>,
                        effective_interval_minutes: <%= reservation.effective_interval_minutes || 0 %>,
                        individual_interval_minutes: <%= reservation.individual_interval_minutes || 'null' %>
                    };
                    reservations[reservationDateKey].push(reservationData);
                    console.log('📅 Server-side reservation loaded:', {
                        date: reservationDateKey,
                        id: reservationData.id,
                        userId: reservationData.userId,
                        customer: reservationData.customer,
                        createdAt: reservationData.createdAt,
                        updatedAt: reservationData.updatedAt,
                        effective_interval_minutes: reservationData.effective_interval_minutes,
                        individual_interval_minutes: reservationData.individual_interval_minutes
                    });
                })();
            <% end %>
        <% else %>
            console.log('ℹ️ No server-side reservations found');
        <% end %>
        
        // 曜日の名前
        const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
        const dayNamesLong = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'];
        
        // 月の名前
        const monthNames = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];
        
        // 初期化
        function init() {
            // モーダル外クリックで閉じる機能を設定
            setupModalClickOutside();
            
            Promise.all([
                loadShiftSettingsFromBackend(),
                loadReservationsFromBackend()
            ]).then(() => {
                renderWeekView();
                renderDaySettings();
                renderMiniCalendar();
                showDragHint();
            });
        }

        // ドラッグヒントを表示
        function showDragHint() {
            // ヒント要素を作成
            const hint = document.createElement('div');
            hint.className = 'drag-hint';
            hint.textContent = '💡 予約をドラッグして時間を変更できます';
            document.body.appendChild(hint);
            
            // 3秒後に表示
            setTimeout(() => {
                hint.classList.add('show');
            }, 1000);
            
            // 5秒後に非表示
            setTimeout(() => {
                hint.classList.remove('show');
                setTimeout(() => {
                    if (hint.parentNode) {
                        hint.parentNode.removeChild(hint);
                    }
                }, 300);
            }, 5000);
        }

        // ユーザー検索結果表示関数
        function displayUserSearchResultsForModal(users) {
            console.log('🔍 displayUserSearchResultsForModal called with users:', users);
            const resultsContainer = document.getElementById('userSelectionSearchResults');
            
            if (!users || users.length === 0) {
                resultsContainer.innerHTML = '<div class="no-results">該当するお客様が見つかりません</div>';
                resultsContainer.style.display = 'block';
                return;
            }
            
            const resultsHTML = users.map(user => `
                <div class="user-result-item" onclick="selectUserForModal({userId: ${user.id}, name: '${user.name}', phone: '${user.phone_number}', email: '${user.email}'})">
                    <div class="user-name">${user.name}</div>
                    <div class="user-details">${user.phone_number} | ${user.email}</div>
                </div>
            `).join('');
            
            resultsContainer.innerHTML = resultsHTML;
            resultsContainer.style.display = 'block';
            console.log('🔍 Search results displayed:', users.length, 'users');
        }

        // ユーザー選択関数
        function selectUserForModal(userData) {
            console.log('🔍 selectUserForModal called with:', userData);
            
            // Set the global selectedUser that the existing saveUserSelection function expects
            window.selectedUser = {
                id: userData.userId,
                name: userData.name,
                phone_number: userData.phone,
                email: userData.email
            };
            
            console.log('✅ Set window.selectedUser:', window.selectedUser);
            
            // Hide search results and enable save button
            hideUserSearchResults();
            document.getElementById('saveUserBtn').disabled = false;
        }

        // ユーザー検索結果を隠す関数
        function hideUserSearchResults() {
            console.log('🔍 hideUserSearchResults called');
            const resultsContainer = document.getElementById('userSelectionSearchResults');
            resultsContainer.style.display = 'none';
            resultsContainer.innerHTML = '';
            console.log('🔍 Search results hidden and cleared');
        }

        function handleUserSearch(query) {
            console.log('🔍 handleUserSearch called with query:', query);
            
            if (query.length < 2) {
                console.log('🔍 Query too short, hiding results');
                hideUserSearchResults();
                return;
            }
            
            console.log('🔍 Setting timeout for search');
            clearTimeout(window.searchTimeout);
            window.searchTimeout = setTimeout(() => {
                console.log('🔍 Calling searchUsersForModal with:', query);
                searchUsersForModal(query);
            }, 300);
        }

        function searchUsersForModal(query) {
            console.log('🔍 searchUsersForModal called with query:', query);
            
            fetch(`/admin/users/search?q=${encodeURIComponent(query)}`)
                .then(response => {
                    console.log('🔍 Search response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('🔍 Search response data:', data);
                    if (data.success) {
                        displayUserSearchResultsForModal(data.users);
                    }
                })
                .catch(error => {
                    console.error('❌ Search error:', error);
                });
        }

        // 予約変更を保存
        function saveReservationChanges(event) {
            if (event && event.preventDefault) {
            event.preventDefault();
            }
            
            if (!currentReservation) {
                showMessage('予約データが見つかりません。', 'error');
                return false;
            }

            // フォームデータを取得
            const courseSelect = document.getElementById('edit-course');
            const statusSelect = document.getElementById('edit-status');
            const noteTextarea = document.getElementById('edit-note');
            
            console.log('📝 Form elements found:', {
                courseSelect: courseSelect ? 'found' : 'not found',
                statusSelect: statusSelect ? 'found' : 'not found',
                noteTextarea: noteTextarea ? 'found' : 'not found'
            });
            
            const newCourse = courseSelect ? courseSelect.value : `${currentReservation.duration}分`;
            const newDuration = extractDurationFromCourse(newCourse);
            const currentInterval = currentReservation.effective_interval_minutes ?? 10;
            
            // 営業時間内に収まるかチェック - use proper validation object like other functions
            let reservationDate = currentReservation.date;
            if (!reservationDate) {
                // Fallback: search reservations object for this reservation's date
                console.log('🔍 Save validation fallback: searching reservations object for reservation ID:', currentReservation.id);
                for (const [dateKey, dayReservations] of Object.entries(reservations)) {
                    const foundReservation = dayReservations.find(r => r.id === currentReservation.id);
                    if (foundReservation) {
                        reservationDate = dateKey;
                        console.log('🟩 Found reservation date in save validation fallback:', reservationDate);
                        break;
                    }
                }
            }
            
            const validationReservation = {
                ...currentReservation,
                date: reservationDate,
                time: currentReservation.time || currentReservation.startTime
            };
            
            console.log('🔍 Save validation reservation object:', validationReservation);
            
            const businessHoursValidation = validateReservationTimeWithinBusinessHours(validationReservation, newDuration, currentInterval);
            if (!businessHoursValidation.valid) {
                showMessage(businessHoursValidation.message, 'error');
                return;
            }
            
            // 重複チェック
            const overlapValidation = validateReservationOverlap(validationReservation, newDuration, currentInterval, currentReservation.id);
            if (!overlapValidation.valid) {
                showMessage(overlapValidation.message, 'error');
                return;
            }
            
            const formData = {
                reservation: {
                    course: newCourse,
                    status: statusSelect ? statusSelect.value : currentReservation.status,
                    note: noteTextarea ? noteTextarea.value : currentReservation.note || ''
                }
            };
            
            // ユーザーIDを送信
            if (currentReservation.userId) {
                formData.reservation.user_id = currentReservation.userId;
            }

            // 必要な値を保存してからモーダルを閉じる
            const reservationId = currentReservation.id;
            const originalUserId = currentReservation.userId;
            const reservationForUpdates = { ...currentReservation }; // 完全なコピーを保存
            
            // モーダルを即座に閉じる（レスポンシブな感覚のため）
            showMessage('予約を更新中...', 'info');
            closeReservationDetailModal();

            // バックエンドに更新リクエストを送信
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            fetch(`/admin/reservations/${reservationId}/update_booking`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify(formData)
            })
            .then(response => {
                console.log('📡 Response status:', response.status);
                console.log('📡 Response headers:', response.headers);
                
                if (!response.ok) {
                    // Try to get error details from response
                    return response.text().then(responseText => {
                        console.log('📡 Error response text:', responseText);
                        
                        let errorMessage = `HTTP error! status: ${response.status}`;
                        
                        // Try to parse as JSON for detailed error message
                        try {
                            const errorData = JSON.parse(responseText);
                            if (errorData.message) {
                                errorMessage += `, message: ${errorData.message}`;
                            }
                            if (errorData.errors) {
                                errorMessage += `, errors: ${JSON.stringify(errorData.errors)}`;
                            }
                        } catch (e) {
                            console.log('📡 Could not parse error response as JSON:', e);
                            // If it's not JSON, use the raw text if it's not too long
                            if (responseText && responseText.length < 200) {
                                errorMessage += `, response: ${responseText}`;
                            }
                        }
                        
                        throw new Error(errorMessage);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // ローカルデータを更新
                    const reservationData = data.reservation;
                    console.log('🔍 Backend response - reservationData.note:', reservationData.note);
                    console.log('🔍 reservationForUpdates before update:', reservationForUpdates);
                    
                    const updatedReservation = {
                        ...reservationForUpdates,
                        customer: reservationData.name || reservationData.user?.name || '未設定',
                        phone: reservationData.user?.phone_number || '',
                        email: reservationData.user?.email || '',
                        duration: extractDurationFromCourse(reservationData.course),
                        status: reservationData.status,
                        note: reservationData.note || '',
                        updatedAt: reservationData.updated_at,
                        userId: window.currentUserId || reservationForUpdates.userId // 新しいユーザーIDを設定
                    };
                    
                    console.log('🔍 updatedReservation.note after construction:', updatedReservation.note);
                    
                    // グローバルreservationsオブジェクトを更新
                    // Fix date key calculation - use the date field directly if available
                    let reservationDate;
                    if (reservationForUpdates.date) {
                        reservationDate = new Date(reservationForUpdates.date);
                    } else if (reservationForUpdates.start_time) {
                        reservationDate = new Date(reservationForUpdates.start_time);
                    } else {
                        // Fallback: find the date from global reservations object
                        for (const [dateKey, dayReservations] of Object.entries(reservations)) {
                            if (dayReservations.find(r => r.id === reservationId)) {
                                reservationDate = new Date(dateKey);
                                break;
                            }
                        }
                    }
                    
                    const reservationDateKey = reservationDate ? formatDateKey(reservationDate) : null;
                    console.log('🔍 Global update debug:', {
                        reservationId: reservationId,
                        reservationForUpdates_date: reservationForUpdates.date,
                        reservationForUpdates_start_time: reservationForUpdates.start_time,
                        reservationForUpdates_time: reservationForUpdates.time,
                        calculatedDate: reservationDate,
                        reservationDateKey: reservationDateKey,
                        hasDateKey: reservations[reservationDateKey] ? 'yes' : 'no',
                        availableKeys: Object.keys(reservations)
                    });
                    
                    if (reservations[reservationDateKey]) {
                        const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === reservationId);
                        console.log('🔍 Looking for reservation index:', reservationIndex, 'in array of length:', reservations[reservationDateKey].length);
                        if (reservationIndex !== -1) {
                            console.log('🔄 BEFORE - Global reservation note:', reservations[reservationDateKey][reservationIndex].note);
                            reservations[reservationDateKey][reservationIndex] = updatedReservation;
                            console.log('🔄 AFTER - Global reservation note:', reservations[reservationDateKey][reservationIndex].note);
                        } else {
                            console.log('❌ Reservation not found in global object!');
                        }
                    } else {
                        console.log('❌ Date key not found in global reservations object!');
                    }
                    
                    // モーダル内の変更日時を更新
                    let updateTimestamp = reservationData.updated_at;
                    if (!updateTimestamp) {
                        // Backend doesn't provide updated_at, use current time
                        updateTimestamp = new Date().toISOString();
                        console.log('🔍 Backend missing updated_at, using current time:', updateTimestamp);
                    }
                    console.log('🔍 About to call updateModalUpdatedAt with:', updateTimestamp);
                    updateModalUpdatedAt(updateTimestamp);
                    
                    // モーダル内のメモフィールドを更新
                    const noteElement = document.getElementById('edit-note');
                    if (noteElement && reservationData.note !== undefined) {
                        console.log('🔄 Before update - note element value:', noteElement.value);
                        console.log('🔄 Setting note field to:', reservationData.note);
                        noteElement.value = reservationData.note || '';
                        console.log('🔄 After update - note element value:', noteElement.value);
                        
                        // Force the textarea to reflect the new value
                        noteElement.defaultValue = reservationData.note || '';
                        
                        // Trigger input event to ensure any listeners are notified
                        noteElement.dispatchEvent(new Event('input', { bubbles: true }));
                    }
                    
                    // ユーザーが変更された場合、モーダルのチケットと履歴を再読み込み
                    console.log('🔍 User change check:', {
                        windowCurrentUserId: window.currentUserId,
                        originalUserId: originalUserId,
                        updatedReservationCustomer: updatedReservation.customer,
                        isUserChanged: window.currentUserId && window.currentUserId !== originalUserId
                    });
                    
                    if (window.currentUserId && window.currentUserId !== originalUserId) {
                        console.log('🔄 User changed, reloading modal data for new user:', window.currentUserId);
                        
                        // モーダルの顧客名を更新
                        const customerNameElement = document.querySelector('.customer-name-large');
                        console.log('🔍 Customer name element found:', customerNameElement);
                        if (customerNameElement) {
                            console.log('🔄 Updating customer name from:', customerNameElement.textContent, 'to:', updatedReservation.customer);
                            customerNameElement.textContent = updatedReservation.customer;
                            console.log('🔄 Updated customer name display to:', updatedReservation.customer);
                        } else {
                            console.error('❌ Customer name element not found!');
                        }
                        
                        // チケット情報を再読み込み
                        loadTicketsForUser(window.currentUserId);
                        
                        // 履歴情報を再読み込み
                        loadReservationHistoryForUser(window.currentUserId);
                    } else {
                        console.log('🔍 No user change detected or window.currentUserId not set');
                    }
                    
                    // カレンダーを再描画
                    generateTimeSlots();
                    
                    showMessage('予約が更新されました。', 'success');
                } else {
                    showMessage(`予約の更新に失敗しました: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error updating reservation:', error);
                showMessage('予約の更新中にエラーが発生しました。', 'error');
                // エラーの場合はカレンダーを再描画して最新の状態を表示
                generateTimeSlots();
            });
            
            return false; // Prevent any form submission
        }

        // モーダル内の変更日時を即座に更新
        function updateModalUpdatedAt(updatedAt) {
            console.log('🔍 updateModalUpdatedAt called with:', updatedAt);
            
            const modal = document.getElementById('reservationDetailModal');
            console.log('🔍 Modal found:', modal ? 'yes' : 'no');
            if (!modal) {
                console.log('❌ Modal not found, cannot update change date');
                return;
            }
            
            const systemInfoSection = modal.querySelector('.system-info-section');
            console.log('🔍 System info section found:', systemInfoSection ? 'yes' : 'no');
            if (!systemInfoSection) {
                console.log('❌ System info section not found, cannot update change date');
                // Let's try to find what sections do exist
                const allSections = modal.querySelectorAll('div[class*="section"], div[class*="info"]');
                console.log('🔍 Available sections in modal:', Array.from(allSections).map(s => s.className));
                return;
            }
            
            // 既存の変更日時要素を削除
            const detailItems = systemInfoSection.querySelectorAll('.detail-item');
            detailItems.forEach(item => {
                const label = item.querySelector('.detail-label');
                if (label && label.textContent === '変更日時') {
                    item.remove();
                }
            });
            
            // 作成日時要素を取得
            let createdAtItem = null;
            detailItems.forEach(item => {
                const label = item.querySelector('.detail-label');
                if (label && label.textContent === '作成日時') {
                    createdAtItem = item;
                }
            });
            
            if (!createdAtItem) return;
            
            // 新しい変更日時要素を作成
            const updatedAtItem = document.createElement('div');
            updatedAtItem.className = 'detail-item';
            updatedAtItem.innerHTML = `
                <span class="detail-label">変更日時</span>
                <span class="detail-value">${new Date(updatedAt).toLocaleString('ja-JP')}</span>
            `;
            
            // 作成日時の後に挿入
            createdAtItem.insertAdjacentElement('afterend', updatedAtItem);
            console.log('✅ Successfully added change date/time to modal');
        }

        // Add event listener to course dropdown to update change time immediately
        document.addEventListener('DOMContentLoaded', function() {
            // Add event listener for course changes
            document.addEventListener('change', function(event) {
                if (event.target && event.target.id === 'edit-course') {
                    console.log('🔍 Course dropdown changed, updating change time');
                    const currentTime = new Date().toISOString();
                    updateModalUpdatedAt(currentTime);
                }
            });
        });

        // Fixed updateIntervalOnChange function for calendar.html.erb
        // Replace the existing updateIntervalOnChange function around line 703 with this version

        function updateIntervalOnChange() {
            if (!currentReservation) {
                showMessage('予約データが見つかりません。', 'error');
                return;
            }

            const newInterval = parseInt(document.getElementById('edit-interval').value);
            const currentDuration = currentReservation.duration || 60;
            
            console.log('🔍 updateIntervalOnChange called with:', {
                newInterval,
                currentDuration,
                currentReservation
            });
            
            console.log('🔍 DEBUG: Full currentReservation object:', JSON.stringify(currentReservation, null, 2));

            // Extract time and date from the current reservation - this is the key fix
            let startTime;
            let reservationDate;
            
            // Try multiple ways to get the start time
            if (currentReservation.time) {
                startTime = currentReservation.time;
            } else if (currentReservation.startTime) {
                startTime = currentReservation.startTime;
            } else {
                // Try to get from form fields as fallback
                startTime = document.getElementById('reservationTime')?.value;
            }
            
            // Try multiple ways to get the date
            if (currentReservation.date) {
                reservationDate = currentReservation.date;
            } else if (currentReservation.reservationDate) {
                reservationDate = currentReservation.reservationDate;
            } else {
                // Try to get from form fields as fallback
                reservationDate = document.getElementById('reservationDate')?.value;
            }
            
            // If we still don't have date, try to extract from any available datetime
            if (!reservationDate && currentReservation.start_time) {
                try {
                    const startDateTime = new Date(currentReservation.start_time);
                    const year = startDateTime.getFullYear();
                    const month = String(startDateTime.getMonth() + 1).padStart(2, '0');
                    const day = String(startDateTime.getDate()).padStart(2, '0');
                    reservationDate = `${year}-${month}-${day}`;
                } catch (e) {
                    console.error('❌ Error parsing start_time:', e);
                }
            }
            
            // Final fallback: search through reservations object to find the date key
            if (!reservationDate && currentReservation.id) {
                console.log('🔍 Final fallback: searching reservations object for reservation ID:', currentReservation.id);
                for (const dateKey of Object.keys(reservations)) {
                    const dayReservations = reservations[dateKey];
                    if (dayReservations && dayReservations.find(r => r.id === currentReservation.id)) {
                        reservationDate = dateKey;
                        console.log('🟩 Found reservation date in fallback:', dateKey);
                        break;
                    }
                }
            }
            
            console.log('🔍 Interval change attempt:', {
                newInterval,
                currentDuration,
                currentReservation,
                startTime,
                date: reservationDate,
                extractedStartTime: startTime,
                extractedDate: reservationDate
            });

            // Validation - ensure we have required data
            if (!startTime || !reservationDate) {
                console.error('❌ Missing required data for validation:', { startTime, reservationDate });
                showMessage('予約の時間・日付情報が取得できません', 'warning');
                return;
            }

            console.log('🔍 About to call business hours validation with:', {
                reservation: {
                    date: reservationDate,
                    time: startTime,
                    start_time: currentReservation.start_time
                },
                duration: currentDuration,
                interval: newInterval
            });

            // Create a properly structured reservation object for validation
            const validationReservation = {
                date: reservationDate,
                time: startTime,
                start_time: currentReservation.start_time
            };

            const validation = validateReservationTimeWithinBusinessHours(
                validationReservation,
                currentDuration,
                newInterval
            );

            console.log('🔍 Interval change business hours validation result:', validation);

            if (!validation.valid) {
                console.log('❌ Business hours validation failed, showing error and returning');
                showMessage(validation.message, 'error');
                // 元の値に戻す
                const intervalSelect = document.getElementById('edit-interval');
                intervalSelect.value = currentReservation.effective_interval_minutes ?? 10;
                return;
            }
            
            // 重複チェック
            console.log('🔍 About to call overlap validation with:', {
                reservation: validationReservation,
                duration: currentDuration,
                interval: newInterval
            });
            const overlapValidation = validateReservationOverlap(validationReservation, currentDuration, newInterval, currentReservation.id);
            console.log('🔍 Interval change overlap validation result:', overlapValidation);
            if (!overlapValidation.valid) {
                showMessage(overlapValidation.message, 'error');
                // 元の値に戻す
                const intervalSelect = document.getElementById('edit-interval');
                intervalSelect.value = currentReservation.effective_interval_minutes ?? 10;
                return;
            }

            console.log('✅ Interval change validation passed');

            const reservationId = currentReservation.id;

            // バックエンドに更新リクエストを送信
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            const requestBody = {
                reservation: {
                individual_interval_minutes: newInterval
                }
            };
            console.log('🔍 Sending interval update request:', {
                reservationId,
                newInterval,
                requestBody
            });
            
            fetch(`/admin/reservations/${reservationId}/update_interval`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify(requestBody)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('🔍 Backend response for interval update:', data);
                if (data.success) {
                    // ローカルデータを更新
                    currentReservation.effective_interval_minutes = newInterval;
                    currentReservation.individual_interval_minutes = newInterval;
                    console.log('🔍 Updated currentReservation:', currentReservation);
                    
                    // updatedAtフィールドを更新
                    let updateTimestamp = data.updated_at;
                    if (!updateTimestamp) {
                        // Backend doesn't provide updated_at, use current time
                        updateTimestamp = new Date().toISOString();
                        console.log('🔍 Interval update: Backend missing updated_at, using current time:', updateTimestamp);
                    }
                    currentReservation.updatedAt = updateTimestamp;
                    // モーダル内の変更日時を更新
                    console.log('🔍 Interval update: About to call updateModalUpdatedAt with:', updateTimestamp);
                    updateModalUpdatedAt(updateTimestamp);
                        
                                            // グローバルreservationsオブジェクトも更新
                    const reservationDateKey = currentReservation.date || formatDateKey(new Date(currentReservation.start_time || currentReservation.time));
                    if (reservations[reservationDateKey]) {
                        const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                        if (reservationIndex !== -1) {
                            reservations[reservationDateKey][reservationIndex].updatedAt = updateTimestamp;
                            reservations[reservationDateKey][reservationIndex].effective_interval_minutes = newInterval;
                            reservations[reservationDateKey][reservationIndex].individual_interval_minutes = newInterval;
                            console.log('🔍 Updated local reservation data:', reservations[reservationDateKey][reservationIndex]);
                        }
                    }
                    
                    // カレンダーを再描画
                    generateTimeSlots();
                    
                    showMessage('準備時間が更新されました。', 'success');
                } else {
                    showMessage(`準備時間の更新に失敗しました: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error updating interval:', error);
                showMessage('準備時間の更新中にエラーが発生しました。', 'error');
            });
        }

        // ステータス変更時にカレンダーを即座に更新
        function updateCalendarOnStatusChange() {
            if (!currentReservation) {
                return;
            }

            const newStatus = document.getElementById('edit-status').value;
            
            // ローカルデータを更新
            currentReservation.status = newStatus;
            
            // グローバルreservationsオブジェクトも更新
            const reservationDateKey = formatDateKey(new Date(currentReservation.start_time || currentReservation.time));
            if (reservations[reservationDateKey]) {
                const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                if (reservationIndex !== -1) {
                    reservations[reservationDateKey][reservationIndex].status = newStatus;
                }
            }
            
            // カレンダーを再描画
            generateTimeSlots();
        }

        // 予約時間が営業時間内に収まるかチェック
        // Also update the validateReservationTimeWithinBusinessHours function
        function validateReservationTimeWithinBusinessHours(reservation, newDuration, newInterval) {
            console.log('🔍 validateReservationTimeWithinBusinessHours called with:', {
                reservation,
                newDuration,
                newInterval
            });

            // Extract date - improved logic
            let dateToCheck = reservation.date;
            
            // If no date field, try to extract from start_time
            if (!dateToCheck && reservation.start_time) {
                try {
                    const startDateTime = new Date(reservation.start_time);
                    const year = startDateTime.getFullYear();
                    const month = String(startDateTime.getMonth() + 1).padStart(2, '0');
                    const day = String(startDateTime.getDate()).padStart(2, '0');
                    dateToCheck = `${year}-${month}-${day}`;
                } catch (e) {
                    console.error('❌ Error parsing start_time for date:', e);
                }
            }

            // Extract start time
            let startTime = reservation.time;
            if (!startTime && reservation.start_time) {
                try {
                    const startDateTime = new Date(reservation.start_time);
                    startTime = startDateTime.toTimeString().substring(0, 5);
                } catch (e) {
                    console.error('❌ Error parsing start_time for time:', e);
                }
            }
            
            console.log('🔍 Date calculation debug:', {
                start_time: reservation.start_time,
                date: reservation.date,
                dateKey: dateToCheck,
                reservationDate: reservation.start_time,
                extractedDate: dateToCheck,
                extractedStartTime: startTime
            });

            // Validation - check we have the required data
            if (!dateToCheck || !startTime) {
                console.error('❌ Missing date or time for validation:', { dateToCheck, startTime });
                return { valid: false, message: '予約の日時情報が不正です' };
            }

            // Calculate day of week correctly using the extracted date
            const reservationDate = new Date(dateToCheck + 'T00:00:00'); // Force local timezone interpretation
            const dayOfWeek = reservationDate.getDay(); // 0 = Sunday, 1 = Monday, etc.

            // Convert start time to minutes
            const [hours, minutes] = startTime.split(':').map(Number);
            const startTimeInMinutes = hours * 60 + minutes;
            const totalDuration = newDuration + newInterval;
            const endTimeInMinutes = startTimeInMinutes + totalDuration;
            
            const endHours = Math.floor(endTimeInMinutes / 60);
            const endMins = endTimeInMinutes % 60;
            const endTimeStr = `${String(endHours).padStart(2, '0')}:${String(endMins).padStart(2, '0')}`;
            
            console.log('🔍 Validation debug:', {
                startTime,
                startTimeInMinutes,
                totalDuration,
                endTimeInMinutes,
                endTimeStr,
                dayOfWeek,
                dayName: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek],
                dateToCheck,
                reservationDate: reservationDate.toDateString()
            });

            // Check using your existing custom schedule logic
            const customScheduleDate = '2025-08-10'; // Your reference date for custom schedule
            
            // Check start time is within business hours
            const isStartTimeValid = isBusinessHourForCustomSchedule(dayOfWeek, startTimeInMinutes, customScheduleDate);
            console.log('🔍 Business hours check for start time:', {
                dayOfWeek,
                startTime,
                startTimeInMinutes,
                isValid: isStartTimeValid
            });
            
            if (!isStartTimeValid) {
                const message = `予約開始時間が営業時間外（${startTime}）のため、この設定はできません。`;
                console.log('❌ Start time validation failed:', startTime, 'dayOfWeek:', dayOfWeek);
                return { valid: false, message };
            }
            
            // Check end time is within business hours - allow ending exactly at closing time
            const isEndTimeValid = isBusinessHourForEndTime(dayOfWeek, endTimeInMinutes, customScheduleDate);
            console.log('🔍 Business hours check for end time:', {
                dayOfWeek,
                endTimeStr,
                endTimeInMinutes,
                isValid: isEndTimeValid
            });
            
            if (!isEndTimeValid) {
                const message = `予約終了時間が営業時間外（${endTimeStr}）に及ぶため、この設定はできません。`;
                console.log('❌ End time validation failed:', endTimeStr, 'dayOfWeek:', dayOfWeek);
                return { valid: false, message };
            }
            
            console.log('✅ Validation passed');
            return { valid: true };
        }

        // 定期的なスケジュール変更が既存予約に与える影響をチェック（非同期で全予約をチェック）
        async function checkRecurringScheduleImpact(dayOfWeek, newStartTime, newEndTime) {
            const affectedReservations = [];
            
            console.log('🔍 Checking recurring schedule impact:', {
                dayOfWeek,
                newStartTime,
                newEndTime,
                dayName: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]
            });
            
            try {
                // バックエンドから該当曜日の全予約を取得
                const response = await fetch(`/admin/reservations/by_day_of_week?day_of_week=${dayOfWeek}&from_date=${new Date().toISOString().split('T')[0]}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                });
                
                if (response.ok) {
                    const allReservations = await response.json();
                    console.log(`🔍 Retrieved ${allReservations.length} future reservations for ${['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]}`);
                    
                    // 取得した予約をチェック
                    for (const reservation of allReservations) {
                        const reservationTime = reservation.time;
                        const duration = reservation.duration || 60;
                        const interval = reservation.effective_interval_minutes || 10;
                        
                        // 予約の開始時間と終了時間を計算
                        const [startHour, startMin] = reservationTime.split(':').map(Number);
                        const startTimeInMinutes = startHour * 60 + startMin;
                        const endTimeInMinutes = startTimeInMinutes + duration + interval;
                        
                        // 新しい営業時間と比較
                        const [newStartHour, newStartMin] = newStartTime.split(':').map(Number);
                        const [newEndHour, newEndMin] = newEndTime.split(':').map(Number);
                        const newStartInMinutes = newStartHour * 60 + newStartMin;
                        const newEndInMinutes = newEndHour * 60 + newEndMin;
                        
                        // 予約が新しい営業時間外になるかチェック
                        if (startTimeInMinutes < newStartInMinutes || endTimeInMinutes > newEndInMinutes) {
                            affectedReservations.push({
                                ...reservation,
                                endTime: `${Math.floor(endTimeInMinutes / 60).toString().padStart(2, '0')}:${(endTimeInMinutes % 60).toString().padStart(2, '0')}`
                            });
                            
                            console.log('⚠️ Found affected reservation:', {
                                id: reservation.id,
                                customer: reservation.customer,
                                date: reservation.date,
                                time: reservationTime,
                                duration,
                                interval,
                                calculatedEndTime: `${Math.floor(endTimeInMinutes / 60).toString().padStart(2, '0')}:${(endTimeInMinutes % 60).toString().padStart(2, '0')}`,
                                newBusinessHours: `${newStartTime} - ${newEndTime}`,
                                reason: startTimeInMinutes < newStartInMinutes ? 'starts before business hours' : 'ends after business hours'
                            });
                        }
                    }
                } else {
                    console.error('❌ Failed to fetch reservations for validation');
                    // フォールバック: 現在のreservationsオブジェクトのみチェック
                    return checkRecurringScheduleImpactLocal(dayOfWeek, newStartTime, newEndTime);
                }
            } catch (error) {
                console.error('❌ Error fetching reservations for validation:', error);
                // フォールバック: 現在のreservationsオブジェクトのみチェック
                return checkRecurringScheduleImpactLocal(dayOfWeek, newStartTime, newEndTime);
            }
            
            console.log(`🔍 Found ${affectedReservations.length} affected reservations for ${['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]}`);
            return affectedReservations;
        }

        // 現在の週の特定の曜日の予約をチェック
        function checkCurrentWeekReservationsForDay(dayOfWeek) {
            const affectedReservations = [];
            
            console.log('🔍 Checking current week reservations for day:', {
                dayOfWeek,
                dayName: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek],
                allReservationDates: Object.keys(reservations),
                currentWeekStart: currentWeekStart
            });
            
            // 現在の週の該当曜日の日付を計算
            const weekStart = new Date(currentWeekStart);
            const targetDate = new Date(weekStart);
            targetDate.setDate(weekStart.getDate() + dayOfWeek);
            
            // UTCではなくローカル日付を使用してタイムゾーンの問題を回避
            const year = targetDate.getFullYear();
            const month = String(targetDate.getMonth() + 1).padStart(2, '0');
            const day = String(targetDate.getDate()).padStart(2, '0');
            const dateKey = `${year}-${month}-${day}`;
            
            console.log('🔍 Checking for reservations on date:', dateKey);
            console.log('🔍 Date calculation details:', {
                weekStartStr: currentWeekStart,
                weekStartDateLocal: `${weekStart.getFullYear()}-${String(weekStart.getMonth() + 1).padStart(2, '0')}-${String(weekStart.getDate()).padStart(2, '0')}`,
                dayOfWeek,
                targetDateStr: dateKey,
                targetDateObj: targetDate,
                availableReservationDates: Object.keys(reservations)
            });
            
            // 該当日の予約をチェック
            if (reservations[dateKey]) {
                const dayReservations = reservations[dateKey];
                console.log(`🔍 Found ${dayReservations.length} reservations on ${dateKey}`);
                
                for (const reservation of dayReservations) {
                    affectedReservations.push({
                        id: reservation.id,
                        customer: reservation.customer || reservation.name || '未設定',
                        date: dateKey,
                        time: reservation.time || reservation.start_time?.split('T')[1]?.substring(0, 5) || '時間不明'
                    });
                }
            }
            
            console.log('🔍 Total affected reservations for day toggle:', affectedReservations.length);
            return affectedReservations;
        }

        // ローカルreservationsオブジェクトのみをチェックする関数（フォールバック）
        function checkRecurringScheduleImpactLocal(dayOfWeek, newStartTime, newEndTime) {
            const affectedReservations = [];
            
            // 現在表示中の予約のみをチェック（元のロジック）
            for (const [dateKey, dayReservations] of Object.entries(reservations)) {
                const date = new Date(dateKey + 'T00:00:00');
                const reservationDayOfWeek = date.getDay();
                
                if (reservationDayOfWeek === dayOfWeek) {
                    for (const reservation of dayReservations) {
                        const reservationTime = reservation.time;
                        const duration = reservation.duration || 60;
                        const interval = reservation.effective_interval_minutes || 10;
                        
                        const [startHour, startMin] = reservationTime.split(':').map(Number);
                        const startTimeInMinutes = startHour * 60 + startMin;
                        const endTimeInMinutes = startTimeInMinutes + duration + interval;
                        
                        const [newStartHour, newStartMin] = newStartTime.split(':').map(Number);
                        const [newEndHour, newEndMin] = newEndTime.split(':').map(Number);
                        const newStartInMinutes = newStartHour * 60 + newStartMin;
                        const newEndInMinutes = newEndHour * 60 + newEndMin;
                        
                        if (startTimeInMinutes < newStartInMinutes || endTimeInMinutes > newEndInMinutes) {
                            affectedReservations.push({
                                ...reservation,
                                date: dateKey,
                                endTime: `${Math.floor(endTimeInMinutes / 60).toString().padStart(2, '0')}:${(endTimeInMinutes % 60).toString().padStart(2, '0')}`
                            });
                        }
                    }
                }
            }
            
            return affectedReservations;
        }

        // Helper function that integrates with your existing custom schedule logic
        function isBusinessHourForCustomSchedule(dayOfWeek, timeInMinutes, customScheduleDate) {
            // Convert minutes back to time string for existing isBusinessHour function
            const hour = Math.floor(timeInMinutes / 60);
            const minute = timeInMinutes % 60;
            const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
            
            console.log('🔍 Checking business hour with existing function:', {
                dayOfWeek,
                timeStr,
                timeInMinutes
            });
            
            // Use your existing isBusinessHour function if available
            if (typeof isBusinessHour === 'function') {
                const result = isBusinessHour(dayOfWeek, timeStr);
                console.log('🔍 Existing isBusinessHour result:', result);
                return result;
            }
            
            // Fallback: basic business hours check
            console.log('🔍 Using fallback business hours (9:00-18:00)');
            const businessStart = 9 * 60;  // 9:00 in minutes  
            const businessEnd = 18 * 60;   // 18:00 in minutes
            
            // Sunday check
            if (dayOfWeek === 0) {
                return false; // Sunday closed
            }
            
            return timeInMinutes >= businessStart && timeInMinutes < businessEnd;
        }

        // Business hour check for end times - allows ending exactly at closing time
        function isBusinessHourForEndTime(dayOfWeek, timeInMinutes, customScheduleDate) {
            // Convert minutes back to time string for existing isBusinessHour function
            const hour = Math.floor(timeInMinutes / 60);
            const minute = timeInMinutes % 60;
            const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
            
            console.log('🔍 Checking business hour for END TIME with existing function:', {
                dayOfWeek,
                timeStr,
                timeInMinutes
            });
            
            // Use your existing isBusinessHour function if available
            if (typeof isBusinessHour === 'function') {
                // First check if it's within regular business hours
                const isWithinBusinessHours = isBusinessHour(dayOfWeek, timeStr);
                
                console.log('🔍 Existing isBusinessHour result for end time:', isWithinBusinessHours);
                
                // If within business hours, allow it
                if (isWithinBusinessHours) {
                    return true;
                }
                
                // If not within regular business hours, check common closing times
                // This is a simplified approach - check if it's exactly at common closing times
                const commonClosingTimes = [
                    17 * 60,  // 17:00
                    18 * 60,  // 18:00
                    19 * 60,  // 19:00
                    20 * 60,  // 20:00
                    21 * 60,  // 21:00
                    22 * 60   // 22:00
                ];
                
                const isAtClosingTime = commonClosingTimes.includes(timeInMinutes);
                console.log('🔍 Checking if end time is at common closing time:', {
                    endTimeInMinutes: timeInMinutes,
                    timeStr,
                    isAtClosingTime
                });
                
                if (isAtClosingTime) {
                    console.log('✅ End time is at common closing time - allowing');
                    return true;
                }
                
                return false;
            }
            
            // Fallback: basic business hours check with closing time allowance
            console.log('🔍 Using fallback business hours for end time (9:00-18:00, allowing 18:00)');
            const businessStart = 9 * 60;  // 9:00 in minutes  
            const businessEnd = 18 * 60;   // 18:00 in minutes
            
            // Sunday check
            if (dayOfWeek === 0) {
                return false; // Sunday closed
            }
            
            // Allow ending exactly at closing time (note: <= instead of <)
            return timeInMinutes >= businessStart && timeInMinutes <= businessEnd;
        }

        // 予約の重複チェック
        function validateReservationOverlap(reservation, newDuration, newInterval, excludeReservationId = null) {
            if (!reservation) return { valid: false, message: '予約データが見つかりません。' };
            
            // 予約の開始時間を取得
            let startTime;
            let dateKey;
            
            // 優先順位: start_time > dateKey > date > time
            if (reservation.start_time) {
                const dateTime = new Date(reservation.start_time);
                startTime = `${dateTime.getHours().toString().padStart(2, '0')}:${dateTime.getMinutes().toString().padStart(2, '0')}`;
                dateKey = formatDateKey(dateTime);
            } else if (reservation.dateKey) {
                startTime = reservation.time;
                dateKey = reservation.dateKey;
            } else if (reservation.date && reservation.time) {
                startTime = reservation.time;
                dateKey = reservation.date;
            } else if (reservation.time) {
                startTime = reservation.time;
                // 現在の週の開始日を使用
                const reservationDate = new Date(currentWeekStart);
                dateKey = formatDateKey(reservationDate);
            } else {
                return { valid: false, message: '予約の開始時間が見つかりません。' };
            }
            
            const [startHour, startMin] = startTime.split(':').map(Number);
            const startTimeInMinutes = startHour * 60 + startMin;
            const totalDuration = newDuration + newInterval;
            const endTimeInMinutes = startTimeInMinutes + totalDuration;
            
            // 指定日の予約を取得（自分以外）
            const dayReservations = reservations[dateKey] || [];
            
            console.log('🔍 Overlap validation debug:', {
                dateKey,
                startTime,
                startTimeInMinutes,
                totalDuration,
                endTimeInMinutes,
                reservationId: reservation.id,
                dayReservations: dayReservations.length,
                reservationData: {
                    start_time: reservation.start_time,
                    dateKey: reservation.dateKey,
                    date: reservation.date,
                    time: reservation.time
                }
            });
            
            // 重複チェック（インターバル時間も含む）
            for (const existingReservation of dayReservations) {
                if (existingReservation.id === reservation.id || existingReservation.id === excludeReservationId) {
                    console.log('⏭️ Skipping self or excluded reservation:', existingReservation.id);
                    continue; // 自分または除外対象は除外
                }
                
                const existingStart = new Date(`${dateKey}T${existingReservation.time}`);
                const existingEnd = new Date(existingStart.getTime() + existingReservation.duration * 60 * 1000);
                
                // 既存予約のインターバル時間を取得
                const existingIntervalMinutes = existingReservation.effective_interval_minutes ?? 10;
                const existingEndWithInterval = new Date(existingEnd.getTime() + existingIntervalMinutes * 60 * 1000);
                
                // 新しい予約の終了時間
                const newEnd = new Date(`${dateKey}T${startTime}`);
                newEnd.setMinutes(newEnd.getMinutes() + totalDuration);
                
                console.log('🔍 Comparing with existing reservation:', {
                    existingId: existingReservation.id,
                    existingTime: `${existingReservation.time} - ${new Date(existingEndWithInterval).toTimeString().slice(0, 5)}`,
                    newTime: `${startTime} - ${newEnd.toTimeString().slice(0, 5)}`,
                    existingInterval: existingIntervalMinutes,
                    newInterval: newInterval
                });
                
                // 重複判定（インターバル時間も含む）
                if (startTimeInMinutes < (existingEndWithInterval.getHours() * 60 + existingEndWithInterval.getMinutes()) && 
                    endTimeInMinutes > (existingStart.getHours() * 60 + existingStart.getMinutes())) {
                    console.log('🚫 Overlap detected with reservation:', existingReservation.id);
                    return { 
                        valid: false, 
                        message: `予約時間が既存の予約（${existingReservation.customer}様）と重複するため、この設定はできません。` 
                    };
                }
            }
            
            console.log('✅ No overlaps detected');
            return { valid: true, message: '' };
        }

        // コース変更時にカレンダーを即座に更新
        function updateCalendarOnCourseChange() {
            if (!currentReservation) return;
            
            const courseSelect = document.getElementById('edit-course');
            if (!courseSelect) return;
            
            const newCourse = courseSelect.value;
            const newDuration = parseInt(newCourse);
            const currentInterval = currentReservation.effective_interval_minutes ?? 10;
            
            console.log('🔄 Course changed to:', newCourse, 'Duration:', newDuration);
            
            // 営業時間内に収まるかチェック
            console.log('🔍 Validating course change for reservation:', currentReservation);
            
            // Extract proper date and time from reservation for validation (same logic as interval change)
            let startTime = currentReservation.time || currentReservation.startTime;
            let reservationDate = currentReservation.date || currentReservation.reservationDate;
            
            // Final fallback: search through reservations object to find the date key
            if (!reservationDate && currentReservation.id) {
                console.log('🔍 Course change fallback: searching reservations object for reservation ID:', currentReservation.id);
                for (const dateKey of Object.keys(reservations)) {
                    const dayReservations = reservations[dateKey];
                    if (dayReservations && dayReservations.find(r => r.id === currentReservation.id)) {
                        reservationDate = dateKey;
                        console.log('🟩 Found reservation date in course change fallback:', dateKey);
                        break;
                    }
                }
            }
            
            // Create properly structured reservation object for validation
            const validationReservation = {
                date: reservationDate,
                time: startTime,
                start_time: currentReservation.start_time
            };
            
            console.log('🔍 Course change validation reservation:', validationReservation);
            
            const businessHoursValidation = validateReservationTimeWithinBusinessHours(validationReservation, newDuration, currentInterval);
            console.log('🔍 Course change business hours validation result:', businessHoursValidation);
            if (!businessHoursValidation.valid) {
                showMessage(businessHoursValidation.message, 'error');
                // 元の値に戻す
                courseSelect.value = currentReservation.course || currentReservation.duration.toString();
                return;
            }
            
            // 重複チェック - use the same properly structured reservation object and exclude current reservation
            const overlapValidation = validateReservationOverlap(validationReservation, newDuration, currentInterval, currentReservation.id);
            console.log('🔍 Course change overlap validation result:', overlapValidation);
            if (!overlapValidation.valid) {
                showMessage(overlapValidation.message, 'error');
                // 元の値に戻す
                courseSelect.value = currentReservation.course || currentReservation.duration.toString();
                return;
            }
            
            // ローカルデータを即座に更新（警告があっても更新する）
            currentReservation.duration = newDuration;
            currentReservation.course = newCourse;
            
            // グローバルreservationsオブジェクトも更新 - use the correct date
            const reservationDateKey = reservationDate; // Use the date we already found
            if (reservations[reservationDateKey]) {
                const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                if (reservationIndex !== -1) {
                    reservations[reservationDateKey][reservationIndex].duration = newDuration;
                    reservations[reservationDateKey][reservationIndex].course = newCourse;
                }
            }
            
            // カレンダーを即座に再描画
            generateTimeSlots();
            
            console.log('✅ Calendar updated immediately for course change');
        }



        // ユーザー選択モーダルを開く
        function openUserSelectionModal() {
            console.log('🔍 openUserSelectionModal called');
            
            // 検索入力フィールドをクリア
            const searchInput = document.getElementById('userSearchInput');
            if (searchInput) {
                searchInput.value = '';
                console.log('🔍 Search input found and cleared');
            } else {
                console.error('❌ Search input not found');
            }
            
            // 検索結果をクリア
            const searchResults = document.getElementById('userSelectionSearchResults');
            if (searchResults) {
                searchResults.innerHTML = '';
                searchResults.style.display = 'none';
                console.log('🔍 Search results cleared and hidden');
            } else {
                console.error('❌ Search results container not found');
            }
            
            // 保存ボタンを無効化
            const saveBtn = document.getElementById('saveUserBtn');
            if (saveBtn) {
                saveBtn.disabled = true;
            }
            
            // イベントリスナーを設定
            if (searchInput) {
                // 既存のイベントリスナーを削除
                searchInput.removeEventListener('input', handleUserSearch);
                
                // 入力イベント
                searchInput.addEventListener('input', handleUserSearch);
                console.log('🔍 Input event listener added');
                
                // フォーカスアウト時に結果を隠す
                searchInput.addEventListener('blur', function() {
                    setTimeout(() => {
                        hideUserSearchResults();
                    }, 200);
                });
                
                // フォーカス時に結果を表示（入力がある場合）
                searchInput.addEventListener('focus', function() {
                    const query = this.value.trim();
                    if (query.length >= 2) {
                        searchUsersForModal(query);
                    }
                });
                
                searchInput.focus();
            }
            
            document.getElementById('userSelectionModal').style.display = 'block';
            console.log('🔍 Modal displayed');
            
            // Debug modal dimensions
            const modal = document.getElementById('userSelectionModal');
            const modalContent = modal.querySelector('.modal-content');
            console.log('🔍 Modal dimensions:', modal.offsetWidth, 'x', modal.offsetHeight);
            console.log('🔍 Modal content dimensions:', modalContent.offsetWidth, 'x', modalContent.offsetHeight);
        }

        // ユーザー検索を処理
        function handleUserSearch(event) {
            const query = event.target.value.trim();
            console.log('🔍 handleUserSearch called with query:', query);
            
            // デバウンス処理
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }
            
            if (query.length < 2) {
                console.log('🔍 Query too short, hiding results');
                hideUserSearchResults();
                return;
            }
            
            console.log('🔍 Setting timeout for search');
            searchTimeout = setTimeout(() => {
                console.log('🔍 Calling searchUsersForModal with:', query);
                searchUsersForModal(query);
            }, 300);
        }

        // モーダル用ユーザー検索
        function searchUsersForModal(query) {
            console.log('🔍 searchUsersForModal called with query:', query);
            fetch(`/admin/reservations/search_users?query=${encodeURIComponent(query)}`)
                .then(response => {
                    console.log('🔍 Search response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('🔍 Search response data:', data);
                    if (data.success) {
                        displayUserSearchResultsForModal(data.users);
                    } else {
                        console.error('❌ User search failed:', data.message);
                        hideUserSearchResults();
                    }
                })
                .catch(error => {
                    console.error('❌ Error searching users:', error);
                    hideUserSearchResults();
                });
        }

        // モーダル用検索結果表示
        function displayUserSearchResultsForModal(users) {
            console.log('🔍 displayUserSearchResultsForModal called with users:', users);
            const searchResults = document.getElementById('userSelectionSearchResults');
            if (!searchResults) {
                console.error('❌ Search results container not found');
                return;
            }
            
            if (users.length === 0) {
                searchResults.innerHTML = '<div class="user-search-item">該当するユーザーが見つかりません</div>';
                searchResults.style.display = 'block';
                console.log('🔍 No users found, showing message');
                return;
            }
            
            const resultsHtml = users.map(user => `
                <div class="user-search-item" onclick="selectUserForModal(${user.id}, '${user.name}', '${user.phone_number}', '${user.email}')">
                    <div class="user-name">${user.name}</div>
                    <div class="user-details">
                        📞 ${user.phone_number || '未設定'} | 📧 ${user.email || '未設定'}
                        ${user.active_tickets > 0 ? `<span class="user-tickets"> | 🎫 残${user.active_tickets}枚</span>` : ''}
                        ${user.last_visit !== 'なし' ? ` | 📅 最終来店: ${user.last_visit}` : ''}
                    </div>
                </div>
            `).join('');
            
            searchResults.innerHTML = resultsHtml;
            searchResults.style.display = 'block';
            
            // Let the container size naturally based on content
            searchResults.style.height = 'auto';
            
            // Force a reflow to ensure the browser recalculates dimensions
            searchResults.offsetHeight;
            
            console.log('🔍 Search results displayed:', users.length, 'users');
            

        }

        // モーダル用ユーザー選択
        function selectUserForModal(userId, name, phone, email) {
            console.log('🔍 selectUserForModal called with:', { userId, name, phone, email });
            console.log('🔍 Current reservation user ID:', currentReservation?.userId);
            
            // 選択されたユーザーを保存
            window.selectedUser = {
                id: userId,
                name: name,
                phone_number: phone,
                email: email
            };
            
            // 検索結果をクリアして選択されたユーザーを表示
            const searchResults = document.getElementById('userSelectionSearchResults');
            if (searchResults) {
                searchResults.innerHTML = `
                    <div class="selected-user">
                        <div class="user-info">
                            <div class="user-name">✅ ${name}</div>
                            <div class="user-details">
                                📞 ${phone || '未設定'} | 📧 ${email || '未設定'}
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // 保存ボタンを有効化
            const saveBtn = document.getElementById('saveUserBtn');
            if (saveBtn) {
                saveBtn.disabled = false;
            }
            

            
            // 成功メッセージ
            showMessage(`既存ユーザー「${name}」を選択しました`, 'success');
        }

        // ユーザー選択モーダルを閉じる
        function closeUserSelectionModal() {
            document.getElementById('userSelectionModal').style.display = 'none';
        }
        
        // グローバル関数として公開
        window.closeUserSelectionModal = closeUserSelectionModal;

        // ユーザー選択を保存
        function saveUserSelection() {
            if (!window.selectedUser) {
                showMessage('お客様を選択してください。', 'error');
                return;
            }
            
            const newUserId = window.selectedUser.id;
            const newUserName = window.selectedUser.name;
            const newUserPhone = window.selectedUser.phone_number || '';
            const newUserEmail = window.selectedUser.email || '';
            
            console.log('🔍 saveUserSelection - Selected user:', { newUserId, newUserName, newUserPhone, newUserEmail });
            console.log('🔍 saveUserSelection - Current reservation user ID:', currentReservation?.userId);
            
            // 顧客情報を更新
            const customerNameElement = document.querySelector('.customer-name-large');
            if (customerNameElement) {
                customerNameElement.textContent = newUserName;
            }
            
            const phoneElement = document.querySelector('.customer-phone');
            if (phoneElement) {
                phoneElement.textContent = newUserPhone || '電話番号未記入';
            }
            
            const emailElement = document.querySelector('.customer-email');
            if (emailElement) {
                emailElement.textContent = newUserEmail || 'メールアドレス未記入';
            }
            
            // ローカルデータも更新
            if (currentReservation) {
                currentReservation.customer = newUserName;
                currentReservation.phone = newUserPhone;
                currentReservation.email = newUserEmail;
                currentReservation.userId = newUserId;
            }
            
            // グローバルreservationsオブジェクトも更新
            const reservationDateKey = formatDateKey(new Date(currentReservation.start_time || currentReservation.time));
            if (reservations[reservationDateKey]) {
                const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                if (reservationIndex !== -1) {
                    reservations[reservationDateKey][reservationIndex].customer = newUserName;
                    reservations[reservationDateKey][reservationIndex].phone = newUserPhone;
                    reservations[reservationDateKey][reservationIndex].email = newUserEmail;
                    reservations[reservationDateKey][reservationIndex].userId = newUserId;
                }
            }
            
            // バックエンドにユーザー変更を保存
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            fetch(`/admin/reservations/${currentReservation.id}/update_booking`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify({
                    reservation: {
                        user_id: newUserId
                    }
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // レスポンスから更新されたユーザー情報を取得
                    const updatedUser = data.reservation.user;
                    
                    // ローカルデータを更新
                    if (currentReservation) {
                        currentReservation.customer = updatedUser.name;
                        currentReservation.phone = updatedUser.phone_number;
                        currentReservation.email = updatedUser.email;
                        currentReservation.userId = updatedUser.id;
                    }
                    
                    // グローバルreservationsオブジェクトも更新
                    const reservationDateKey = formatDateKey(new Date(currentReservation.start_time || currentReservation.time));
                    if (reservations[reservationDateKey]) {
                        const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                        if (reservationIndex !== -1) {
                            reservations[reservationDateKey][reservationIndex].customer = updatedUser.name;
                            reservations[reservationDateKey][reservationIndex].phone = updatedUser.phone_number;
                            reservations[reservationDateKey][reservationIndex].email = updatedUser.email;
                            reservations[reservationDateKey][reservationIndex].userId = updatedUser.id;
                        }
                    }
                    
                    // グローバル変数も更新
                    window.currentUserId = updatedUser.id;
                    
                    // 即座にモーダルの顧客名を更新
                    const customerNameElement = document.querySelector('.customer-name-large');
                    if (customerNameElement) {
                        customerNameElement.textContent = updatedUser.name;
                        console.log('✅ Customer name updated immediately to:', updatedUser.name);
                    }
                    
                    // 元のユーザーIDを保存してから更新
                    currentReservation.originalUserId = currentReservation.userId;
                    
                    // currentReservationも即座に更新
                    currentReservation.customer = updatedUser.name;
                    currentReservation.userId = updatedUser.id;
                    currentReservation.phone = updatedUser.phone_number;
                    currentReservation.email = updatedUser.email;
                    
                    // カレンダーを即座に再描画して変更を反映
                    generateTimeSlots();
                    
                    // チケットと履歴を新しいユーザーで更新
                    loadTicketsAndHistoryForUser(updatedUser.id);
                    
                    // モーダルを閉じる
                    closeUserSelectionModal();
                    
                    showMessage('お客様が変更されました。', 'success');
                    
                    console.log('🔄 Customer changed to:', updatedUser.name);
                    
                    // ページを再読み込みして確実にデータを同期
                    setTimeout(() => {
                        window.location.reload();
                    }, 500);
                } else {
                    showMessage(`お客様の変更に失敗しました: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('❌ Error updating user:', error);
                showMessage('お客様の変更中にエラーが発生しました。', 'error');
            });
        }



        // バックエンドからシフト設定を読み込み
        function loadShiftSettingsFromBackend() {
            const weekStartStr = formatDateKey(currentWeekStart);
            
            return fetch(`/admin/reservations/load_shift_settings?week_start_date=${weekStartStr}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        defaultSchedule = data.default_schedule;
                        weeklySchedules[weekStartStr] = data.current_week_schedule;
                        

                        
                        // 週固有のスケジュールがない場合のログ
                        if (!data.has_custom_schedule) {
    
                        }
  } else {
                        console.error('❌ Failed to load shift settings:', data.message);
                        // フォールバック: デフォルトスケジュールを初期化
                        initializeDefaultSchedule();
                    }
                })
                .catch(error => {
                    console.error('❌ Error loading shift settings:', error);
                    // フォールバック: デフォルトスケジュールを初期化
                    initializeDefaultSchedule();
                });
        }

        // バックエンドから予約データを読み込み
        function loadReservationsFromBackend() {
            const weekStartStr = formatDateKey(currentWeekStart);

            
            return fetch(`/admin/reservations/load_reservations?week_start_date=${weekStartStr}`)
                .then(response => response.json())
                .then(data => {

                    if (data.success) {
                        // 新しい週の予約データで既存のデータを更新（既存データを保持）
                        console.log('🔄 Loading reservations from backend');
                        console.log('📅 Existing reservations:', reservations);
                        console.log('📅 Backend reservations:', data.reservations);
                        
                        // 既存のデータと新しいデータをマージ（既存データを保持）
                        for (const [dateKey, newReservations] of Object.entries(data.reservations)) {
                            reservations[dateKey] = newReservations;
                        }
                        
                        console.log('📅 Final merged reservations:', reservations);
                        console.log('📅 Checking specific reservation 97:', reservations['2025-08-13']?.find(r => r.id === 97));
                        
                        // Debug: Check if AJAX reservations have timestamp fields and interval data
                        if (data.reservations && Object.keys(data.reservations).length > 0) {
                            const firstDateKey = Object.keys(data.reservations)[0];
                            const firstReservation = data.reservations[firstDateKey][0];
                            console.log('🔍 First AJAX reservation structure:', firstReservation);
                            console.log('🔍 AJAX interval data:', {
                                effective_interval_minutes: firstReservation.effective_interval_minutes,
                                individual_interval_minutes: firstReservation.individual_interval_minutes,
                                id: firstReservation.id
                            });
                        }
                        
                        // カレンダーを即座に再描画して変更を反映
                        console.log('🔄 Calling generateTimeSlots after data load');
                        generateTimeSlots();
    } else {
                        console.error('❌ Failed to load reservations:', data.message);
                    }
                })
                .catch(error => {
                    console.error('❌ Error loading reservations:', error);
                });
        }

        // デフォルトスケジュールを初期化
        function initializeDefaultSchedule() {
            defaultSchedule = {
                0: { enabled: false, times: [] }, // 日曜日は休業
                1: { enabled: true, times: [{ start: '09:00', end: '20:00' }] }, // 月曜日
                2: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 火曜日
                3: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 水曜日
                4: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 木曜日
                5: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 金曜日
                6: { enabled: true, times: [{ start: '09:00', end: '18:00' }] }, // 土曜日
            };
        }

        // 週表示を描画
        function renderWeekView() {
            updateWeekHeader();
            generateTimeSlots();
        }

        // 週のヘッダーを更新
        function updateWeekHeader() {
            const endDate = new Date(currentWeekStart);
            endDate.setDate(endDate.getDate() + 6);
            
            const startStr = formatDateShort(currentWeekStart);
            const endStr = formatDateShort(endDate);
            
            document.getElementById('currentWeek').textContent = 
                `${currentWeekStart.getFullYear()}年 ${startStr} - ${endStr}`;
            
            // 日付ヘッダーを更新
            const headers = document.querySelectorAll('.day-header');
            for (let i = 0; i < headers.length; i++) {
                const date = new Date(currentWeekStart);
                date.setDate(date.getDate() + i);
                
                const dayName = dayNames[date.getDay()];
                const dateStr = `${date.getMonth() + 1}/${date.getDate()}`;
                
                // CSSクラスをリセット
                headers[i].classList.remove('sunday', 'saturday');
                
                // 正しいCSSクラスを追加
                if (date.getDay() === 0) {
                    headers[i].classList.add('sunday');
                } else if (date.getDay() === 6) {
                    headers[i].classList.add('saturday');
                }
                
                headers[i].innerHTML = `${dayName}<br><span style="font-size: 12px;">${dateStr}</span>`;
            }
        }

        // タイムスロットを生成
        function generateTimeSlots() {
            console.log('🔍 generateTimeSlots called - defaultSchedule:', defaultSchedule);
            console.log('🔍 generateTimeSlots - current reservations data:', reservations);
            console.log('🔍 generateTimeSlots - reservation 97 data:', reservations['2025-08-13']?.find(r => r.id === 97));
            const scheduleBody = document.getElementById('scheduleBody');
            scheduleBody.innerHTML = '';
            
            // 8:00から21:00まで10分刻みで生成
            for (let hour = 8; hour <= 21; hour++) {
                for (let minute = 0; minute < 60; minute += 10) {
                    if (hour === 21 && minute > 0) break; // 21:00で終了
                    
                    const timeStr = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
                    
                    // 行コンテナを作成
                    const row = document.createElement('div');
                    row.className = 'schedule-row';
                    
                    // 行全体のスタイルを追加
                    if (minute === 0) {
                        row.classList.add('hour-row');
                    } else if (minute === 30) {
                        row.classList.add('half-hour-row');
                    }
                    
                    // 時刻ラベル
                    const timeSlot = document.createElement('div');
                    timeSlot.className = 'time-slot';
                    
                    // 時間マーカーのスタイルを追加（10分刻みに対応）
                    if (minute === 0) {
                        timeSlot.classList.add('hour-marker');
                    } else if (minute === 30) {
                        timeSlot.classList.add('half-hour-marker');
                    }
                    
                    timeSlot.textContent = timeStr;
                    row.appendChild(timeSlot);
                    
                    // 各曜日のセル
                    for (let day = 0; day < 7; day++) {
                        const cell = document.createElement('div');
                        cell.className = 'schedule-cell';
                        cell.dataset.day = day;
                        cell.dataset.time = timeStr;
                        
                        // ドロップゾーンとして設定
                        cell.addEventListener('dragover', handleDragOver);
                        cell.addEventListener('drop', handleDrop);
                        cell.addEventListener('dragenter', handleDragEnter);
                        cell.addEventListener('dragleave', handleDragLeave);
                        
                        const scheduleDate = new Date(currentWeekStart);
                        scheduleDate.setDate(scheduleDate.getDate() + day);
                        const dateKey = formatDateKey(scheduleDate);
                        
                                                // 営業時間チェック
                        if (isBusinessHour(day, timeStr)) {
                            // 予約チェック
                            const reservation = findReservation(dateKey, timeStr);
                            
                            // デバッグ用ログ（特定の時間のみ）
                            if (timeStr === '10:00' && day === 1) {
                                console.log(`🔍 Checking for reservation at ${dateKey} ${timeStr}:`, {
                                    dayReservations: reservations[dateKey] || [],
                                    foundReservation: reservation,
                                    isReservationStart: reservation ? isReservationStart(dateKey, timeStr) : false
                                });
                            }
                            
                            if (reservation) {
                                // 予約の開始スロットの場合のみブロックを表示
                                if (isReservationStart(dateKey, timeStr)) {
                                    console.log('🎯 Creating reservation block for:', {
                                        id: reservation.id,
                                        customer: reservation.customer,
                                        userId: reservation.userId,
                                        date: dateKey,
                                        time: timeStr,
                                        effective_interval_minutes: reservation.effective_interval_minutes,
                                        individual_interval_minutes: reservation.individual_interval_minutes,
                                        duration: reservation.duration
                                    });
                                    const block = createSpanningReservationBlock(reservation, dateKey, timeStr);
                                    cell.appendChild(block);
                                    // 予約詳細を表示するためのクリックイベント（休憩ブロック以外）
                                    if (true) { // 常に実行（is_break属性は無効化）
                                    cell.addEventListener('click', (e) => {
                                        // ドラッグ中でない場合のみクリックイベントを実行
                                        if (!isDragging) {
                                                console.log('👤 Regular reservation block clicked:', reservation);
                                        openReservationDetailModal(reservation);
                                        }
                                    });
                                    }
                                    
                                    // ドラッグイベントを追加（メインブロックに追加）
                                    console.log('🎯 Setting up drag events for reservation:', reservation.id);
                                    block.addEventListener('dragstart', handleDragStart);
                                    block.addEventListener('dragend', handleDragEnd);
                                    
                                    // Also add drag over to the cell for visual feedback
                                    cell.addEventListener('dragover', handleDragOver);
                                    
                                    // デバッグ用ログ（特定の予約のみ）
                                    if (reservation.customer === '田中様') {
                                        console.log(`🔍 Created reservation block for ${dateKey} ${timeStr}:`, reservation);
                                    }
                                }
    } else {
                                cell.classList.add('available', 'bookable');
                                // 新規予約作成のためのクリックイベント
                                cell.addEventListener('click', () => {
                                    const slotDate = new Date(currentWeekStart);
                                    slotDate.setDate(slotDate.getDate() + day);
                                    showSlotOptions(slotDate, timeStr, cell);
                                });
                            }
                        } else {
                            cell.classList.add('unavailable', 'outside-business-hours');
                        }
                        
                        row.appendChild(cell);
                    }
                    
                    scheduleBody.appendChild(row);
                }
            }
            
            // スケジュール生成後にキャンセル表示を更新
            setTimeout(() => {
                updateCancellationDisplayImmediately();
            }, 10);
        }

        // 現在の週のスケジュールを取得
        function getCurrentWeekSchedule(specificDate = null) {
            // 安全チェック: デフォルトスケジュールが読み込まれているか確認
            if (!defaultSchedule) {
                console.warn('⚠️ Default schedule not loaded, initializing fallback');
                initializeDefaultSchedule();
            }
            
            let weekKey;
            if (specificDate) {
                // 指定された日付の週の開始日（日曜日）を計算
                const weekStart = new Date(specificDate);
                weekStart.setDate(specificDate.getDate() - specificDate.getDay());
                weekKey = formatDateKey(weekStart);
                console.log(`🔍 Calculating week key for specific date ${specificDate.toISOString().split('T')[0]}: ${weekKey}`);
            } else {
                // 現在の週のスケジュールを使用
                weekKey = formatDateKey(currentWeekStart);
            }
            
            if (!weeklySchedules[weekKey]) {
                // 週固有のスケジュールがない場合はデフォルトを使用（コピーは作成しない）
                console.log(`🔍 No custom schedule for ${weekKey}, using default schedule`);
                return defaultSchedule;
            }
            
            console.log(`🔍 Using custom schedule for ${weekKey}`);
            return weeklySchedules[weekKey];
        }

        // 営業時間かどうかチェック
        function isBusinessHour(dayOfWeek, timeStr, specificDate = null) {
            // 特定の日付が指定されている場合、その日付のスケジュールを使用
            let currentWeekSchedule;
            if (specificDate) {
                // 指定された日付の週のスケジュールを取得
                const dateKey = specificDate.toISOString().split('T')[0];
                console.log(`🔍 Using schedule for specific date: ${dateKey}`);
                currentWeekSchedule = getCurrentWeekSchedule(specificDate);
            } else {
                // 現在の週のスケジュールを使用
                currentWeekSchedule = getCurrentWeekSchedule();
            }
            
            const currentSchedule = currentWeekSchedule[dayOfWeek];
            
            // デバッグ用ログ（18:20の時間のみ）
            if (timeStr === '18:20') {
                console.log('🔍 isBusinessHour debug for 18:20:', {
                    dayOfWeek,
                    currentSchedule,
                    currentWeekSchedule: Object.keys(currentWeekSchedule)
                });
            }
            
            // デバッグ用ログ（8:00の時間のみ）
            if (timeStr === '08:00') {
                console.log('🔍 isBusinessHour debug for 08:00:', {
                    dayOfWeek,
                    currentSchedule,
                    currentWeekSchedule: Object.keys(currentWeekSchedule),
                    scheduleDetails: currentSchedule ? {
                        enabled: currentSchedule.enabled,
                        times: currentSchedule.times,
                        timesCount: currentSchedule.times ? currentSchedule.times.length : 0
                    } : 'No schedule'
                });
            }
            
            // スケジュールが有効で時間設定がある場合のみチェック
            if (currentSchedule && currentSchedule.enabled && currentSchedule.times.length > 0) {
                const [hours, minutes] = timeStr.split(':').map(Number);
                const timeInMinutes = hours * 60 + minutes;
                
                const isAvailable = currentSchedule.times.some(slot => {
                    const [startHour, startMin] = slot.start.split(':').map(Number);
                    const [endHour, endMin] = slot.end.split(':').map(Number);
                    const startInMinutes = startHour * 60 + startMin;
                    const endInMinutes = endHour * 60 + endMin;
                    
                    const slotMatch = timeInMinutes >= startInMinutes && timeInMinutes < endInMinutes;
                    
                    // 問題のある時間のスロットチェック詳細ログ
                    if ((timeStr === '10:00' && dayOfWeek === 1) || timeStr === '09:10' || timeStr === '09:50') {
                        console.log(`🔍 Slot check for ${timeStr}: ${slot.start}-${slot.end} (${startInMinutes}-${endInMinutes}) vs ${timeInMinutes} = ${slotMatch}`);
                    }
                    
                    // 8:00の詳細デバッグ
                    if (timeStr === '08:00') {
                        console.log(`🔍 8:00 slot check for day ${dayOfWeek}: ${slot.start}-${slot.end} (${startInMinutes}-${endInMinutes}) vs ${timeInMinutes} = ${slotMatch}`, {
                            slot,
                            timeStr,
                            timeInMinutes,
                            startInMinutes,
                            endInMinutes,
                            condition1: timeInMinutes >= startInMinutes,
                            condition2: timeInMinutes < endInMinutes
                        });
                    }
                    
                    return slotMatch;
                });
                
                // デバッグ用ログ（営業時間境界と問題のある時間）
                if ((timeStr === '10:00' && dayOfWeek === 1) || timeStr === '09:10' || timeStr === '09:50') {
                    const businessSlots = currentSchedule.times.map(slot => `${slot.start}-${slot.end}`);
                    console.log(`🔍 Business hour check for ${['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][dayOfWeek]} ${timeStr}:`, {
                        schedule: currentSchedule,
                        timeInMinutes,
                        isAvailable,
                        scheduleType: currentWeekSchedule === defaultSchedule ? 'default' : 'custom',
                        businessSlots: businessSlots
                    });
                    // businessSlotsの詳細を別途ログ出力
                    console.log(`📋 Business slots details for ${['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][dayOfWeek]}:`, currentSchedule.times);
                }
                
                // 8:00の最終結果デバッグ
                if (timeStr === '08:00') {
                    const businessSlots = currentSchedule.times.map(slot => `${slot.start}-${slot.end}`);
                    console.log(`🔍 8:00 final result for ${['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][dayOfWeek]}:`, {
                        schedule: currentSchedule,
                        timeInMinutes,
                        isAvailable,
                        scheduleType: currentWeekSchedule === defaultSchedule ? 'default' : 'custom',
                        businessSlots: businessSlots,
                        timesArray: currentSchedule.times
                    });
                }
                
                return isAvailable;
            }
            
            return false;
        }
        
        // グローバルにisBusinessHour関数を公開（一括予約で使用）
        window.isBusinessHour = isBusinessHour;
        
        // デバッグ用：土曜日のスケジュールを確認
        console.log('🔍 Saturday schedule debug:', {
            dayOfWeek: 6,
            currentWeekSchedule: getCurrentWeekSchedule(),
            saturdaySchedule: getCurrentWeekSchedule()[6]
        });
  
        // 予約を検索
        function findReservation(dateKey, timeStr) {
            const dayReservations = reservations[dateKey] || [];
            
            // デバッグ用：特定の予約をチェック
            if (dateKey === '2025-08-13' && timeStr === '10:00') {
                console.log('🔍 findReservation called for 2025-08-13 10:00');
                console.log('🔍 dayReservations:', dayReservations);
                console.log('🔍 Looking for reservation 97:', dayReservations.find(r => r.id === 97));
            }
            return dayReservations.find(reservation => {
                const reservationTime = reservation.time;
                const [resHour, resMin] = reservationTime.split(':').map(Number);
                const [checkHour, checkMin] = timeStr.split(':').map(Number);
                
                const resTimeInMin = resHour * 60 + resMin;
                const checkTimeInMin = checkHour * 60 + checkMin;
                const preparationTime = reservation.effective_interval_minutes ?? 10; // 実際の準備時間を使用
                const endTimeInMin = resTimeInMin + reservation.duration + preparationTime;
                
                // 時間スロットの境界を考慮して、次の時間スロットとの重複を避ける
                const nextHourInMin = Math.ceil(endTimeInMin / 60) * 60; // 次の時間の開始
                const adjustedEndTimeInMin = Math.min(endTimeInMin, nextHourInMin);
                
                // デバッグ用：時間計算を確認
                if (timeStr === '15:00' && reservation.customer === '吉田') {
                    console.log('🔍 Time calculation debug:', {
                        reservationTime,
                        timeStr,
                        resTimeInMin,
                        checkTimeInMin,
                        duration: reservation.duration,
                        preparationTime,
                        endTimeInMin,
                        isOverlapping: checkTimeInMin >= resTimeInMin && checkTimeInMin < endTimeInMin
                    });
                }
                
                return checkTimeInMin >= resTimeInMin && checkTimeInMin < adjustedEndTimeInMin;
            });
        }

        // 予約の開始スロットかどうかチェック
        function isReservationStart(dateKey, timeStr) {
            const dayReservations = reservations[dateKey] || [];
            return dayReservations.some(reservation => {
                return reservation.time === timeStr;
            });
        }

        // 予約の継続スロットかどうかチェック
        function isReservationContinuation(dateKey, timeStr) {
            const dayReservations = reservations[dateKey] || [];
            return dayReservations.some(reservation => {
                const reservationTime = reservation.time;
                const [resHour, resMin] = reservationTime.split(':').map(Number);
                const [checkHour, checkMin] = timeStr.split(':').map(Number);
                
                const resTimeInMin = resHour * 60 + resMin;
                const checkTimeInMin = checkHour * 60 + checkMin;
                const endTimeInMin = resTimeInMin + reservation.duration;
                
                return checkTimeInMin > resTimeInMin && checkTimeInMin < endTimeInMin;
            });
        }

        // 予約ブロックを作成
        function createReservationBlock(reservation) {
            const block = document.createElement('div');
            block.className = `reservation-block ${reservation.status}`;
            block.draggable = true;
            block.dataset.reservationId = reservation.id;
            block.dataset.reservationData = JSON.stringify(reservation);
            
            // クリックイベントを追加
            block.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('🎯 予約ブロックがクリックされました:', reservation);
                console.log('🔍 予約ID:', reservation.id);
                openReservationDetailModal(reservation);
            });
            
            const statusIcon = {
                'tentative': '⏳',
                'confirmed': '✓',
                'completed': '✅'
            };
            
            block.innerHTML = `
                ${statusIcon[reservation.status] || ''} ${reservation.customer}
                <div style="font-size: 9px; opacity: 0.9;">${reservation.duration}分</div>
            `;
            
            return block;
        }

        // スパニング予約ブロックを作成
        function createSpanningReservationBlock(reservation, dateKey, timeStr) {
            console.log('🎯 Creating spanning block for reservation:', reservation.id, {
                effective_interval_minutes: reservation.effective_interval_minutes,
                individual_interval_minutes: reservation.individual_interval_minutes,
                duration: reservation.duration,
                is_break: false
            });
            const block = document.createElement('div');
            
            // 休憩かどうかで異なるクラスを設定
            if (reservation.customer === '休憩' || reservation.customer === '準備時間' || reservation.customer === '業務' || reservation.customer === 'ミーティング' || reservation.customer === 'その他') {
                block.className = `reservation-block spanning break-block ${reservation.status}`;
            } else {
                block.className = `reservation-block spanning ${reservation.status}`;
            }
            
            block.draggable = true; // メインブロックをドラッグ可能に変更
            block.dataset.reservationId = reservation.id;
            block.dataset.reservationData = JSON.stringify(reservation);
            block.dataset.originalDateKey = dateKey;
            block.dataset.originalTimeStr = timeStr;
            
            // クリックイベントを追加（休憩の場合は後で個別に設定）
            if (!(reservation.customer === '休憩' || reservation.customer === '準備時間' || reservation.customer === '業務' || reservation.customer === 'ミーティング' || reservation.customer === 'その他')) {
                block.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('🎯 スパニング予約ブロックがクリックされました:', reservation);
                    console.log('🔍 予約ID:', reservation.id);
                    openReservationDetailModal(reservation);
                });
            }
            
            const statusIcon = {
                'tentative': '⏳',
                'confirmed': '✓',
                'completed': '✅',
                'break': '☕'
            };
            
            // 予約の継続時間に基づいて高さを計算
            const durationInMinutes = reservation.duration;
            // 休憩の場合は準備時間なし
            const preparationTime = (reservation.effective_interval_minutes ?? 10); // 休憩機能は無効化
            const totalTime = durationInMinutes + preparationTime;
                         const rowHeight = 20; // 各時間スロットの高さ（10分間）
            const exactHeight = (totalTime / 10) * rowHeight; // 正確な高さを計算
            
            block.style.height = `${exactHeight}px`;
            block.style.top = '0';
            
            // 準備時間部分を視覚的に区別
            const bookingHeight = (durationInMinutes / 10) * rowHeight;
            const preparationHeight = (preparationTime / 10) * rowHeight;
            
            // 開始時間と終了時間を計算
            const [startHour, startMin] = timeStr.split(':').map(Number);
            const startTimeInMinutes = startHour * 60 + startMin;
            const endTimeInMinutes = startTimeInMinutes + reservation.duration;
            
            const startTime = `${String(Math.floor(startTimeInMinutes / 60)).padStart(2, '0')}:${String(startTimeInMinutes % 60).padStart(2, '0')}`;
            const endTime = `${String(Math.floor(endTimeInMinutes / 60)).padStart(2, '0')}:${String(endTimeInMinutes % 60).padStart(2, '0')}`;
            
            // 休憩ブロックの場合は異なるスタイルで表示            
            if (reservation.customer === '休憩' || reservation.customer === '準備時間' || reservation.customer === '業務' || reservation.customer === 'ミーティング' || reservation.customer === 'その他') {
                // 休憩タイプに応じたアイコンを選択
                const breakIcons = {
                    '休憩': '☕',
                    '準備時間': '⚙️',
                    '業務': '💼',
                    'ミーティング': '🤝'
                };
                const breakIcon = breakIcons[reservation.customer] || '🍊';
                
                block.innerHTML = `
                    <div style="height: ${exactHeight}px; display: flex; flex-direction: column; justify-content: center; align-items: center; padding: 6px; position: relative; text-align: center;">
                        <div style="font-size: 16px; font-weight: 700; margin-bottom: 3px; text-shadow: 0 2px 4px rgba(0,0,0,0.4);">
                            ${breakIcon} ${reservation.customer}
                        </div>
                        <div style="font-size: 11px; opacity: 0.95; background: rgba(255,255,255,0.35); padding: 3px 8px; border-radius: 12px; display: inline-block; backdrop-filter: blur(2px); margin-bottom: 3px; font-weight: 600;">
                            ${reservation.duration}分間
                        </div>
                        <div style="font-size: 10px; opacity: 0.9; background: rgba(255,255,255,0.25); padding: 2px 8px; border-radius: 10px; display: inline-block; backdrop-filter: blur(1px); font-weight: 500;">
                            ${startTime} - ${endTime}
                        </div>
                    </div>
                `;
                
                // 休憩ブロックにクリックイベントを追加
                block.addEventListener('click', (e) => {
                    e.stopPropagation(); // イベントの伝播を停止
                    console.log('🍊 Break block clicked:', reservation);
                    openBreakDetailModal(reservation);
                });
            } else {
            // 準備時間が0の場合は準備時間セクションを表示しない
            const preparationSection = preparationTime > 0 ? `
                <div style="height: ${preparationHeight}px; background: linear-gradient(135deg, rgba(255,255,255,0.2), rgba(255,255,255,0.1)); display: flex; align-items: center; justify-content: center; font-size: 9px; border-top: 1px solid rgba(255,255,255,0.3); backdrop-filter: blur(1px); position: absolute; left: 0; right: 0; bottom: 0; width: 100%;">
                    <div style="position: absolute; top: 0; left: 0; right: 0; height: 1px; background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);"></div>
                    <span style="background: rgba(255,255,255,0.25); padding: 3px 10px; border-radius: 15px; font-weight: 600; font-size: 8px; text-transform: uppercase; letter-spacing: 0.5px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">${preparationTime}分</span>
                </div>
            ` : '';
            
            block.innerHTML = `
                <div style="height: ${preparationTime > 0 ? bookingHeight : exactHeight}px; display: flex; flex-direction: column; justify-content: center; padding: 8px; position: relative;">
                    <div style="font-size: 12px; font-weight: 600; margin-bottom: 4px; text-shadow: 0 1px 2px rgba(0,0,0,0.3);">
                        ${statusIcon[reservation.status] || ''} ${reservation.customer}
      </div>
                    <div style="font-size: 10px; opacity: 0.9; background: rgba(255,255,255,0.2); padding: 2px 6px; border-radius: 10px; display: inline-block; backdrop-filter: blur(2px); margin-bottom: 4px;">
                        ${reservation.duration}分
    </div>
                    <div style="font-size: 9px; opacity: 0.8; background: rgba(0,0,0,0.2); padding: 2px 6px; border-radius: 8px; display: inline-block; backdrop-filter: blur(1px);">
                        ${startTime} - ${endTime}
        </div>
        </div>
                ${preparationSection}
    `;
            }
            
            return block;
        }

        // 設定モーダルを開く
        function openSettingsModal() {
            document.getElementById('settingsModal').style.display = 'block';
            renderDaySettings();
        }

        // 設定モーダルを閉じる
        function closeSettingsModal() {
            document.getElementById('settingsModal').style.display = 'none';
        }

        // タブ切り替え
        function switchTab(tabName) {
            // タブボタンの状態更新
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
            
            // タブコンテンツの表示切り替え
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(`${tabName}-tab`).classList.add('active');
            
            if (tabName === 'recurring') {
                renderRecurringDaySettings();
            }
        }

        // 曜日別設定を描画
        function renderDaySettings() {
            // 週情報を更新
            updateWeekInfo();
            
            const container = document.getElementById('daySettings');
            container.innerHTML = '';
            
            for (let day = 0; day < 7; day++) {
                const dayDiv = createDaySettingDiv(day, false);
                container.appendChild(dayDiv);
            }
        }

        // 定期的な設定を描画
        function renderRecurringDaySettings() {
            const container = document.getElementById('recurringDaySettings');
            container.innerHTML = '';
            
            for (let day = 0; day < 7; day++) {
                const dayDiv = createDaySettingDiv(day, true);
                container.appendChild(dayDiv);
            }
        }

        // 週情報を更新
        function updateWeekInfo() {
            const weekStartStr = formatDateKey(currentWeekStart);
            const weekEnd = new Date(currentWeekStart);
            weekEnd.setDate(weekEnd.getDate() + 6);
            const weekEndStr = formatDateKey(weekEnd);
            
            const currentWeekDisplay = document.getElementById('current-week-display');
            const scheduleTypeInfo = document.getElementById('schedule-type-info');
            
            if (currentWeekDisplay) {
                currentWeekDisplay.textContent = `${weekStartStr} 〜 ${weekEndStr}`;
            }
            
            if (scheduleTypeInfo) {
                const hasCustomSchedule = weeklySchedules[weekStartStr] && 
                    JSON.stringify(weeklySchedules[weekStartStr]) !== JSON.stringify(defaultSchedule);
                
                if (hasCustomSchedule) {
                    scheduleTypeInfo.textContent = '✅ この週にはカスタムスケジュールが設定されています';
                    scheduleTypeInfo.style.color = '#28a745';
                } else {
                    scheduleTypeInfo.textContent = 'ℹ️ この週にはデフォルトスケジュールが適用されています';
                    scheduleTypeInfo.style.color = '#6c757d';
                }
            }
        }

        // 曜日設定DIVを作成
        function createDaySettingDiv(day, isRecurring) {
            // 安全チェック: スケジュールデータが読み込まれているか確認
            if (!defaultSchedule || !defaultSchedule[day]) {
                console.warn(`⚠️ Schedule data not loaded for day ${day}, using fallback`);
                return createFallbackDaySettingDiv(day, isRecurring);
            }
            
            const schedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
            const dayDiv = document.createElement('div');
            dayDiv.className = 'day-setting';
            
            const headerClass = day === 0 ? 'sunday' : day === 6 ? 'saturday' : '';
            
            dayDiv.innerHTML = `
                <div class="day-setting-header ${headerClass}">
                    <span>${dayNamesLong[day]}</span>
                    <div class="day-toggle ${schedule.enabled ? 'active' : ''}" onclick="toggleDay(${day}, ${isRecurring})"></div>
        </div>
                <div class="time-slots-container" style="display: ${schedule.enabled ? 'block' : 'none'};">
                    <div id="timeSlots-${day}-${isRecurring}" class="time-slots">
                        ${renderTimeSlots(day, schedule.times, isRecurring)}
        </div>
                    <button class="add-time-btn" onclick="addTimeSlot(${day}, ${isRecurring})">
                        + 時間帯を追加
          </button>
        </div>
  `;
            
            return dayDiv;
        }

        // フォールバック用の曜日設定DIVを作成
        function createFallbackDaySettingDiv(day, isRecurring) {
            const dayDiv = document.createElement('div');
            dayDiv.className = 'day-setting';
            
            const headerClass = day === 0 ? 'sunday' : day === 6 ? 'saturday' : '';
            
            dayDiv.innerHTML = `
                <div class="day-setting-header ${headerClass}">
                    <span>${dayNamesLong[day]}</span>
                    <div class="day-toggle" onclick="toggleDay(${day}, ${isRecurring})"></div>
      </div>
                <div class="time-slots-container" style="display: none;">
                    <div id="timeSlots-${day}-${isRecurring}" class="time-slots">
                        <!-- データ読み込み中 -->
                    </div>
                    <button class="add-time-btn" onclick="addTimeSlot(${day}, ${isRecurring})">
                        + 時間帯を追加
                    </button>
    </div>
  `;
            
            return dayDiv;
        }

        // 時間スロットを描画
        function renderTimeSlots(day, times, isRecurring = false) {
            return times.map((time, index) => `
                <div class="time-slot-input">
                    <input type="time" class="time-input" value="${time.start}" 
                           onchange="(async () => { await updateTimeSlot(${day}, ${index}, 'start', this.value, ${isRecurring}); })()">
                    <span>〜</span>
                    <input type="time" class="time-input" value="${time.end}"
                           onchange="(async () => { await updateTimeSlot(${day}, ${index}, 'end', this.value, ${isRecurring}); })()">
                    <button class="btn btn-danger btn-sm" onclick="removeTimeSlot(${day}, ${index}, ${isRecurring})">削除</button>
                </div>
            `).join('');
        }

        // 曜日の有効/無効を切り替え
        async function toggleDay(day, isRecurring) {
            console.log(`Toggling day ${day} (${dayNamesLong[day]}) for recurring: ${isRecurring}`);
            
            const currentSchedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
            const wouldBeDisabled = currentSchedule.enabled; // If currently enabled, it would become disabled
            
            // Check for existing reservations if trying to disable the day
            if (wouldBeDisabled) {
                console.log(`🔍 Checking if day ${day} can be disabled`);
                
                if (isRecurring) {
                    // For recurring schedules, check all future reservations for this day of week
                    try {
                        const affectedReservations = await checkRecurringScheduleImpact(day, '00:00', '00:00');
                        if (affectedReservations.length > 0) {
                            const dayName = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'][day];
                            const reservationList = affectedReservations.map(r => `${r.customer}様 (${r.date} ${r.time})`).join(', ');
                            
                            showMessage(`${dayName}を休業日にすることはできません。以下の予約があります: ${reservationList}`, 'error');
                            return; // Don't proceed with the toggle
                        }
                    } catch (error) {
                        console.error('❌ Error checking reservations for day toggle:', error);
                        showMessage('予約状況の確認中にエラーが発生しました。', 'error');
                        return;
                    }
                } else {
                    // For current week, check reservations for specific dates
                    const affectedReservations = checkCurrentWeekReservationsForDay(day);
                    if (affectedReservations.length > 0) {
                        const dayName = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'][day];
                        const reservationList = affectedReservations.map(r => `${r.customer}様 (${r.time})`).join(', ');
                        
                        showMessage(`${dayName}を休業日にすることはできません。以下の予約があります: ${reservationList}`, 'error');
                        return; // Don't proceed with the toggle
                    }
                }
            }
            
            if (isRecurring) {
                // 定期的なスケジュールの場合
                defaultSchedule[day].enabled = !defaultSchedule[day].enabled;
            } else {
                // 現在の週の場合、カスタムスケジュールを作成
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                    console.log(`🔍 Created custom schedule for week ${weekKey}`);
                }
                weeklySchedules[weekKey][day].enabled = !weeklySchedules[weekKey][day].enabled;
            }
            
            const toggle = document.querySelector(`[onclick="toggleDay(${day}, ${isRecurring})"]`);
            const timeSlotsContainer = toggle.parentElement.nextElementSibling;
            
            const schedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
            
            if (schedule.enabled) {
                toggle.classList.add('active');
                timeSlotsContainer.style.display = 'block';
                
                // 時間スロットがない場合は追加
                if (schedule.times.length === 0) {
                    schedule.times.push({ start: '09:00', end: '18:00' });
                }
                
                // 現在のタブのコンテナのみ更新
                const slotsContainer = document.getElementById(`timeSlots-${day}-${isRecurring}`);
                if (slotsContainer) {
                    slotsContainer.innerHTML = renderTimeSlots(day, schedule.times, isRecurring);
                }
            } else {
                toggle.classList.remove('active');
                timeSlotsContainer.style.display = 'none';
            }
            
            console.log(`Day ${day} (${dayNamesLong[day]}) is now ${schedule.enabled ? 'enabled' : 'disabled'} for ${isRecurring ? 'recurring' : 'current week'}`);
        }

        // 時間スロットを追加
        function addTimeSlot(day, isRecurring) {
            if (isRecurring) {
                defaultSchedule[day].times.push({ start: '09:00', end: '18:00' });
            } else {
                // 現在の週の場合、カスタムスケジュールを作成
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                    console.log(`🔍 Created custom schedule for week ${weekKey}`);
                }
                weeklySchedules[weekKey][day].times.push({ start: '09:00', end: '18:00' });
            }
            
            // 現在のタブのコンテナのみ更新
            const slotsContainer = document.getElementById(`timeSlots-${day}-${isRecurring}`);
            if (slotsContainer) {
                const schedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
                slotsContainer.innerHTML = renderTimeSlots(day, schedule.times, isRecurring);
            }
        }

        // 時間スロットを削除
        function removeTimeSlot(day, index, isRecurring = false) {
            if (isRecurring) {
                defaultSchedule[day].times.splice(index, 1);
            } else {
                // 現在の週の場合、カスタムスケジュールを作成
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                    console.log(`🔍 Created custom schedule for week ${weekKey}`);
                }
                weeklySchedules[weekKey][day].times.splice(index, 1);
            }
            
            // 現在のタブのコンテナのみ更新
            const slotsContainer = document.getElementById(`timeSlots-${day}-${isRecurring}`);
            if (slotsContainer) {
                const schedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
                slotsContainer.innerHTML = renderTimeSlots(day, schedule.times, isRecurring);
            }
        }

        // 時間スロットを更新
        async function updateTimeSlot(day, index, field, value, isRecurring = false) {
            // 変更前の値を保存
            let oldValue;
            if (isRecurring) {
                oldValue = defaultSchedule[day].times[index][field];
            } else {
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                }
                oldValue = weeklySchedules[weekKey][day].times[index][field];
            }
            
            // 新しい値を設定
            if (isRecurring) {
                defaultSchedule[day].times[index][field] = value;
            } else {
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                    console.log(`🔍 Created custom schedule for week ${weekKey}`);
                }
                weeklySchedules[weekKey][day].times[index][field] = value;
            }
            
            // 時間変更の妥当性をチェック（定期的なスケジュールも含む）
            if (isRecurring) {
                console.log('🔍 Validating recurring schedule time change:', {
                    day,
                    field,
                    oldValue,
                    newValue: value,
                    dayName: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][day]
                });
                
                // 定期的なスケジュールの場合、基本的な時間妥当性チェック
                if (field === 'start' || field === 'end') {
                    // 時間形式の基本チェック
                    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
                    if (!timeRegex.test(value)) {
                        showMessage('時間は HH:MM 形式で入力してください', 'error');
                        // 元の値に戻す
                        defaultSchedule[day].times[index][field] = oldValue;
                        return;
                    }
                    
                    // 開始時間 < 終了時間のチェック
                    const currentSlot = defaultSchedule[day].times[index];
                    const startTime = field === 'start' ? value : currentSlot.start;
                    const endTime = field === 'end' ? value : currentSlot.end;
                    
                    if (startTime >= endTime) {
                        showMessage('開始時間は終了時間より前に設定してください', 'error');
                        // 元の値に戻す
                        defaultSchedule[day].times[index][field] = oldValue;
                        return;
                    }
                    
                    // 既存の予約への影響をチェック（非同期）
                    try {
                        const affectedReservations = await checkRecurringScheduleImpact(day, startTime, endTime);
                        if (affectedReservations.length > 0) {
                            const dayName = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'][day];
                            const reservationList = affectedReservations.map(r => `${r.customer}様 (${r.date} ${r.time})`).join(', ');
                            
                            showMessage(`${dayName}の営業時間変更により、以下の予約が営業時間外になります: ${reservationList}`, 'error');
                            
                            // 元の値に戻す
                            defaultSchedule[day].times[index][field] = oldValue;
                            return;
                        }
                    } catch (error) {
                        console.error('❌ Error checking recurring schedule impact:', error);
                        showMessage('予約データの確認中にエラーが発生しました。', 'error');
                        // 元の値に戻す
                        defaultSchedule[day].times[index][field] = oldValue;
                        return;
                    }
                    
                    console.log('✅ Recurring schedule time validation passed');
                }
            }
            
            // 営業時間の変更（短縮・拡張）の場合、影響をチェック
            if ((field === 'end' && parseInt(value) < parseInt(oldValue)) || 
                (field === 'start' && parseInt(value) > parseInt(oldValue)) ||
                (field === 'end' && parseInt(value) > parseInt(oldValue)) || 
                (field === 'start' && parseInt(value) < parseInt(oldValue))) {
                console.log(`🔍 Checking impact of changing business hours for day ${day} from ${oldValue} to ${value} (${field})`);
                
                // 影響を受ける予約をチェック
                const affectedReservations = checkShiftChangeImpact(day, oldValue, value, field);
                
                if (affectedReservations.length > 0) {
                    // 影響がある場合は確認ダイアログを表示
                    const confirmed = await showShiftChangeConfirmation(affectedReservations, day, oldValue, value, field);
                    if (!confirmed) {
                        // キャンセルされた場合は元の値に戻す
                        if (isRecurring) {
                            defaultSchedule[day].times[index][field] = oldValue;
                        } else {
                            const weekKey = formatDateKey(currentWeekStart);
                            weeklySchedules[weekKey][day].times[index][field] = oldValue;
                        }
                        return;
                    }
                }
            }
        }

        // 設定を保存
        function saveSettings() {
            // 現在アクティブなタブを確認
            const activeTab = document.querySelector('.tab-button.active');
            const isRecurring = activeTab && activeTab.textContent.includes('定期的なスケジュール');
            
            console.log('🔍 Active tab:', activeTab ? activeTab.textContent : 'none');
            console.log('🔍 isRecurring:', isRecurring);
            
            const scheduleData = isRecurring ? defaultSchedule : getCurrentWeekSchedule();
            const weekStartStr = formatDateKey(currentWeekStart);
            
            console.log('🔄 Saving shift settings:', {
                isRecurring,
                weekStartStr,
                scheduleData
            });
            
            // バックエンドに保存
            fetch('/admin/reservations/save_shift_settings', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                },
                body: JSON.stringify({
                    schedule_data: scheduleData,
                    is_recurring: isRecurring,
                    week_start_date: weekStartStr
                })
            })
            .then(response => response.json())
  .then(data => {
    if (data.success) {
                    console.log('✅ Shift settings saved successfully');
                    
                    // 表示を更新
                    renderWeekView();
                    closeSettingsModal();
                    
                    // 保存完了メッセージ
                    const message = isRecurring 
                        ? '定期的なスケジュールが保存されました。この設定は全ての週に適用されます。'
                        : '設定が保存されました。この設定は現在の週のみに適用されます。';
                    showMessage(message, 'success');
    } else {
                    console.error('❌ Failed to save shift settings:', data.message);
                    showMessage(`シフト設定の保存に失敗しました: ${data.message}`, 'error');
    }
  })
  .catch(error => {
                console.error('❌ Error saving shift settings:', error);
                showMessage('シフト設定の保存中にエラーが発生しました', 'error');
            });
        }

        // 前週へ
        function previousWeek() {
            console.log('🔄 Previous week clicked - current week start before:', currentWeekStart);
            currentWeekStart.setDate(currentWeekStart.getDate() - 7);
            console.log('🔄 Previous week clicked - current week start after:', currentWeekStart);
            
            Promise.all([
                loadShiftSettingsFromBackend(),
                loadReservationsFromBackend()
            ]).then(() => {
                console.log('🔄 Previous week - data loaded, rendering week view');
                renderWeekView();
                updateCancellationDisplay(); // キャンセル履歴を更新
            }).catch(error => {
                console.error('❌ Error loading data for previous week:', error);
            });
        }

        // 次週へ
        function nextWeek() {
            console.log('🔄 Next week clicked - current week start before:', currentWeekStart);
            currentWeekStart.setDate(currentWeekStart.getDate() + 7);
            console.log('🔄 Next week clicked - current week start after:', currentWeekStart);
            
            Promise.all([
                loadShiftSettingsFromBackend(),
                loadReservationsFromBackend()
            ]).then(() => {
                console.log('🔄 Next week - data loaded, rendering week view');
                renderWeekView();
                updateCancellationDisplay(); // キャンセル履歴を更新
            }).catch(error => {
                console.error('❌ Error loading data for next week:', error);
            });
        }

        // 日付をフォーマット（短縮版）
        function formatDateShort(date) {
            return `${date.getMonth() + 1}月${date.getDate()}日`;
        }
        
        // シフト変更の影響をチェック（ラッパー関数）
        function checkShiftChangeImpactAuto(day, oldTime, newTime, field) {
            // アクティブなタブに基づいてisRecurringを判定
            const activeTab = document.querySelector('.tab-button.active');
            const isRecurring = activeTab && activeTab.textContent.includes('定期的なスケジュール');
            
            console.log(`🔍 Checking impact of changing business hours for day ${day} from ${oldTime} to ${newTime} (${field})`);
            console.log(`🔍 Active tab text: "${activeTab ? activeTab.textContent : 'no active tab found'}"`);
            console.log(`🔍 isRecurring determined from active tab: ${isRecurring}`);
            
            return checkShiftChangeImpact(day, oldTime, newTime, field, isRecurring);
        }
        
        // シフト変更の影響をチェック
        function checkShiftChangeImpact(day, oldTime, newTime, field, isRecurring = null) {
            const affectedReservations = [];
            const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
            
            // If isRecurring is not specified, auto-detect from active tab
            if (isRecurring === null) {
                const activeTab = document.querySelector('.tab-button.active');
                isRecurring = activeTab && activeTab.textContent.includes('定期的なスケジュール');
                console.log(`🔍 Auto-detected isRecurring from active tab: "${activeTab ? activeTab.textContent : 'no active tab'}" -> ${isRecurring}`);
            }
            
            console.log(`🔍 checkShiftChangeImpact called with: day=${day} (${dayNames[day]}), oldTime=${oldTime}, newTime=${newTime}, field=${field}, isRecurring=${isRecurring}`);
            console.log(`🔍 All reservations:`, reservations);
            
            // Get current week dates if this is not a recurring change
            let currentWeekDates = [];
            if (!isRecurring && currentWeekStart) {
                const weekStart = new Date(currentWeekStart);
                for (let i = 0; i < 7; i++) {
                    const date = new Date(weekStart);
                    date.setDate(weekStart.getDate() + i);
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const dayStr = String(date.getDate()).padStart(2, '0');
                    currentWeekDates.push(`${year}-${month}-${dayStr}`);
                }
                console.log(`🔍 Current week dates:`, currentWeekDates);
            }
            
            // Check reservations (all weeks for recurring, current week only for non-recurring)
            Object.keys(reservations).forEach(weekKey => {
                // If not recurring, only check current week dates
                if (!isRecurring && !currentWeekDates.includes(weekKey)) {
                    console.log(`🔍 Skipping ${weekKey} - not in current week`);
                    return;
                }
                const weekReservations = reservations[weekKey] || [];
                
                weekReservations.forEach(reservation => {
                    // 週のキーから日付を取得
                    const reservationDate = new Date(weekKey);
                    const reservationDayOfWeek = reservationDate.getDay();
                    
                    console.log(`🔍 Checking reservation: ${reservation.id} on ${weekKey} (day ${reservationDayOfWeek}) vs target day ${day}`);
                    
                    // 同じ曜日の予約をチェック
                    if (reservationDayOfWeek === day) {
                        const [startHour, startMin] = reservation.time.split(':').map(Number);
                        const reservationStartInMin = startHour * 60 + startMin;
                        const reservationEndInMin = reservationStartInMin + reservation.duration;
                        console.log(`🔍 Reservation time: ${reservation.time} (start: ${reservationStartInMin} min, duration: ${reservation.duration} min, end: ${reservationEndInMin} min)`);
                        let isAffected = false;
                        if (field === 'end') {
                            if (parseInt(newTime) < parseInt(oldTime)) {
                                // 新しい終了時間（分単位）
                                let newEndInMin;
                                if (String(newTime).includes(':')) {
                                    const [h, m] = String(newTime).split(':').map(Number);
                                    newEndInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    newEndInMin = parseInt(newTime) * 60;
                                }
                                // 終了時間が短縮される場合 - 予約が新しい終了時間を超える場合
                                isAffected = reservationEndInMin > newEndInMin;
                                console.log(`🔍 End time shrinking check: reservation ends at ${reservationEndInMin} min, new end time is ${newEndInMin} min = ${isAffected}`);
                            } else {
                                // 終了時間が拡張される場合
                                let oldEndInMin, newEndInMin;
                                if (String(oldTime).includes(':')) {
                                    const [h, m] = String(oldTime).split(':').map(Number);
                                    oldEndInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    oldEndInMin = parseInt(oldTime) * 60;
                                }
                                if (String(newTime).includes(':')) {
                                    const [h, m] = String(newTime).split(':').map(Number);
                                    newEndInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    newEndInMin = parseInt(newTime) * 60;
                                }
                                isAffected = reservationStartInMin >= oldEndInMin && reservationStartInMin < newEndInMin;
                                console.log(`🔍 End time expanding check: ${reservationStartInMin} >= ${oldEndInMin} AND ${reservationStartInMin} < ${newEndInMin} = ${isAffected}`);
                            }
                        } else if (field === 'start') {
                            if (parseInt(newTime) > parseInt(oldTime)) {
                                // 開始時間が遅くなる場合
                                let newStartInMin;
                                if (String(newTime).includes(':')) {
                                    const [h, m] = String(newTime).split(':').map(Number);
                                    newStartInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    newStartInMin = parseInt(newTime) * 60;
                                }
                                isAffected = reservationStartInMin < newStartInMin;
                                console.log(`🔍 Start time delaying check: ${reservationStartInMin} < ${newStartInMin} = ${isAffected}`);
                            } else {
                                // 開始時間が早くなる場合
                                let oldStartInMin, newStartInMin;
                                if (String(oldTime).includes(':')) {
                                    const [h, m] = String(oldTime).split(':').map(Number);
                                    oldStartInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    oldStartInMin = parseInt(oldTime) * 60;
                                }
                                if (String(newTime).includes(':')) {
                                    const [h, m] = String(newTime).split(':').map(Number);
                                    newStartInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    newStartInMin = parseInt(newTime) * 60;
                                }
                                isAffected = reservationStartInMin >= newStartInMin && reservationStartInMin < oldStartInMin;
                                console.log(`🔍 Start time advancing check: ${reservationStartInMin} >= ${newStartInMin} AND ${reservationStartInMin} < ${oldStartInMin} = ${isAffected}`);
                            }
                        }
                        if (isAffected) {
                            affectedReservations.push({
                                id: reservation.id,
                                customer: reservation.customer,
                                start_time: reservation.time,
                                end_time: `${Math.floor(reservationEndInMin/60)}:${(reservationEndInMin%60).toString().padStart(2,'0')}`,
                                date: weekKey,
                                dayName: dayNames[day]
                            });
                            console.log(`🔍 Added affected reservation: ${reservation.id}`);
                        }
                    }
                });
            });
            
            console.log(`🔍 Found ${affectedReservations.length} affected reservations for day ${day} (${dayNames[day]}) - ${field} time change`);
            return affectedReservations;
        }
        
        // シフト変更の確認ダイアログを表示
        function showShiftChangeConfirmation(affectedReservations, day, oldTime, newTime, field) {
            return new Promise((resolve) => {
                const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
                const fieldName = field === 'start' ? '開始時間' : '終了時間';
                
                // 既存のモーダルがあれば削除
                const existingModal = document.getElementById('shiftChangeModal');
                if (existingModal) {
                    existingModal.remove();
                }
                
                const modal = document.createElement('div');
                modal.id = 'shiftChangeModal';
                modal.className = 'modal fade';
                modal.setAttribute('tabindex', '-1');
                modal.setAttribute('aria-labelledby', 'shiftChangeModalLabel');
                modal.setAttribute('aria-hidden', 'true');
                modal.innerHTML = `
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header bg-warning text-dark">
                                <h5 class="modal-title" id="shiftChangeModalLabel">⚠️ 営業時間変更の確認</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="alert alert-warning mb-1">
                                    <strong>営業時間の変更により影響を受ける予約があります:</strong><br>
                                    ${dayNames[day]}曜日 ${fieldName}: ${oldTime}:00 → ${newTime}:00
                                </div>
                                
                                <div class="table-responsive mb-1" style="max-height: 300px; overflow-y: hidden;">
                                    <table class="table table-sm mb-0">
                                        <thead>
                                            <tr>
                                                <th style="font-size: 1rem; padding: 0.3rem;">日時</th>
                                                <th style="font-size: 1rem; padding: 0.3rem;">お客様</th>
                                                <th style="font-size: 1rem; padding: 0.3rem;">時間</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${affectedReservations.map(reservation => `
                                                <tr>
                                                    <td style="font-size: 1rem; padding: 0.3rem;">${reservation.date}</td>
                                                    <td style="font-size: 1rem; padding: 0.3rem;">${reservation.customer}</td>
                                                    <td style="font-size: 1rem; padding: 0.3rem;">${reservation.start_time}-${reservation.end_time}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                                
                                <div class="alert alert-danger mb-0">
                                    <strong>エラー:</strong> 営業時間を変更すると、これらの予約が営業時間外になってしまいます。変更はできません。
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" id="cancelShiftChange">OK</button>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
                
                // イベントリスナーを設定
                const cancelBtn = modal.querySelector('#cancelShiftChange');
                const closeBtn = modal.querySelector('.btn-close');
                
                cancelBtn.addEventListener('click', () => {
                    modal.remove();
                    resolve(false);
                });
                
                closeBtn.addEventListener('click', () => {
                    modal.remove();
                    resolve(false);
                });
                
                // モーダルの外側クリックで閉じる
                modal.addEventListener('click', (event) => {
                    if (event.target === modal) {
                        modal.remove();
                        resolve(false);
                    }
                });
                
                // モーダルを表示
                modal.style.display = 'block';
                modal.classList.add('show');
                modal.setAttribute('aria-modal', 'true');
                modal.setAttribute('role', 'dialog');
                
                // 背景を暗くする
                const backdrop = document.createElement('div');
                backdrop.className = 'modal-backdrop fade show';
                backdrop.id = 'shiftChangeBackdrop';
                document.body.appendChild(backdrop);
                
                        // ESCキーで閉じる
        const handleEscKey = (event) => {
            if (event.key === 'Escape') {
                modal.remove();
                backdrop.remove();
                document.removeEventListener('keydown', handleEscKey);
                resolve(false);
            }
        };
        document.addEventListener('keydown', handleEscKey);
        
        // モーダルとバックドロップを削除する関数
        const cleanup = () => {
            if (modal) modal.remove();
            if (backdrop) backdrop.remove();
            document.removeEventListener('keydown', handleEscKey);
        };
        
        // クリーンアップを設定
        cancelBtn.addEventListener('click', cleanup);
        closeBtn.addEventListener('click', cleanup);
        modal.addEventListener('click', (event) => {
            if (event.target === modal) {
                cleanup();
                resolve(false);
            }
        });
    });
        }

        // 日付キーをフォーマット
        function formatDateKey(date) {
            return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
        }

        // メッセージ表示
function showMessage(message, type = 'info') {
            const messageDiv = document.createElement('div');
            messageDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 2000;
                padding: 12px 20px;
                border-radius: 6px;
                color: white;
                font-weight: 500;
                animation: slideInRight 0.3s ease;
                background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : type === 'warning' ? '#ffc107' : '#007bff'};
                color: ${type === 'warning' ? '#212529' : 'white'};
            `;
            messageDiv.textContent = message;
            
            document.body.appendChild(messageDiv);
            
  setTimeout(() => {
                messageDiv.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => document.body.removeChild(messageDiv), 300);
  }, 3000);
}

        // モーダルの外側クリックで閉じる
        window.onclick = function(event) {
            const modal = document.getElementById('settingsModal');
            if (event.target === modal) {
                closeSettingsModal();
            }
            
            // ミニカレンダーの外側クリックで閉じる
            const miniCalendar = document.getElementById('miniCalendar');
            const miniCalendarContainer = document.querySelector('.mini-calendar-container');
            if (miniCalendar && !miniCalendarContainer.contains(event.target)) {
                miniCalendar.classList.remove('show');
            }
        }

        // ミニカレンダー関連の関数
        function toggleMiniCalendar() {
            const miniCalendar = document.getElementById('miniCalendar');
            miniCalendar.classList.toggle('show');
        }

        function renderMiniCalendar() {
            const year = miniCalendarMonth.getFullYear();
            const month = miniCalendarMonth.getMonth();
            
            console.log('📅 Rendering mini calendar for:', year, '年', monthNames[month]);
            
            // タイトルを更新
            document.getElementById('miniCalendarTitle').textContent = 
                `${year}年 ${monthNames[month]}`;
            
            // 月の最初の日と最後の日を取得
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            
            // 最初の週の開始日を取得（日曜日から）
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            // 最後の週の終了日を取得（土曜日まで）
            const endDate = new Date(lastDay);
            endDate.setDate(endDate.getDate() + (6 - lastDay.getDay()));
            
            const daysContainer = document.getElementById('miniCalendarDays');
            daysContainer.innerHTML = '';
            
            // カレンダーの日付セルを生成
            const current = new Date(startDate);
            while (current <= endDate) {
                const dayDiv = document.createElement('div');
                dayDiv.className = 'mini-calendar-day';
                dayDiv.textContent = current.getDate();
                
                // 今月以外の日付
                if (current.getMonth() !== month) {
                    dayDiv.classList.add('other-month');
                }
                
                // 今日の日付
                const todayDate = new Date();
                if (current.toDateString() === todayDate.toDateString()) {
                    dayDiv.classList.add('today');
                }
                
                // クリックされた日付をハイライト
                if (clickedDate && 
                    current.getFullYear() === clickedDate.getFullYear() && 
                    current.getMonth() === clickedDate.getMonth() && 
                    current.getDate() === clickedDate.getDate()) {
                    dayDiv.classList.add('clicked-day');
                }
                
                // クリックイベント - 安全な日付オブジェクトを作成
                const clickDate = new Date(current.getFullYear(), current.getMonth(), current.getDate(), 12, 0, 0, 0);
                dayDiv.addEventListener('click', () => {
                    selectWeekFromDate(clickDate);
                });
                
                daysContainer.appendChild(dayDiv);
                current.setDate(current.getDate() + 1);
            }
        }

        function selectWeekFromDate(date) {
            console.log('🔍 Original clicked date:', date);
            console.log('🔍 Date details:', {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                date: date.getDate(),
                dayOfWeek: date.getDay(),
                toString: date.toString()
            });
            
            // 日付を安全に処理 - タイムゾーンの影響を避ける
            const safeDate = new Date(
                date.getFullYear(),
                date.getMonth(),
                date.getDate(),
                12, 0, 0, 0  // 正午に設定してタイムゾーンの問題を回避
            );
            
            console.log('📅 Safe date for calculation:', safeDate);
            
            // 指定された日付が含まれる週の開始日（日曜日）を計算
            const dayOfWeek = safeDate.getDay();
            const targetDate = safeDate.getDate() - dayOfWeek;
            
            console.log('Target date calculation:', safeDate.getDate(), '-', dayOfWeek, '=', targetDate);
            
            // 週の開始日を安全に作成
            const weekStart = new Date(
                safeDate.getFullYear(),
                safeDate.getMonth(),
                targetDate,
                12, 0, 0, 0
            );
            
            console.log('📅 Calculated week start:', weekStart);
            console.log('🔍 Week start details:', {
                year: weekStart.getFullYear(),
                month: weekStart.getMonth() + 1,
                date: weekStart.getDate()
            });
            
            // クリックされた日付を保存
            clickedDate = safeDate;
            
            // 週を更新
            currentWeekStart = weekStart;
            
            // シフト設定と予約データを読み込み、表示を更新
            Promise.all([
                loadShiftSettingsFromBackend(),
                loadReservationsFromBackend()
            ]).then(() => {
                renderWeekView();
            });
            
            // ミニカレンダーを閉じる
            document.getElementById('miniCalendar').classList.remove('show');
            
            // ミニカレンダーを再描画（選択状態を更新）
            renderMiniCalendar();
        }

        function previousMiniCalendarMonth() {
            const prevMonthDate = miniCalendarMonth;
            const prevMonth = new Date(
                prevMonthDate.getFullYear(),
                prevMonthDate.getMonth() - 1,
                15, // 月の中旬に設定
                12, 0, 0, 0
            );
            
            console.log('⬅️ Moving to previous month:', prevMonth);
            miniCalendarMonth = prevMonth;
            renderMiniCalendar();
        }

        function nextMiniCalendarMonth() {
            const nextMonthDate = miniCalendarMonth;
            const nextMonth = new Date(
                nextMonthDate.getFullYear(),
                nextMonthDate.getMonth() + 1,
                15, // 月の中旬に設定
                12, 0, 0, 0
            );
            
            console.log('➡️ Moving to next month:', nextMonth);
            miniCalendarMonth = nextMonth;
            renderMiniCalendar();
        }

        function previousMiniCalendarYear() {
            const prevYearDate = miniCalendarMonth;
            const prevYear = new Date(
                prevYearDate.getFullYear() - 1,
                prevYearDate.getMonth(),
                15, // 月の中旬に設定
                12, 0, 0, 0
            );
            
            console.log('⬅️⬅️ Moving to previous year:', prevYear);
            miniCalendarMonth = prevYear;
            renderMiniCalendar();
        }

        function nextMiniCalendarYear() {
            const nextYearDate = miniCalendarMonth;
            const nextYear = new Date(
                nextYearDate.getFullYear() + 1,
                nextYearDate.getMonth(),
                15, // 月の中旬に設定
                12, 0, 0, 0
            );
            
            console.log('➡️➡️ Moving to next year:', nextYear);
            miniCalendarMonth = nextYear;
            renderMiniCalendar();
        }

        // 休憩作成モーダルを開く（現在時刻で）
        function openBreakModalWithCurrentTime() {
            const now = new Date();
            const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(Math.floor(now.getMinutes() / 10) * 10).padStart(2, '0')}`;
            openBreakModal(now, currentTime);
        }

        // 休憩作成モーダルを開く
        function openBreakModal(date, time) {
            // 日付と時間の表示用フォーマット
            const displayDate = `${date.getFullYear()}年${String(date.getMonth() + 1)}月${String(date.getDate())}日`;
            const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
            const dayName = dayNames[date.getDay()];
            
            document.getElementById('breakDisplayDate').textContent = `${displayDate}(${dayName})`;
            document.getElementById('breakDisplayTime').textContent = time;
            
            // 内部的に日付と時間を保存
            window.selectedBreakDate = date;
            window.selectedBreakTime = time;
            
            // フィールドをリセット
            document.getElementById('breakDuration').value = '';
            document.getElementById('breakTitle').value = '';
            document.getElementById('customBreakTitleInput').value = '';
            document.getElementById('customBreakTitle').style.display = 'none';
            document.getElementById('breakNote').value = '';
            
            document.getElementById('breakModal').style.display = 'block';
        }



        // 休憩作成モーダルを閉じる
        function closeBreakModal() {
            document.getElementById('breakModal').style.display = 'none';
        }

        // 休憩詳細モーダルを開く
        function openBreakDetailModal(reservation) {
            
            window.currentBreakReservation = reservation;
            
            // 日付と時間の表示用フォーマット - より安全な方法
            let reservationDate;
            if (reservation.start_time) {
                reservationDate = new Date(reservation.start_time);
            } else if (reservation.date && reservation.time) {
                reservationDate = new Date(`${reservation.date} ${reservation.time}`);
            } else if (reservation.date) {
                // 時間がない場合は日付のみから作成
                reservationDate = new Date(reservation.date);
            } else {
                console.error('❌ No valid date/time found in reservation:', reservation);
                // より詳細なデバッグ情報を出力
                console.log('🔍 Reservation object structure:', {
                    hasStartTime: !!reservation.start_time,
                    hasDate: !!reservation.date,
                    hasTime: !!reservation.time,
                    startTimeType: reservation.start_time ? typeof reservation.start_time : 'undefined',
                    dateType: reservation.date ? typeof reservation.date : 'undefined',
                    timeType: reservation.time ? typeof reservation.time : 'undefined',
                    fullObject: reservation
                });
                reservationDate = new Date(); // フォールバック
            }
            
            // 不正な日付の場合のチェック
            if (isNaN(reservationDate.getTime())) {
                console.error('❌ Invalid date created from reservation:', reservation);
                reservationDate = new Date(); // フォールバック
            }
            
            console.log('📅 Parsed date:', reservationDate);
            
            const displayDate = `${reservationDate.getFullYear()}年${String(reservationDate.getMonth() + 1).padStart(2, '0')}月${String(reservationDate.getDate()).padStart(2, '0')}日`;
            const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
            const dayName = dayNames[reservationDate.getDay()];
            const displayTime = reservationDate.toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' });
            
            document.getElementById('breakDetailDate').textContent = `${displayDate}(${dayName})`;
            document.getElementById('breakDetailTime').textContent = displayTime;
            document.getElementById('breakDetailDuration').textContent = `${reservation.duration || 30}分間`;
            
            // フォームに現在の値を設定
            document.getElementById('editBreakTitle').value = reservation.customer || reservation.name || '休憩';
            document.getElementById('editBreakDuration').value = (reservation.duration || 30).toString();
            document.getElementById('editBreakNote').value = reservation.note || '';
            
            // カスタムタイトルの処理
            handleEditBreakTitleChange();
            
            document.getElementById('breakDetailModal').style.display = 'block';
        }

        // 休憩詳細モーダルを閉じる
        function closeBreakDetailModal() {
            document.getElementById('breakDetailModal').style.display = 'none';
            window.currentBreakReservation = null;
        }

        // 休憩詳細モーダルの外側クリックで閉じる機能を設定
        document.addEventListener('DOMContentLoaded', function() {
            const breakDetailModal = document.getElementById('breakDetailModal');
            if (breakDetailModal) {
                breakDetailModal.addEventListener('click', function(event) {
                    if (event.target === breakDetailModal) {
                        closeBreakDetailModal();
                    }
                });
            }
        });

        // 編集時の休憩タイトル選択処理
        function handleEditBreakTitleChange() {
            const breakTitle = document.getElementById('editBreakTitle');
            const customBreakTitle = document.getElementById('editCustomBreakTitle');
            const customInput = document.getElementById('editCustomBreakTitleInput');
            
            if (breakTitle.value === 'その他') {
                customBreakTitle.style.display = 'block';
                customInput.value = window.currentBreakReservation?.customer || '';
            } else {
                customBreakTitle.style.display = 'none';
                customInput.value = '';
            }
        }

        // 一括予約作成モーダルを開く
        function openBulkReservationModal() {
            console.log('🔍 Opening bulk reservation modal...');
            
            // フォームをリセット（最初に実行）
            document.getElementById('bulkReservationForm').reset();
            
            // 現在の日付を設定
            const bulkCurrentDate = new Date();
            const startDateValue = bulkCurrentDate.toISOString().split('T')[0];
            document.getElementById('bulkStartDate').value = startDateValue;
            
            // 1週間後を終了日として設定
            const nextWeek = new Date(bulkCurrentDate);
            nextWeek.setDate(bulkCurrentDate.getDate() + 7);
            const endDateValue = nextWeek.toISOString().split('T')[0];
            document.getElementById('bulkEndDate').value = endDateValue;
            
            // 現在時刻を設定
            const currentTime = `${String(bulkCurrentDate.getHours()).padStart(2, '0')}:${String(Math.floor(bulkCurrentDate.getMinutes() / 10) * 10).padStart(2, '0')}`;
            document.getElementById('bulkStartTime').value = currentTime;
            
            // 曜日チェックボックスを全てチェック
            document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = true;
            });
            
            // プレビューリストをクリア
            document.getElementById('bulkPreviewList').innerHTML = '';
            document.getElementById('submitBulkBtn').disabled = true;
            
            // デバッグ用：設定された値を確認
            console.log('🔍 Modal initialized with:', {
                startDate: startDateValue,
                endDate: endDateValue,
                startTime: currentTime,
                selectedDays: Array.from(document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]:checked')).map(cb => cb.value)
            });
            
            // リアルタイムバリデーションの設定
            setupBulkReservationValidation();
            
            // カレンダー構造を調査（デバッグ用）
            inspectCalendarStructure();
            
            document.getElementById('bulkReservationModal').style.display = 'block';
        }
        
        // 一括予約のリアルタイムバリデーション設定
        function setupBulkReservationValidation() {
            // 時間、日付、コースが変更されたときにリアルタイムでチェック
            const timeInput = document.getElementById('bulkStartTime');
            const durationSelect = document.getElementById('bulkDuration');
            const startDateInput = document.getElementById('bulkStartDate');
            const endDateInput = document.getElementById('bulkEndDate');
            
            const validateInputs = () => {
                const startTime = timeInput.value;
                const duration = parseInt(durationSelect.value);
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);
                const selectedDays = Array.from(document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]:checked'))
                    .map(cb => parseInt(cb.value));
                
                if (startTime && duration && !isNaN(startDate.getTime()) && !isNaN(endDate.getTime()) && selectedDays.length > 0) {
                    // リアルタイムで重複チェック
                    const conflictCheck = performFinalConflictCheck(startDate, endDate, startTime, duration, selectedDays);
                    if (conflictCheck.hasConflicts) {
                        showMessage(`⚠️ 重複が検出されました: ${conflictCheck.conflictDates.join(', ')}`, 'warning');
                    }
                }
            };
            
            timeInput.addEventListener('change', validateInputs);
            durationSelect.addEventListener('change', validateInputs);
            startDateInput.addEventListener('change', validateInputs);
            endDateInput.addEventListener('change', validateInputs);
            
            // 曜日チェックボックスの変更も監視
            document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', validateInputs);
            });
        }
        
        // カレンダー構造を調査する関数（デバッグ用）
        function inspectCalendarStructure() {
            console.log('🔍 Inspecting calendar structure...');
            
            // カレンダーの日付セルを探す
            const dateCells = document.querySelectorAll('[data-date]');
            console.log('🔍 Date cells found:', dateCells.length);
            if (dateCells.length > 0) {
                console.log('🔍 Sample date cell:', dateCells[0]);
                console.log('🔍 Sample data-date attribute:', dateCells[0].getAttribute('data-date'));
            }
            
            // 予約要素を探す
            const reservationElements = document.querySelectorAll('.reservation-block, .reservation-item, [class*="reservation"]');
            console.log('🔍 Reservation elements found:', reservationElements.length);
            if (reservationElements.length > 0) {
                console.log('🔍 Sample reservation element:', reservationElements[0]);
                console.log('🔍 Sample reservation classes:', reservationElements[0].className);
                console.log('🔍 Sample reservation data attributes:', {
                    'data-reservation-id': reservationElements[0].getAttribute('data-reservation-id'),
                    'data-original-date-key': reservationElements[0].getAttribute('data-original-date-key'),
                    'data-date': reservationElements[0].getAttribute('data-date')
                });
            }
            
            // カレンダーの全体的な構造
            const calendarContainer = document.querySelector('.calendar-container, .calendar, [class*="calendar"]');
            if (calendarContainer) {
                console.log('🔍 Calendar container found:', calendarContainer);
                console.log('🔍 Calendar container classes:', calendarContainer.className);
            }
        }

        // 一括予約作成モーダルを閉じる
        function closeBulkReservationModal() {
            document.getElementById('bulkReservationModal').style.display = 'none';
        }

        // 一括予約のプレビューを表示
        async function previewBulkReservations() {
            const startDateValue = document.getElementById('bulkStartDate').value;
            const endDateValue = document.getElementById('bulkEndDate').value;
            const startTime = document.getElementById('bulkStartTime').value;
            const duration = parseInt(document.getElementById('bulkDuration').value);
            const selectedDays = Array.from(document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]:checked'))
                .map(cb => parseInt(cb.value));
            
            // デバッグ用：曜日選択の詳細をログ
            console.log('🔍 Day selection debug:', {
                allCheckboxes: document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]').length,
                checkedCheckboxes: document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]:checked').length,
                selectedDays: selectedDays,
                checkboxValues: Array.from(document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]')).map(cb => ({ id: cb.id, value: cb.value, checked: cb.checked }))
            });
            
            // より厳密なバリデーション
            if (!startDateValue || !endDateValue || !startTime || !duration || selectedDays.length === 0) {
                // デバッグ用：どの項目が空かを特定
                const missingFields = [];
                if (!startDateValue) missingFields.push('開始日');
                if (!endDateValue) missingFields.push('終了日');
                if (!startTime) missingFields.push('開始時間');
                if (!duration) missingFields.push('コース選択');
                if (selectedDays.length === 0) missingFields.push('対象曜日');
                
                console.log('Missing fields:', missingFields);
                showMessage(`以下の項目が入力されていません: ${missingFields.join(', ')}`, 'error');
                return;
            }
            
            // 日付の妥当性チェック
            const startDate = new Date(startDateValue);
            const endDate = new Date(endDateValue);
            
            if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                showMessage('日付が正しく入力されていません。', 'error');
                return;
            }
            
            if (startDate > endDate) {
                showMessage('開始日は終了日より前の日付を選択してください。', 'error');
                return;
            }
            
            // ビジネスアワーの検証（各日付のシフト設定をチェック）
            let businessHoursValid = true;
            let invalidDates = [];
            let businessHoursCheckDate = new Date(startDate);
            
            // 非同期で営業時間をチェック
            const checkBusinessHours = async () => {
                while (businessHoursCheckDate <= endDate) {
                    if (selectedDays.includes(businessHoursCheckDate.getDay())) {
                        const isValid = await isWithinBusinessHours(startTime, duration, businessHoursCheckDate);
                        if (!isValid) {
                            businessHoursValid = false;
                            invalidDates.push(businessHoursCheckDate.toLocaleDateString('ja-JP'));
                        }
                    }
                    businessHoursCheckDate.setDate(businessHoursCheckDate.getDate() + 1);
                }
                
                if (!businessHoursValid) {
                    showMessage(`選択された時間が営業時間外の日付があります: ${invalidDates.join(', ')}。シフト設定を確認してください。`, 'error');
                    return false;
                }
                
                return true;
            };
            
            // 営業時間チェックを実行
            const businessHoursOk = await checkBusinessHours();
            if (!businessHoursOk) {
                return;
            }
            
            const previewList = document.getElementById('bulkPreviewList');
            previewList.innerHTML = '';
            
            let previewDate = new Date(startDate);
            let reservationCount = 0;
            let conflictCount = 0;
            
            while (previewDate <= endDate) {
                if (selectedDays.includes(previewDate.getDay())) {
                    const dateStr = `${previewDate.getFullYear()}年${String(previewDate.getMonth() + 1).padStart(2, '0')}月${String(previewDate.getDate()).padStart(2, '0')}日`;
                    const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
                    const dayName = dayNames[previewDate.getDay()];
                    
                    // 既存の予約との重複チェック
                    const hasConflict = checkReservationConflict(previewDate, startTime, duration);
                    
                    const previewItem = document.createElement('div');
                    previewItem.className = 'bulk-preview-item';
                    if (hasConflict) {
                        previewItem.classList.add('conflict');
                        previewItem.innerHTML = `
                            <span class="date">${dateStr}(${dayName})</span>
                            <span class="time">${startTime} - ${calculateEndTime(startTime, duration)}</span>
                            <span class="conflict-warning">⚠️ 既存予約と重複</span>
                        `;
                        conflictCount++;
                    } else {
                        previewItem.innerHTML = `
                            <span class="date">${dateStr}(${dayName})</span>
                            <span class="time">${startTime} - ${calculateEndTime(startTime, duration)}</span>
                        `;
                        reservationCount++;
                    }
                    previewList.appendChild(previewItem);
                }
                previewDate.setDate(previewDate.getDate() + 1);
            }
            
            if (conflictCount > 0) {
                showMessage(`${conflictCount}件の重複があります。重複する日付は予約を作成できません。`, 'warning');
                document.getElementById('submitBulkBtn').disabled = true;
            } else if (reservationCount > 0) {
                // 最終的な重複チェック（より厳密）
                const finalConflictCheck = performFinalConflictCheck(startDate, endDate, startTime, duration, selectedDays);
                if (finalConflictCheck.hasConflicts) {
                    showMessage(`最終チェックで重複が見つかりました: ${finalConflictCheck.conflictDates.join(', ')}。予約を作成できません。`, 'error');
                    document.getElementById('submitBulkBtn').disabled = true;
                } else {
                    document.getElementById('submitBulkBtn').disabled = false;
                    showMessage(`${reservationCount}件の予約を作成します。`, 'info');
                }
            } else {
                showMessage('選択された期間と曜日に該当する日付がありません。', 'error');
                document.getElementById('submitBulkBtn').disabled = true;
            }
        }

        // 終了時間を計算
        function calculateEndTime(startTime, durationMinutes) {
            const [hours, minutes] = startTime.split(':').map(Number);
            const startDate = new Date();
            startDate.setHours(hours, minutes, 0, 0);
            
            const endDate = new Date(startDate.getTime() + durationMinutes * 60000);
            return `${String(endDate.getHours()).padStart(2, '0')}:${String(endDate.getMinutes()).padStart(2, '0')}`;
        }

        // 営業時間内かチェック（シフト設定を考慮）
        async function isWithinBusinessHours(startTime, durationMinutes, date = null) {
            // 日付が指定されている場合、シフト設定をチェック
            if (date) {
                const dateKey = date.toISOString().split('T')[0];
                const dayOfWeek = date.getDay();
                
                console.log(`🔍 Checking business hours for ${dateKey} (day ${dayOfWeek}) at ${startTime}`);
                
                // 方法1: カレンダーの既存のビジネスアワー関数を使用（通常の予約と同じ）
                if (typeof window.isBusinessHour === 'function') {
                    console.log(`🔍 Using window.isBusinessHour for ${dateKey} at ${startTime}`);
                    
                    // 時間を分に変換
                    const [startHour, startMinute] = startTime.split(':').map(Number);
                    const startMinutes = startHour * 60 + startMinute;
                    
                    // 終了時間を計算
                    const endMinutes = startMinutes + durationMinutes;
                    
                    // 各時間スロットをチェック
                    for (let timeInMinutes = startMinutes; timeInMinutes < endMinutes; timeInMinutes += 10) {
                        const timeStr = `${Math.floor(timeInMinutes / 60).toString().padStart(2, '0')}:${(timeInMinutes % 60).toString().padStart(2, '0')}`;
                        
                        // 現在の日付のスケジュールを使用するため、日付を指定してisBusinessHourを呼び出し
                        const isAvailable = window.isBusinessHour(dayOfWeek, timeStr, date);
                        
                        console.log(`🔍 Checking time ${timeStr} (${timeInMinutes}min) for day ${dayOfWeek} on ${dateKey}: ${isAvailable}`);
                        
                        if (!isAvailable) {
                            console.log(`❌ Time ${timeStr} is not available on day ${dayOfWeek} for ${dateKey}`);
                            return false;
                        }
                    }
                    
                    console.log(`✅ All time slots are available for ${dateKey} at ${startTime}`);
                    return true;
                }
                
                // 方法2: シフトAPIを使用（フォールバック）
                try {
                    const shiftSettings = await getShiftSettingsForDate(date);
                    if (shiftSettings && shiftSettings.schedule) {
                        const schedule = shiftSettings.schedule;
                        console.log(`🔍 Found shift schedule:`, schedule);
                        
                        // シフト設定から営業時間を取得
                        const businessSlots = schedule.business_slots || [];
                        if (businessSlots.length > 0) {
                            const [startHour, startMinute] = startTime.split(':').map(Number);
                            const [endHour, endMinute] = calculateEndTime(startTime, durationMinutes).split(':').map(Number);
                            
                            const startMinutes = startHour * 60 + startMinute;
                            const endMinutes = endHour * 60 + endMinute;
                            
                            // 各営業時間スロットをチェック
                            for (const slot of businessSlots) {
                                const slotStart = slot.start_time;
                                const slotEnd = slot.end_time;
                                
                                if (slotStart && slotEnd) {
                                    const [slotStartHour, slotStartMin] = slotStart.split(':').map(Number);
                                    const [slotEndHour, slotEndMin] = slotEnd.split(':').map(Number);
                                    
                                    const slotStartMinutes = slotStartHour * 60 + slotStartMin;
                                    const slotEndMinutes = slotEndHour * 60 + slotEndMin;
                                    
                                    console.log(`🔍 Checking slot: ${slotStart} - ${slotEnd} (${slotStartMinutes}-${slotEndMinutes}) vs ${startMinutes}-${endMinutes}`);
                                    
                                    // 予約時間が営業時間スロット内に収まっているかチェック
                                    if (startMinutes >= slotStartMinutes && endMinutes <= slotEndMinutes) {
                                        console.log(`✅ Time slot ${startTime}-${endMinutes} is within business hours ${slotStart}-${slotEnd}`);
                                        return true;
                                    }
                                }
                            }
                            
                            console.log(`❌ Time slot ${startTime} (${startMinutes}-${endMinutes}) is outside all business hours`);
                            return false;
                        }
                    }
                    
                    // シフトが閉店の場合
                    if (shiftSettings && shiftSettings.isClosed) {
                        console.log(`🚫 Shift is closed for ${dateKey}`);
                        return false;
                    }
                    
                    console.log(`🔍 No shift schedule found, using calendar's business hour logic`);
                    
                } catch (error) {
                    console.error(`🔍 Error checking shift settings:`, error);
                    console.log(`🔍 Falling back to calendar's business hour logic`);
                }
            }
            
            // フォールバック: カレンダーの既存のビジネスアワーロジックを使用
            console.log(`🔍 Using calendar's business hour logic for ${startTime}`);
            
            // カレンダーの既存の営業時間チェックを使用
            if (typeof window.isBusinessHour === 'function') {
                const [startHour, startMinute] = startTime.split(':').map(Number);
                const startMinutes = startHour * 60 + startMinute;
                const endMinutes = startMinutes + durationMinutes;
                
                // 現在の日付の曜日を取得（デフォルトは月曜日）
                const dayOfWeek = date ? date.getDay() : 1;
                
                // 各時間スロットをチェック
                for (let timeInMinutes = startMinutes; timeInMinutes < endMinutes; timeInMinutes += 10) {
                    const timeStr = `${Math.floor(timeInMinutes / 60).toString().padStart(2, '0')}:${(timeInMinutes % 60).toString().padStart(2, '0')}`;
                    const isAvailable = window.isBusinessHour(dayOfWeek, timeStr, date);
                    
                    if (!isAvailable) {
                        console.log(`❌ Time ${timeStr} is not available on day ${dayOfWeek} for ${date ? date.toISOString().split('T')[0] : 'unknown date'}`);
                        return false;
                    }
                }
                
                console.log(`✅ All time slots are available using calendar's business hour logic`);
                return true;
            }
            
            // 最終フォールバック: 基本的な営業時間チェック
            const businessHours = getBusinessHours();
            const businessStart = businessHours.start;
            const businessEnd = businessHours.end;
            
            const [startHour, startMinute] = startTime.split(':').map(Number);
            const [endHour, endMinute] = calculateEndTime(startTime, durationMinutes).split(':').map(Number);
            const [businessStartHour, businessStartMinute] = businessStart.split(':').map(Number);
            const [businessEndHour, businessEndMinute] = businessEnd.split(':').map(Number);
            
            const startMinutes = startHour * 60 + startMinute;
            const endMinutes = endHour * 60 + endMinute;
            const businessStartMinutes = businessStartHour * 60 + businessStartMinute;
            const businessEndMinutes = businessEndHour * 60 + businessEndMinute;
            
            const isWithin = startMinutes >= businessStartMinutes && endMinutes <= businessEndMinutes;
            console.log(`🔍 Final fallback business hours check: ${startTime} (${startMinutes}-${endMinutes}) vs ${businessStart}-${businessEnd}: ${isWithin}`);
            
            return isWithin;
        }
        
        // 指定された日付のシフト設定を取得
        async function getShiftSettingsForDate(date) {
            try {
                // カレンダーのシフト設定を取得する関数を呼び出し
                if (typeof window.getBusinessHoursForDate === 'function') {
                    console.log(`🔍 Using window.getBusinessHoursForDate for ${date.toISOString().split('T')[0]}`);
                    return await window.getBusinessHoursForDate(date);
                }
                
                // 代替方法: シフトAPIを直接呼び出し
                const dateStr = date.toISOString().split('T')[0];
                console.log(`🔍 Fetching shift data from API for ${dateStr}`);
                
                const response = await fetch(`/admin/shifts/for_date?date=${dateStr}`);
                const data = await response.json();
                
                if (data.success && data.shift) {
                    console.log(`🔍 Found shift data:`, data.shift);
                    return {
                        schedule: {
                            business_slots: [{
                                start_time: data.shift.start_time,
                                end_time: data.shift.end_time
                            }]
                        },
                        shift: data.shift,
                        isClosed: data.shift.shift_type === 'closed'
                    };
                }
                
                console.log(`🔍 No shift data found for ${dateStr}, using default`);
                return null;
                
            } catch (error) {
                console.error(`🔍 Error getting shift settings:`, error);
                return null;
            }
        }
        
        // 営業時間を取得（設定から動的に取得可能）
        function getBusinessHours() {
            // 現在の週の営業時間設定を取得
            if (window.currentWeekSchedule && window.currentWeekSchedule.business_hours) {
                return window.currentWeekSchedule.business_hours;
            }
            
            // デフォルトの営業時間
            return {
                start: '10:00',
                end: '21:00'
            };
        }

        // 既存の予約との重複チェック
        function checkReservationConflict(date, startTime, duration) {
            const dateKey = date.toISOString().split('T')[0];
            const dayReservations = reservations[dateKey] || [];
            
            const [startHour, startMinute] = startTime.split(':').map(Number);
            const startMinutes = startHour * 60 + startMinute;
            const endMinutes = startMinutes + duration;
            
            console.log(`🔍 Checking conflict for ${dateKey} at ${startTime} (${duration}min):`, {
                startMinutes,
                endMinutes,
                existingReservations: dayReservations.length
            });
            
            // 方法1: reservationsオブジェクトからチェック
            const conflictFromObject = dayReservations.some(reservation => {
                // 休憩機能は無効化
                
                // start_timeとend_timeが存在する場合
                if (reservation.start_time && reservation.end_time) {
                    const reservationStart = new Date(reservation.start_time);
                    const reservationEnd = new Date(reservation.end_time);
                    
                    const reservationStartMinutes = reservationStart.getHours() * 60 + reservationStart.getMinutes();
                    const reservationEndMinutes = reservationEnd.getHours() * 60 + reservationEnd.getMinutes();
                    
                    console.log(`🔍 Comparing with reservation:`, {
                        reservationStart: reservationStart.toLocaleTimeString(),
                        reservationEnd: reservationEnd.toLocaleTimeString(),
                        reservationStartMinutes,
                        reservationEndMinutes,
                        overlap: (startMinutes < reservationEndMinutes && endMinutes > reservationStartMinutes)
                    });
                    
                    // 時間の重複チェック
                    return (startMinutes < reservationEndMinutes && endMinutes > reservationStartMinutes);
                }
                
                // dateとtimeが存在する場合（古い形式）
                if (reservation.date && reservation.time) {
                    const [reservationHour, reservationMinute] = reservation.time.split(':').map(Number);
                    const reservationStartMinutes = reservationHour * 60 + reservationMinute;
                    const reservationEndMinutes = reservationStartMinutes + (reservation.duration || 60);
                    
                    console.log(`🔍 Comparing with old format reservation:`, {
                        reservationTime: reservation.time,
                        reservationDuration: reservation.duration,
                        reservationStartMinutes,
                        reservationEndMinutes,
                        overlap: (startMinutes < reservationEndMinutes && endMinutes > reservationStartMinutes)
                    });
                    
                    return (startMinutes < reservationEndMinutes && endMinutes > reservationStartMinutes);
                }
                
                return false;
            });
            
            // 方法2: DOMから直接チェック（より確実）
            const conflictFromDOM = checkConflictFromDOM(date, startTime, duration);
            
            console.log(`🔍 Conflict check results:`, {
                fromObject: conflictFromObject,
                fromDOM: conflictFromDOM,
                finalResult: conflictFromObject || conflictFromDOM
            });
            
            return conflictFromObject || conflictFromDOM;
        }
        
        // DOMから直接重複をチェック（より確実な方法）
        function checkConflictFromDOM(date, startTime, duration) {
            const dateKey = date.toISOString().split('T')[0];
            const [year, month, day] = dateKey.split('-').map(Number);
            
            console.log(`🔍 Looking for day cell with date: ${dateKey}`);
            
            // 複数のセレクターを試す
            let dayCell = document.querySelector(`[data-date="${dateKey}"]`);
            if (!dayCell) {
                // 別の形式を試す
                dayCell = document.querySelector(`[data-date*="${dateKey}"]`);
            }
            if (!dayCell) {
                // 日付文字列を含む要素を探す
                dayCell = document.querySelector(`[data-date*="${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}"]`);
            }
            if (!dayCell) {
                // より柔軟な検索
                const allCells = document.querySelectorAll('[data-date]');
                console.log(`🔍 All cells with data-date:`, Array.from(allCells).map(cell => cell.getAttribute('data-date')));
                
                dayCell = Array.from(allCells).find(cell => {
                    const cellDate = cell.getAttribute('data-date');
                    return cellDate && cellDate.includes(dateKey);
                });
            }
            
            if (!dayCell) {
                console.log(`🔍 Day cell not found for ${dateKey}, trying alternative approach...`);
                
                // 代替アプローチ: カレンダーの日付セルを直接探す
                const calendarCells = document.querySelectorAll('.calendar-day, .day-cell, [class*="day"], [class*="date"]');
                console.log(`🔍 Calendar cells found:`, calendarCells.length);
                
                // 日付テキストで検索
                dayCell = Array.from(calendarCells).find(cell => {
                    const cellText = cell.textContent || '';
                    const datePattern = new RegExp(`${year}年?${month}月?${day}日?|${month}/${day}|${month}-${day}`);
                    return datePattern.test(cellText);
                });
            }
            
            if (!dayCell) {
                console.log(`🔍 Day cell still not found for ${dateKey}, using fallback method`);
                // フォールバック: 予約要素を直接検索
                return checkConflictFromReservationElements(startTime, duration);
            }
            
            console.log(`🔍 Found day cell:`, dayCell);
            
            // その日の予約要素を取得
            const reservationElements = dayCell.querySelectorAll('.reservation-item, .break-item, .reservation-block, [class*="reservation"]');
            if (reservationElements.length === 0) {
                console.log(`🔍 No reservation elements found in day cell for ${dateKey}, trying global search`);
                return checkConflictFromReservationElements(startTime, duration);
            }
            
            const [startHour, startMinute] = startTime.split(':').map(Number);
            const startMinutes = startHour * 60 + startMinute;
            const endMinutes = startMinutes + duration;
            
            console.log(`🔍 DOM check for ${dateKey}:`, {
                startTime: startTime,
                duration: duration,
                startMinutes: startMinutes,
                endMinutes: endMinutes,
                reservationElements: reservationElements.length
            });
            
            return Array.from(reservationElements).some(element => {
                // 休憩は除外
                if (element.classList.contains('break-item') || element.classList.contains('break')) {
                    return false;
                }
                
                // 予約の時間を取得（複数の方法を試す）
                let timeText = element.querySelector('.reservation-time')?.textContent;
                if (!timeText) {
                    timeText = element.querySelector('[class*="time"]')?.textContent;
                }
                if (!timeText) {
                    timeText = element.textContent;
                }
                
                if (!timeText) return false;
                
                console.log(`🔍 Checking element:`, element, `with time text:`, timeText);
                
                // 時間テキストをパース（複数の形式に対応）
                let timeMatch = timeText.match(/(\d{1,2}):(\d{2})\s*-\s*(\d{1,2}):(\d{2})/);
                if (!timeMatch) {
                    timeMatch = timeText.match(/(\d{1,2}):(\d{2})/);
                }
                if (!timeMatch) {
                    timeMatch = timeText.match(/(\d{1,2}):(\d{2})\s*~(\d{1,2}):(\d{2})/);
                }
                
                if (!timeMatch) {
                    console.log(`🔍 Could not parse time from:`, timeText);
                    return false;
                }
                
                let startH, startM, endH, endM;
                if (timeMatch.length === 3) {
                    // 開始時刻のみの場合、durationから終了時刻を計算
                    [_, startH, startM] = timeMatch;
                    const startMinutes = parseInt(startH) * 60 + parseInt(startM);
                    const endMinutes = startMinutes + duration;
                    endH = Math.floor(endMinutes / 60);
                    endM = endMinutes % 60;
                } else {
                    [_, startH, startM, endH, endM] = timeMatch;
                }
                
                const reservationStartMinutes = parseInt(startH) * 60 + parseInt(startM);
                const reservationEndMinutes = parseInt(endH) * 60 + parseInt(endM);
                
                const hasOverlap = (startMinutes < reservationEndMinutes && endMinutes > reservationStartMinutes);
                
                console.log(`🔍 DOM element check:`, {
                    timeText: timeText,
                    reservationStart: `${startH}:${startM}`,
                    reservationEnd: `${endH}:${endM}`,
                    reservationStartMinutes: reservationStartMinutes,
                    reservationEndMinutes: reservationEndMinutes,
                    hasOverlap: hasOverlap
                });
                
                return hasOverlap;
            });
        }
        
        // 予約要素を直接検索して重複をチェック（フォールバック方法）
        function checkConflictFromReservationElements(startTime, duration) {
            console.log(`🔍 Using fallback method: checking all reservation elements`);
            
            const [startHour, startMinute] = startTime.split(':').map(Number);
            const startMinutes = startHour * 60 + startMinute;
            const endMinutes = startMinutes + duration;
            
            // すべての予約要素を検索
            const allReservations = document.querySelectorAll('.reservation-block, .reservation-item, [class*="reservation"]');
            console.log(`🔍 Found ${allReservations.length} total reservation elements`);
            
            return Array.from(allReservations).some(element => {
                // 休憩は除外
                if (element.classList.contains('break') || element.classList.contains('break-item')) {
                    return false;
                }
                
                // 要素の日付を取得
                const elementDate = element.getAttribute('data-original-date-key') || 
                                  element.getAttribute('data-date') || 
                                  element.closest('[data-date]')?.getAttribute('data-date');
                
                if (!elementDate) {
                    console.log(`🔍 Element has no date attribute:`, element);
                    return false;
                }
                
                // 時間を取得
                const timeText = element.textContent || '';
                const timeMatch = timeText.match(/(\d{1,2}):(\d{2})/);
                if (!timeMatch) return false;
                
                const [_, hour, minute] = timeMatch;
                const reservationStartMinutes = parseInt(hour) * 60 + parseInt(minute);
                const reservationEndMinutes = reservationStartMinutes + 60; // デフォルト60分
                
                const hasOverlap = (startMinutes < reservationEndMinutes && endMinutes > reservationStartMinutes);
                
                if (hasOverlap) {
                    console.log(`🔍 Found overlap in fallback check:`, {
                        elementDate: elementDate,
                        elementTime: `${hour}:${minute}`,
                        hasOverlap: hasOverlap
                    });
                }
                
                return hasOverlap;
            });
        }
        
        // 時間をコース形式に変換
        function getCourseFromDuration(duration) {
            switch (duration) {
                case 40:
                    return '40分';
                case 60:
                    return '60分';
                case 80:
                    return '80分';
                default:
                    return '60分';
            }
        }
        
        // 最終的な重複チェック（より厳密）
        function performFinalConflictCheck(startDate, endDate, startTime, duration, selectedDays) {
            console.log('🔍 Performing final conflict check...');
            
            const conflicts = [];
            let conflictDate = new Date(startDate);
            
            while (conflictDate <= endDate) {
                if (selectedDays.includes(conflictDate.getDay())) {
                    const hasConflict = checkReservationConflict(conflictDate, startTime, duration);
                    if (hasConflict) {
                        conflicts.push(conflictDate.toLocaleDateString('ja-JP'));
                    }
                }
                conflictDate.setDate(conflictDate.getDate() + 1);
            }
            
            // 追加: カレンダー表示から直接重複をチェック
            const visualConflicts = checkVisualConflicts(startDate, endDate, startTime, duration, selectedDays);
            if (visualConflicts.length > 0) {
                conflicts.push(...visualConflicts);
            }
            
            const result = {
                hasConflicts: conflicts.length > 0,
                conflictDates: conflicts
            };
            
            console.log('🔍 Final conflict check result:', result);
            return result;
        }
        
        // カレンダー表示から直接重複をチェック
        function checkVisualConflicts(startDate, endDate, startTime, duration, selectedDays) {
            console.log('🔍 Checking visual conflicts in calendar display...');
            
            const conflicts = [];
            const [startHour, startMinute] = startTime.split(':').map(Number);
            const startMinutes = startHour * 60 + startMinute;
            const endMinutes = startMinutes + duration;
            
            // すべての予約ブロックを取得
            const allReservationBlocks = document.querySelectorAll('.reservation-block');
            console.log(`🔍 Found ${allReservationBlocks.length} reservation blocks in calendar`);
            
            allReservationBlocks.forEach(block => {
                // 休憩は除外
                if (block.classList.contains('break') || block.classList.contains('break-item')) {
                    return;
                }
                
                // 予約の日付を取得
                const blockDate = block.getAttribute('data-original-date-key') || 
                                block.getAttribute('data-date') || 
                                block.closest('[data-date]')?.getAttribute('data-date');
                
                if (!blockDate) {
                    console.log(`🔍 Block has no date:`, block);
                    return;
                }
                
                // 選択された日付範囲内かチェック
                const blockDateObj = new Date(blockDate);
                if (blockDateObj < startDate || blockDateObj > endDate) {
                    return;
                }
                
                // 選択された曜日かチェック
                if (!selectedDays.includes(blockDateObj.getDay())) {
                    return;
                }
                
                // 予約の時間を取得
                const blockText = block.textContent || '';
                const timeMatch = blockText.match(/(\d{1,2}):(\d{2})/);
                if (!timeMatch) {
                    console.log(`🔍 Could not parse time from block:`, blockText);
                    return;
                }
                
                const [_, blockHour, blockMinute] = timeMatch;
                const blockStartMinutes = parseInt(blockHour) * 60 + parseInt(blockMinute);
                const blockEndMinutes = blockStartMinutes + 60; // デフォルト60分
                
                // 重複チェック
                const hasOverlap = (startMinutes < blockEndMinutes && endMinutes > blockStartMinutes);
                
                if (hasOverlap) {
                    const conflictDate = blockDateObj.toLocaleDateString('ja-JP');
                    if (!conflicts.includes(conflictDate)) {
                        conflicts.push(conflictDate);
                        console.log(`🔍 Visual conflict detected:`, {
                            date: blockDate,
                            blockTime: `${blockHour}:${blockMinute}`,
                            newTime: startTime,
                            duration: duration,
                            hasOverlap: hasOverlap
                        });
                    }
                }
            });
            
            console.log(`🔍 Visual conflicts found:`, conflicts);
            return conflicts;
        }

        // 一括予約を作成
        async function createBulkReservations() {
            const startDateValue = document.getElementById('bulkStartDate').value;
            const endDateValue = document.getElementById('bulkEndDate').value;
            const startTime = document.getElementById('bulkStartTime').value;
            const duration = parseInt(document.getElementById('bulkDuration').value);
            const selectedDays = Array.from(document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]:checked'))
                .map(cb => parseInt(cb.value));
            const customerName = document.getElementById('bulkCustomerName').value;
            const customerPhone = document.getElementById('bulkCustomerPhone').value;
            const customerEmail = document.getElementById('bulkCustomerEmail').value;
            const note = document.getElementById('bulkNote').value;
            const status = document.getElementById('bulkStatus').value;
            
            // デバッグ用：曜日選択の詳細をログ
            console.log('🔍 Day selection debug (create):', {
                allCheckboxes: document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]').length,
                checkedCheckboxes: document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]:checked').length,
                selectedDays: selectedDays,
                checkboxValues: Array.from(document.querySelectorAll('#bulkDaysOfWeek input[type="checkbox"]')).map(cb => ({ id: cb.id, value: cb.value, checked: cb.checked }))
            });
            
            // より厳密なバリデーション
            if (!startDateValue || !endDateValue || !startTime || !duration || selectedDays.length === 0 || !customerName || !customerPhone) {
                // デバッグ用：どの項目が空かを特定
                const missingFields = [];
                if (!startDateValue) missingFields.push('開始日');
                if (!endDateValue) missingFields.push('終了日');
                if (!startTime) missingFields.push('開始時間');
                if (!duration) missingFields.push('コース選択');
                if (selectedDays.length === 0) missingFields.push('対象曜日');
                if (!customerName) missingFields.push('お客様名');
                if (!customerPhone) missingFields.push('電話番号');
                
                console.log('Missing fields:', missingFields);
                showMessage(`以下の項目が入力されていません: ${missingFields.join(', ')}`, 'error');
                return;
            }
            
            // 日付の妥当性チェック
            const startDate = new Date(startDateValue);
            const endDate = new Date(endDateValue);
            
            if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                showMessage('日付が正しく入力されていません。', 'error');
                return;
            }
            
            if (startDate > endDate) {
                showMessage('開始日は終了日より前の日付を選択してください。', 'error');
                return;
            }
            
            // ビジネスアワーの検証（各日付のシフト設定をチェック）
            let businessHoursValid = true;
            let invalidDates = [];
            let businessHoursCheckDate = new Date(startDate);
            
            // 非同期で営業時間をチェック
            const checkBusinessHours = async () => {
                while (businessHoursCheckDate <= endDate) {
                    if (selectedDays.includes(businessHoursCheckDate.getDay())) {
                        const isValid = await isWithinBusinessHours(startTime, duration, businessHoursCheckDate);
                        if (!isValid) {
                            businessHoursValid = false;
                            invalidDates.push(businessHoursCheckDate.toLocaleDateString('ja-JP'));
                        }
                    }
                    businessHoursCheckDate.setDate(businessHoursCheckDate.getDate() + 1);
                }
                
                if (!businessHoursValid) {
                    showMessage(`選択された時間が営業時間外の日付があります: ${invalidDates.join(', ')}。シフト設定を確認してください。`, 'error');
                    return false;
                }
                
                return true;
            };
            
            // 営業時間チェックを実行
            const businessHoursOk = await checkBusinessHours();
            if (!businessHoursOk) {
                return;
            }
            
            // 重複チェック（既存の予約との重複）
            let hasConflicts = false;
            let conflictDetails = [];
            let conflictCheckDate = new Date(startDate);
            while (conflictCheckDate <= endDate) {
                if (selectedDays.includes(conflictCheckDate.getDay())) {
                    if (checkReservationConflict(conflictCheckDate, startTime, duration)) {
                        hasConflicts = true;
                        conflictDetails.push(conflictCheckDate.toLocaleDateString('ja-JP'));
                    }
                }
                conflictCheckDate.setDate(conflictCheckDate.getDate() + 1);
            }
            
            if (hasConflicts) {
                showMessage(`既存の予約と重複する日付があります: ${conflictDetails.join(', ')}。プレビューを確認してください。`, 'error');
                return;
            }
            
            // 新規作成予定の予約同士の重複チェック（同じ日付に複数の予約を作成する場合）
            const plannedDates = [];
            let plannedDatesCheckDate = new Date(startDate);
            while (plannedDatesCheckDate <= endDate) {
                if (selectedDays.includes(plannedDatesCheckDate.getDay())) {
                    plannedDates.push(new Date(plannedDatesCheckDate));
                }
                plannedDatesCheckDate.setDate(plannedDatesCheckDate.getDate() + 1);
            }
            
            // 同じ日付に複数の予約を作成しようとしている場合はエラー
            const dateCounts = {};
            plannedDates.forEach(date => {
                const dateKey = date.toISOString().split('T')[0];
                dateCounts[dateKey] = (dateCounts[dateKey] || 0) + 1;
            });
            
            const duplicateDates = Object.entries(dateCounts).filter(([date, count]) => count > 1);
            if (duplicateDates.length > 0) {
                const duplicateDateList = duplicateDates.map(([date]) => new Date(date).toLocaleDateString('ja-JP')).join(', ');
                showMessage(`同じ日付（${duplicateDateList}）に複数の予約を作成することはできません。日付を調整してください。`, 'error');
                return;
            }
            
            const submitBtn = document.getElementById('submitBulkBtn');
            submitBtn.disabled = true;
            submitBtn.textContent = '作成中...';
            
            let createReservationsDate = new Date(startDate);
            let createdCount = 0;
            let failedCount = 0;
            
            const createReservations = async () => {
                while (createReservationsDate <= endDate) {
                    if (selectedDays.includes(createReservationsDate.getDay())) {
                        try {
                            const reservationData = {
                                reservation: {
                                    start_time: `${createReservationsDate.toISOString().split('T')[0]} ${startTime}`,
                                    course: getCourseFromDuration(duration),
                                    name: customerName,
                                    note: note,
                                    status: status,
                                    user_attributes: {
                                        name: customerName,
                                        phone_number: customerPhone,
                                        email: customerEmail
                                    }
                                }
                            };
                            
                            // デバッグ用：送信データをログ
                            console.log(`🔍 Sending reservation data for ${createReservationsDate.toLocaleDateString('ja-JP')}:`, reservationData);
                            
                            const response = await fetch('/admin/reservations/create_booking', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                                },
                                body: JSON.stringify(reservationData)
                            });
                            
                            if (response.ok) {
                                createdCount++;
                                showMessage(`${createReservationsDate.toLocaleDateString('ja-JP')}の予約を作成しました。`, 'success');
                            } else {
                                failedCount++;
                                // エラーの詳細を取得
                                const errorData = await response.json().catch(() => ({}));
                                const errorMessage = errorData.error || response.statusText;
                                console.error(`Failed to create reservation for ${createReservationsDate.toLocaleDateString('ja-JP')}:`, response.status, errorMessage);
                                showMessage(`${createReservationsDate.toLocaleDateString('ja-JP')}の予約作成に失敗: ${errorMessage}`, 'error');
                            }
                        } catch (error) {
                            failedCount++;
                            console.error(`Error creating reservation for ${createReservationsDate.toLocaleDateString('ja-JP')}:`, error);
                        }
                    }
                    createReservationsDate.setDate(createReservationsDate.getDate() + 1);
                }
                
                // 完了後の処理
                submitBtn.disabled = false;
                submitBtn.textContent = '一括作成';
                
                if (failedCount === 0) {
                    showMessage(`${createdCount}件の予約を正常に作成しました。`, 'success');
                    closeBulkReservationModal();
                    // カレンダーを更新
                    loadReservationsFromBackend();
                } else {
                    showMessage(`${createdCount}件作成、${failedCount}件失敗しました。`, 'warning');
                }
            };
            
            createReservations();
                }

        // 休憩の変更を保存
        function saveBreakChanges() {
            console.log('🔄 Saving break changes...');
            const reservation = window.currentBreakReservation;
            if (!reservation) {
                console.error('❌ No current break reservation found');
                return;
            }
            
            // デバッグ: 休憩予約の構造を確認
            console.log('🔍 Break reservation structure:', {
                id: reservation.id,
                hasStartTime: !!reservation.start_time,
                hasDate: !!reservation.date,
                hasTime: !!reservation.time,
                startTime: reservation.start_time,
                date: reservation.date,
                time: reservation.time,
                duration: reservation.duration,
                customer: reservation.customer,
                name: reservation.name,
                fullObject: reservation
            });
            
            const selectedTitle = document.getElementById('editBreakTitle').value;
            const customTitle = document.getElementById('editCustomBreakTitleInput').value;
            const duration = document.getElementById('editBreakDuration').value;
            const note = document.getElementById('editBreakNote').value;
            
            let finalTitle = selectedTitle;
            if (selectedTitle === 'その他' && customTitle.trim()) {
                finalTitle = customTitle.trim();
            }
            
            console.log('💾 Saving break with data:', { finalTitle, duration, note });
            
            // 時間変更の場合はバリデーション実行
            const newDuration = parseInt(duration);
            const currentDuration = reservation.duration || 30;
            
            if (newDuration !== currentDuration) {
                console.log('⏰ Duration changed, validating...');
                
                // 営業時間内チェック - 休憩予約用の特別処理
                let reservationDate, timeStr;
                if (reservation.start_time) {
                    reservationDate = new Date(reservation.start_time);
                    timeStr = reservationDate.toTimeString().substring(0, 5);
                } else if (reservation.date && reservation.time) {
                    reservationDate = new Date(`${reservation.date} ${reservation.time}`);
                    timeStr = reservation.time;
                } else if (reservation.date) {
                    // 休憩予約の場合、日付のみから時間を推定
                    reservationDate = new Date(reservation.date);
                    // デフォルト時間を設定（9:00）
                    timeStr = '09:00';
                    console.log('⚠️ Break reservation: using default time 09:00 for validation');
                } else {
                    console.error('❌ Cannot determine reservation time for validation');
                    showMessage('時間の検証に失敗しました。', 'error');
                    return;
                }
                
                const validation = validateReservationTimeWithinBusinessHours({
                    time: timeStr,
                    start_time: reservation.start_time || `${reservation.date} ${timeStr}`,
                    date: reservation.date,
                    duration: newDuration
                }, newDuration, 0); // 休憩はインターバル0
                
                if (!validation.valid) {
                    console.log('⚠️ Validation failed:', validation);
                    showMessage(validation.message, 'error');
                    return;
                }
                
                // 重複チェック（自分以外の予約との重複）
                const overlapValidation = validateReservationOverlap({
                    time: timeStr,
                    start_time: reservation.start_time || `${reservation.date} ${timeStr}`,
                    date: reservation.date,
                    duration: newDuration
                }, newDuration, 0, reservation.id); // 休憩はインターバル0、自分自身を除外
                
                if (!overlapValidation.valid) {
                    showMessage(overlapValidation.message, 'error');
                    return;
                }
            }
            
            // サーバーに保存リクエストを送信
            const updateData = {
                reservation: {
                    name: finalTitle,
                    course: `${duration}分`,
                    note: note,
                    individual_interval_minutes: 0  // 休憩にはインターバルなし
                }
            };
            
            fetch(`/admin/reservations/${reservation.id}/update_booking`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                },
                body: JSON.stringify(updateData)
            })
            .then(response => {
                if (response.status === 422) {
                    // バリデーションエラーの場合
                    return response.json().then(errorData => {
                        throw new Error(errorData.message || 'バリデーションエラーが発生しました');
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('✅ Break update response:', data);
                if (data.success) {
                    // ローカルデータを更新
                    reservation.customer = finalTitle;
                    reservation.name = finalTitle;
                    reservation.duration = parseInt(duration);
                    reservation.note = note;
                    
                    // グローバル reservations オブジェクトを更新 - より安全な日付キー取得
                    let dateKey;
                    if (reservation.start_time) {
                        dateKey = reservation.start_time.split('T')[0];
                    } else if (reservation.date) {
                        dateKey = reservation.date;
                    } else {
                        // 全ての日付から該当する予約を探して更新
                        for (const key of Object.keys(reservations)) {
                            if (reservations[key]) {
                                const index = reservations[key].findIndex(r => r.id === reservation.id);
                                if (index !== -1) {
                                    reservations[key][index] = { ...reservations[key][index], ...reservation };
                                    dateKey = key; // 見つかった日付キーを記録
                                    break;
                                }
                            }
                        }
                    }
                    
                    // 特定の日付キーがある場合はその日のみ処理
                    if (dateKey && reservations[dateKey]) {
                        const index = reservations[dateKey].findIndex(r => r.id === reservation.id);
                        if (index !== -1) {
                            reservations[dateKey][index] = { ...reservations[dateKey][index], ...reservation };
                        }
                    }
                    
                    // カレンダーを再描画（予約モーダルは開かない）
                    generateTimeSlots();
                    closeBreakDetailModal();
                    showMessage('休憩が更新されました。', 'success');
                } else {
                    showMessage('休憩の更新に失敗しました。', 'error');
                }
            })
            .catch(error => {
                console.error('❌ Error updating break:', error);
                // サーバーからのエラーメッセージを表示
                showMessage(error.message || '休憩の更新中にエラーが発生しました。', 'error');
            });
        }

        // 休憩予約を削除
        function deleteBreakReservation() {
            console.log('🗑️ deleteBreakReservation関数が呼び出されました');
            const reservation = window.currentBreakReservation;
            console.log('🔍 currentBreakReservation:', reservation);
            
            if (!reservation) {
                console.error('❌ No current break reservation to delete');
                showMessage('削除する休憩が見つかりませんでした。', 'error');
                return;
            }
            
            if (!reservation.id) {
                console.error('❌ reservation.idが未定義です:', reservation);
                showMessage('休憩IDが見つかりませんでした。', 'error');
                return;
            }
            
            console.log('✅ 休憩ID確認:', reservation.id);
            
            if (!confirm('この休憩を削除しますか？')) return;
            
            console.log('🗑️ Deleting break reservation:', reservation.id);
            
            // 正しいAPIエンドポイントを使用
            const deleteUrl = `/admin/reservations/${reservation.id}`;
            console.log('🌐 削除URL:', deleteUrl);
            
            fetch(deleteUrl, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                }
            })
            .then(response => {
                if (response.status === 404) {
                    // 既に削除済みの場合は成功として扱う
                    return { success: true, message: '予約は既に削除されています' };
                }
                return response.json();
            })
            .then(data => {
                console.log('🗑️ Delete response:', data);
                if (data.success) {
                    // ローカルデータから削除 - より安全な日付キー取得
                    let dateKey;
                    if (reservation.start_time) {
                        dateKey = reservation.start_time.split('T')[0];
                    } else if (reservation.date) {
                        dateKey = reservation.date;
                    } else {
                        // 全ての日付から削除を試行
                        for (const key of Object.keys(reservations)) {
                            if (reservations[key]) {
                                reservations[key] = reservations[key].filter(r => r.id !== reservation.id);
                            }
                        }
                    }
                    
                    // 特定の日付キーがある場合はその日のみ処理
                    if (dateKey && reservations[dateKey]) {
                        reservations[dateKey] = reservations[dateKey].filter(r => r.id !== reservation.id);
                    }
                    
                    // カレンダーを再描画
                    generateTimeSlots();
                    closeBreakDetailModal();
                    showMessage('休憩が削除されました。', 'success');
                } else {
                    showMessage('休憩の削除に失敗しました。', 'error');
                }
            })
            .catch(error => {
                console.error('Error deleting break:', error);
                showMessage('休憩の削除中にエラーが発生しました。', 'error');
            });
        }
        
        // グローバル関数として公開
        window.deleteBreakReservation = deleteBreakReservation;

        // 時間枠クリック時の選択肢を表示
        function showSlotOptions(date, time, cellElement) {
            // 既存の選択肢メニューがあれば削除
            const existingMenu = document.querySelector('.slot-options-menu');
            if (existingMenu) {
                existingMenu.remove();
            }

            // 選択肢メニューを作成
            const menu = document.createElement('div');
            menu.className = 'slot-options-menu';
            menu.innerHTML = `
                <div class="slot-option" onclick="openBookingModal(new Date('${date.toISOString()}'), '${time}'); closeSlotOptionsMenu()">
                    👤 予約作成
                </div>
                <div class="slot-option" onclick="openBreakModal(new Date('${date.toISOString()}'), '${time}'); closeSlotOptionsMenu()">
                    ☕ 休憩作成
                </div>
                <div class="slot-option-cancel" onclick="closeSlotOptionsMenu()">
                    ✕ キャンセル
                </div>
            `;

            // セルの位置を取得してメニューを配置
            const rect = cellElement.getBoundingClientRect();
            menu.style.position = 'fixed';
            menu.style.left = `${rect.left + 10}px`;
            menu.style.top = `${rect.top + 10}px`;
            menu.style.zIndex = '10000';

            // ページに追加
            document.body.appendChild(menu);

            // 外側クリックでメニューを閉じる
            setTimeout(() => {
                document.addEventListener('click', function closeOnOutsideClick(e) {
                    if (!menu.contains(e.target)) {
                        closeSlotOptionsMenu();
                        document.removeEventListener('click', closeOnOutsideClick);
                    }
                });
            }, 100);
        }

        // 選択肢メニューを閉じる
        function closeSlotOptionsMenu() {
            const menu = document.querySelector('.slot-options-menu');
            if (menu) {
                menu.remove();
            }
        }

        // 休憩タイトル選択時の処理
        function handleBreakTitleChange() {
            const breakTitle = document.getElementById('breakTitle');
            const customBreakTitle = document.getElementById('customBreakTitle');
            
            if (breakTitle.value === 'その他') {
                customBreakTitle.style.display = 'block';
            } else {
                customBreakTitle.style.display = 'none';
                document.getElementById('customBreakTitleInput').value = '';
            }
        }

        function openBookingModal(date, time) {
            // 日付と時間の表示用フォーマット
            const displayDate = `${date.getFullYear()}年${String(date.getMonth() + 1).padStart(2, '0')}月${String(date.getDate()).padStart(2, '0')}日`;
            const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
            const dayName = dayNames[date.getDay()];
            
            document.getElementById('bookingDisplayDate').textContent = `${displayDate}(${dayName})`;
            document.getElementById('bookingDisplayTime').textContent = time;
            
            // 内部的に日付と時間を保存
            window.selectedBookingDate = date;
            window.selectedBookingTime = time;
            
            // フィールドをリセット
            document.getElementById('bookingDuration').value = '';
            document.getElementById('customerName').value = '';
            document.getElementById('customerPhone').value = '';
            document.getElementById('customerEmail').value = '';
            document.getElementById('bookingNote').value = '';
            document.getElementById('bookingStatus').value = 'tentative';
            
            document.getElementById('bookingModal').style.display = 'block';
        }

        // 予約作成モーダルを閉じる
        function closeBookingModal() {
            document.getElementById('bookingModal').style.display = 'none';
            // 編集モードフラグをリセット
            isEditingReservation = false;
            currentReservation = null;
            reservationToEdit = null;
        }

        // 予約を作成・更新
        function createBooking() {
            const duration = document.getElementById('bookingDuration').value;
            const customerName = document.getElementById('customerName').value;
            const customerPhone = document.getElementById('customerPhone').value;
            const customerEmail = document.getElementById('customerEmail').value;
            const bookingNote = document.getElementById('bookingNote').value;
            const bookingStatus = document.getElementById('bookingStatus').value;

            console.log('🔄 Creating/Updating booking, isEditing:', isEditingReservation);

            if (!duration || !customerName || !customerPhone) {
                showMessage('コース、お客様名、電話番号は必須です。', 'error');
                return;
            }

            // 選択された日時からdateTimeを作成
            const selectedDate = window.selectedBookingDate;
            const selectedTime = window.selectedBookingTime;
            const dateTime = `${selectedDate.getFullYear()}-${String(selectedDate.getMonth() + 1).padStart(2, '0')}-${String(selectedDate.getDate()).padStart(2, '0')} ${selectedTime}`;

            // 営業時間内に収まるかチェック
            const [dateStr, timeStr] = dateTime.split(' ');
            const reservationDate = new Date(dateStr);
            const dayOfWeek = reservationDate.getDay();
            const newDuration = parseInt(duration);
            const defaultInterval = 10; // 新規予約のデフォルト間隔
            
            const validation = validateReservationTimeWithinBusinessHours({
                time: timeStr,
                start_time: dateTime,
                duration: newDuration
            }, newDuration, defaultInterval);
            
            if (!validation.valid) {
                showMessage(validation.message, 'error');
                return;
            }
            
            // 重複チェック
            const overlapValidation = validateReservationOverlap({
                time: timeStr,
                start_time: dateTime,
                duration: newDuration
            }, newDuration, defaultInterval);
            
            if (!overlapValidation.valid) {
                showMessage(overlapValidation.message, 'error');
                return;
            }

            // バックエンドに送信するデータを準備
            const bookingData = {
                reservation: {
                    start_time: dateTime,
                    course: `${duration}分`,
                    name: customerName,
                    note: bookingNote,
                    status: bookingStatus,
                    user_attributes: {
                        name: customerName,
                        phone_number: customerPhone,
                        email: customerEmail
                    }
                }
            };

            // CSRFトークンを取得
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            console.log('CSRF Token:', csrfToken);
            console.log('Sending booking data:', bookingData);

            // クライアントサイドで重複チェック
            if (!isEditingReservation && checkForOverlap(dateTime, duration)) {
                showMessage('この時間帯には既に予約があります。別の時間を選択してください。', 'error');
                return;
            }

            // バックエンドに送信（編集モードの場合は更新、新規の場合は作成）
            const url = isEditingReservation ? 
                `/admin/reservations/${reservationToEdit.id}/update_booking` : 
                '/admin/reservations/create_booking';
            const method = isEditingReservation ? 'PATCH' : 'POST';
            
            fetch(url, {
                method: method,
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken
    },
                body: JSON.stringify(bookingData)
  })
  .then(response => {
                console.log('Response status:', response.status);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
                    // バックエンドから返された予約データを使用
                    const reservationData = data.reservation;
                    
                    if (isEditingReservation) {
                        // 編集モード：既存の予約を更新
                        const updatedReservation = {
                            id: reservationData.id,
                            userId: reservationData.user_id || reservationData.user?.id,
                            time: reservationData.start_time.split('T')[1].substring(0, 5), // HH:MM形式に変換
                            duration: extractDurationFromCourse(reservationData.course),
                            customer: reservationData.name || reservationData.user?.name || '未設定',
                            phone: reservationData.user?.phone_number || '',
                            email: reservationData.user?.email || '',
                            note: reservationData.note || '',
                            status: reservationData.status,
                            createdAt: reservationData.created_at,
                            updatedAt: reservationData.updated_at,
                            effective_interval_minutes: reservationData.effective_interval_minutes ?? 10
                        };
                        
                        // 既存の予約を更新
                        // 古い日付キーを特定（reservationsオブジェクトから該当する日付キーを探す）
                        let oldDateKey = null;
                        for (const dateKey of Object.keys(reservations)) {
                            const dayReservations = reservations[dateKey];
                            const foundReservation = dayReservations.find(r => r.id === reservationToEdit.id);
                            if (foundReservation) {
                                oldDateKey = dateKey;
                                break;
                            }
                        }
                        
                        const newDateKey = formatDateKey(new Date(reservationData.start_time));
                        
                        // 古い日付から削除
                        if (oldDateKey && reservations[oldDateKey]) {
                            reservations[oldDateKey] = reservations[oldDateKey].filter(r => r.id !== reservationToEdit.id);
                            if (reservations[oldDateKey].length === 0) {
                                delete reservations[oldDateKey];
                            }
                        }
                        
                        // 新しい日付に追加
                        if (!reservations[newDateKey]) {
                            reservations[newDateKey] = [];
                        }
                        reservations[newDateKey].push(updatedReservation);
                        
                        
                        
                        // 編集モードフラグをリセット
                        isEditingReservation = false;
                        currentReservation = null;
                        reservationToEdit = null;
                        
                        showMessage('予約が更新されました。', 'success');
                    } else {
                        // 新規作成モード：新しい予約を追加
                        const reservation = {
                            id: reservationData.id,
                            userId: reservationData.user_id || reservationData.user?.id,
                            time: reservationData.start_time.split('T')[1].substring(0, 5), // HH:MM形式に変換
                            duration: extractDurationFromCourse(reservationData.course),
                            customer: reservationData.name || reservationData.user?.name || '未設定',
                            phone: reservationData.user?.phone_number || '',
                            email: reservationData.user?.email || '',
                            note: reservationData.note || '',
                            status: reservationData.status,
                            createdAt: reservationData.created_at,
                            updatedAt: reservationData.updated_at,
                            effective_interval_minutes: reservationData.effective_interval_minutes ?? 10
                        };

                        const dateKey = formatDateKey(new Date(reservationData.start_time));
                        if (!reservations[dateKey]) {
                            reservations[dateKey] = [];
                        }
                        reservations[dateKey].push(reservation);

                        
                        
                        showMessage('予約が作成されました。', 'success');
                    }

                    // カレンダーを再描画
                    generateTimeSlots();

                    closeBookingModal();
    } else {
                    showMessage(`予約の作成に失敗しました: ${data.message}`, 'error');
    }
  })
  .catch(error => {
                console.error('Error creating booking:', error);
                showMessage('予約の作成中にエラーが発生しました。', 'error');
            });
        }

        // 休憩タブを作成
        function createBreak() {
            // グローバル変数から日付と時間を取得
            const date = window.selectedBreakDate;
            const time = window.selectedBreakTime;
            const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
            const dateTime = `${formattedDate} ${time}`;
            
            const duration = document.getElementById('breakDuration').value;
            const selectedBreakTitle = document.getElementById('breakTitle').value;
            const customBreakTitleInput = document.getElementById('customBreakTitleInput').value;
            const bookingNote = document.getElementById('breakNote').value;

            // タイトルを決定（カスタムタイトルがある場合はそれを使用）
            let breakTitle = selectedBreakTitle;
            if (selectedBreakTitle === 'その他' && customBreakTitleInput.trim()) {
                breakTitle = customBreakTitleInput.trim();
            } else if (selectedBreakTitle === 'その他') {
                showMessage('カスタムタイトルを入力してください。', 'error');
                return;
            }

            console.log('🔄 Creating break with title:', breakTitle);

            if (!dateTime || !duration || !breakTitle) {
                showMessage('日時、休憩時間、タイトルは必須です。', 'error');
                return;
            }

            // 営業時間内に収まるかチェック
            const [dateStr, timeStr] = dateTime.split(' ');
            const reservationDate = new Date(dateStr);
            const newDuration = parseInt(duration);
            const defaultInterval = 0; // 休憩に間隔は不要
            
            const validation = validateReservationTimeWithinBusinessHours({
                time: timeStr,
                start_time: dateTime,
                duration: newDuration
            }, newDuration, defaultInterval);
            
            if (!validation.valid) {
                showMessage(validation.message, 'error');
                return;
            }
            
            // 重複チェック
            const overlapValidation = validateReservationOverlap({
                time: timeStr,
                start_time: dateTime,
                duration: newDuration
            }, newDuration, defaultInterval);
            
            if (!overlapValidation.valid) {
                showMessage(overlapValidation.message, 'error');
                return;
            }

            // バックエンドに送信するデータを準備（休憩用）
            const breakData = {
                reservation: {
                    start_time: dateTime,
                    course: `${duration}分`,
                    name: breakTitle,
                    note: bookingNote || '',
                    status: 'confirmed', // 休憩は確定状態にする
                    is_break: false,     // 休憩機能は無効化
                    individual_interval_minutes: 0, // 休憩にはインターバルなし
                    user_attributes: {
                        name: 'スタッフ',
                        phone_number: '',
                        email: ''
                    }
                }
            };

            // CSRFトークンを取得
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            console.log('Creating break with data:', breakData);

            // クライアントサイドで重複チェック
            if (checkForOverlap(dateTime, duration)) {
                showMessage('この時間帯には既に予約があります。別の時間を選択してください。', 'error');
                return;
            }

            // バックエンドに送信
            fetch('/admin/reservations/create_booking', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify(breakData)
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // バックエンドから返された休憩データを使用
                    const breakReservation = data.reservation;
                    
                    // 新しい休憩を追加
                    const break_entry = {
                        id: breakReservation.id,
                        userId: breakReservation.user_id || breakReservation.user?.id,
                        time: breakReservation.start_time.split('T')[1].substring(0, 5),
                        start_time: breakReservation.start_time, // Add start_time for validation
                        date: breakReservation.start_time.split('T')[0], // Add date for validation
                        duration: extractDurationFromCourse(breakReservation.course),
                        customer: breakReservation.name,
                        phone: '',
                        email: '',
                        note: breakReservation.note || '',
                        status: breakReservation.status || 'confirmed',
                        is_break: false, // 休憩機能は無効化
                        createdAt: breakReservation.created_at,
                        updatedAt: breakReservation.updated_at,
                        effective_interval_minutes: 0
                    };

                    const dateKey = formatDateKey(new Date(breakReservation.start_time));
                    if (!reservations[dateKey]) {
                        reservations[dateKey] = [];
                    }
                    reservations[dateKey].push(break_entry);

                    showMessage('休憩タブが作成されました。', 'success');

                    // カレンダーを再描画
                    generateTimeSlots();
                    closeBreakModal();
                } else {
                    showMessage(`休憩の作成に失敗しました: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error creating break:', error);
                showMessage('休憩の作成中にエラーが発生しました。', 'error');
            });
        }

        // 予約詳細モーダルを開く
        function openReservationDetailModal(reservation) {

            // 最新の予約データを取得
            let latestReservation = null;
            for (const dateKey of Object.keys(reservations)) {
                const dayReservations = reservations[dateKey];
                const foundReservation = dayReservations.find(r => r.id === reservation.id);
                if (foundReservation) {
                    latestReservation = foundReservation;
                    break;
                }
            }
            
            // 最新のデータが見つからない場合は元のデータを使用
            if (!latestReservation) {
                latestReservation = reservation;
            }
            
            console.log('🔍 Opening modal with reservation data:', {
                original: {
                    time: reservation.time,
                    date: reservation.date,
                    dateKey: reservation.dateKey,
                    start_time: reservation.start_time,
                    createdAt: reservation.createdAt,
                    updatedAt: reservation.updatedAt
                },
                latest: {
                    time: latestReservation.time,
                    createdAt: latestReservation.createdAt,
                    updatedAt: latestReservation.updatedAt,
                    date: latestReservation.date,
                    dateKey: latestReservation.dateKey,
                    start_time: latestReservation.start_time,
                    fullReservationObject: latestReservation
                }
            });
            
            // 予約データの妥当性チェック
            if (!validateReservationData(latestReservation)) {
                showMessage('予約データが無効です', 'error');
                return;
            }
            
            // 現在の予約を保存（最新のデータを使用）
            currentReservation = latestReservation;
            console.log('🔍 Setting currentReservation:', currentReservation);
            console.log('🔍 currentReservation.id:', currentReservation.id);
            
            // 予約の実際の日付を特定
            let actualDate = '';
            for (const dateKey of Object.keys(reservations)) {
                const dayReservations = reservations[dateKey];
                const foundReservation = dayReservations.find(r => r.id === latestReservation.id);
                if (foundReservation) {
                    const [year, month, day] = dateKey.split('-').map(Number);
                    const date = new Date(year, month - 1, day);
                    actualDate = date.toLocaleDateString('ja-JP', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric',
                        weekday: 'long'
                    });
                    break;
                }
            }
            
            // ステータスに応じた色とアイコンを設定
            const statusConfig = {
                'tentative': { color: 'warning', icon: '⏳', text: '仮予約' },
                'confirmed': { color: 'success', icon: '✓', text: '確認済み' },
                'completed': { color: 'info', icon: '✅', text: '完了' }
            };
            
            const status = statusConfig[latestReservation.status] || { color: 'secondary', icon: '❓', text: latestReservation.status };
            
            // Create customer name HTML
            const customerNameHTML = latestReservation.userId ? 
                `<a href="/admin/users/${latestReservation.userId}" target="_blank" class="customer-link">${latestReservation.customer}</a>` : 
                latestReservation.customer;
            
            const modalContent = document.getElementById('reservationDetailContent');
            modalContent.innerHTML = `
                <div class="reservation-detail-container">
                    <!-- 編集フォーム -->
                    <form id="reservationEditForm" onsubmit="saveReservationChanges(event)">
                    <!-- ヘッダー情報 -->
                    <div class="reservation-header">
                        <div class="header-top">
                            <div class="customer-name-header">
                                <span class="customer-name-large">${latestReservation.customer}</span>
                                    <button type="button" class="btn btn-sm btn-outline-light change-user-btn" onclick="openUserSelectionModal()">
                                        <i class="fas fa-user-edit"></i> 変更
                                    </button>
                            </div>
                            <div class="reservation-status status-${status.color}">
                                    <select id="edit-status" class="form-select status-select" onchange="updateCalendarOnStatusChange()">
                                        <option value="tentative" ${latestReservation.status === 'tentative' ? 'selected' : ''}>仮予約</option>
                                        <option value="confirmed" ${latestReservation.status === 'confirmed' ? 'selected' : ''}>確認済み</option>
                                        <option value="completed" ${latestReservation.status === 'completed' ? 'selected' : ''}>完了</option>
                                    </select>
                            </div>
                        </div>
                        <div class="header-bottom">
                            <div class="header-detail-item">
                                <span class="header-label">予約日時</span>
                                <span class="header-value">${actualDate || '日付不明'} ${latestReservation.time}</span>
                            </div>
                            <div class="header-detail-item">
                                <span class="header-label">コース</span>
                                    <select id="edit-course" class="form-select course-select" onchange="updateCalendarOnCourseChange()">
                                        <option value="40分" ${latestReservation.duration === 40 ? 'selected' : ''}>40分</option>
                                        <option value="60分" ${latestReservation.duration === 60 ? 'selected' : ''}>60分</option>
                                        <option value="80分" ${latestReservation.duration === 80 ? 'selected' : ''}>80分</option>
                                    </select>
                                </div>
                                <div class="header-detail-item">
                                    <span class="header-label">準備時間</span>
                                    <span class="header-value">
                                        <select id="edit-interval" class="interval-select" onchange="updateIntervalOnChange()">
                                            <option value="0" ${(latestReservation.effective_interval_minutes ?? 10) === 0 ? 'selected' : ''}>0分</option>
                                            <option value="5" ${(latestReservation.effective_interval_minutes ?? 10) === 5 ? 'selected' : ''}>5分</option>
                                            <option value="10" ${(latestReservation.effective_interval_minutes ?? 10) === 10 ? 'selected' : ''}>10分</option>
                                            <option value="15" ${(latestReservation.effective_interval_minutes ?? 10) === 15 ? 'selected' : ''}>15分</option>
                                            <option value="20" ${(latestReservation.effective_interval_minutes ?? 10) === 20 ? 'selected' : ''}>20分</option>
                                            <option value="30" ${(latestReservation.effective_interval_minutes ?? 10) === 30 ? 'selected' : ''}>30分</option>
                                        </select>
                                    </span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- お客様基本情報 -->
                    <div class="customer-basic-info">
                        <div class="customer-phone">
                            ${latestReservation.phone || '電話番号未記入'}
                        </div>
                        <div class="customer-email">
                            ${latestReservation.email || 'メールアドレス未記入'}
                        </div>
                    </div>
                    
                        <!-- メモ -->
                        <div class="notes-section">
                            <div class="section-title">メモ</div>
                            <textarea id="edit-note" class="form-control" rows="3" placeholder="メモを入力してください">${latestReservation.note || ''}</textarea>
                        </div>
                    </form>
                    
                    <!-- 回数券と利用履歴を横並びで表示 -->
                    <div class="tickets-history-container">
                    <!-- 回数券 -->
                    <div class="tickets-section">
                        <div class="section-title">回数券</div>
                        <div class="tickets-content" id="tickets-content">
                            <div class="loading">読み込み中...</div>
                        </div>
                    </div>
                    
                        <!-- 利用履歴 -->
                    <div class="reservation-history-section">
                            <div class="section-title">利用履歴</div>
                        <div class="history-content" id="history-content">
                            <div class="loading">読み込み中...</div>
                        </div>
                        </div>
                    </div>
                    
                    <!-- システム情報 -->
                    <div class="system-info-section">
                        <div class="detail-item">
                            <span class="detail-label">作成日時</span>
                            <span class="detail-value">${new Date(latestReservation.createdAt).toLocaleString('ja-JP')}</span>
                        </div>
                        ${(function() {
                            console.log('🔍 Checking timestamps for 変更日時:', {
                                createdAt: latestReservation.createdAt,
                                updatedAt: latestReservation.updatedAt,
                                created_at: latestReservation.created_at,
                                updated_at: latestReservation.updated_at,
                                createdTime: new Date(latestReservation.createdAt).getTime(),
                                updatedTime: latestReservation.updatedAt ? new Date(latestReservation.updatedAt).getTime() : 'null',
                                isDifferent: latestReservation.updatedAt && new Date(latestReservation.updatedAt).getTime() !== new Date(latestReservation.createdAt).getTime(),
                                allFields: Object.keys(latestReservation)
                            });
                            
                            // Check multiple possible timestamp field combinations
                            const createdTimestamp = latestReservation.createdAt || latestReservation.created_at;
                            const updatedTimestamp = latestReservation.updatedAt || latestReservation.updated_at;
                            
                            console.log('🔍 Final timestamp check:', {
                                createdTimestamp,
                                updatedTimestamp,
                                hasDifferentTimestamps: updatedTimestamp && createdTimestamp && new Date(updatedTimestamp).getTime() !== new Date(createdTimestamp).getTime()
                            });
                            
                            if (updatedTimestamp && createdTimestamp && new Date(updatedTimestamp).getTime() !== new Date(createdTimestamp).getTime()) {
                                return `
                        <div class="detail-item">
                            <span class="detail-label">変更日時</span>
                            <span class="detail-value">${new Date(updatedTimestamp).toLocaleString('ja-JP')}</span>
                        </div>`;
                            } else {
                                return '';
                            }
                        })()}
                    </div>
                </div>
            `;
            document.getElementById('reservationDetailModal').style.display = 'block';
            
            // Add click event listener to customer link
            setTimeout(() => {
                const customerLink = document.querySelector('.customer-link');
                if (customerLink) {
        
                    customerLink.addEventListener('click', function(e) {
            
                        e.preventDefault();
                        window.open(this.href, '_blank');
                    });
                } else {
                    console.log('❌ Customer link not found');
                }
            }, 100);
            
            // チケットと予約履歴を読み込み（ユーザーIDベース）
            if (latestReservation.userId) {
                loadTicketsAndHistoryForUser(latestReservation.userId);
            } else {
            loadTicketsAndHistory(latestReservation);
            }
            
            // ユーザーリストは検索時に動的に読み込み
        }

        // 予約詳細モーダルを閉じる
        function closeReservationDetailModal() {
            document.getElementById('reservationDetailModal').style.display = 'none';
            currentReservation = null; // 現在の予約をリセット
        }
        
        // グローバル関数として公開
        window.closeReservationDetailModal = closeReservationDetailModal;

        // モーダル外クリックで閉じる機能
        function setupModalClickOutside() {
            const modal = document.getElementById('reservationDetailModal');
            if (modal) {
                modal.addEventListener('click', function(event) {
                    // モーダル背景（.modal）をクリックした場合のみ閉じる
                    if (event.target === modal) {
                        closeReservationDetailModal();
                    }
                });
            }
        }

        // チケットと利用履歴を読み込み
        function loadTicketsAndHistory(reservation) {
            // チケット情報を読み込み
            loadTickets(reservation);
            // 利用履歴を読み込み
            loadReservationHistory(reservation);
        }

        // ユーザーIDでチケットと利用履歴を読み込み
        function loadTicketsAndHistoryForUser(userId) {
            // チケット情報を読み込み
            loadTicketsForUser(userId);
            // 利用履歴を読み込み
            loadReservationHistoryForUser(userId);
        }

        // チケット情報を読み込み
        function loadTickets(reservation) {

            
            const ticketsContent = document.getElementById('tickets-content');
            if (!ticketsContent) {
                console.error('❌ Tickets content element not found');
                return;
            }

            // 予約データの妥当性チェック
            if (!validateReservationData(reservation)) {
                ticketsContent.innerHTML = '<div class="no-data">予約データが無効です</div>';
                return;
            }

            // ユーザーIDがある場合はチケット情報を取得
            if (reservation.userId) {
    
    
                
                // エラーハンドリングを追加
                fetch(`/admin/reservations/${reservation.id}/tickets`, {
                    headers: {
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                })
    .then(response => {
                        console.log('📡 Response status:', response.status);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
      return response.json();
    })
                    .then(data => {
            
                        if (data.success) {
                            displayTickets(data.tickets);
                        } else {
                            console.warn('⚠️ No tickets data:', data.message);
                            ticketsContent.innerHTML = '<div class="no-data">チケット情報がありません</div>';
                        }
    })
    .catch(error => {
                        console.error('❌ Error loading tickets:', error);
                        console.error('❌ Error details:', {
                            message: error.message,
                            stack: error.stack,
                            reservationId: reservation.id,
                            userId: reservation.userId
                        });
                        ticketsContent.innerHTML = '<div class="no-data">チケット情報の読み込みに失敗しました</div>';
                    });
            } else {
                console.warn('⚠️ No user ID found for reservation');
                ticketsContent.innerHTML = '<div class="no-data">ユーザー情報がありません</div>';
            }
        }

        // ユーザーIDでチケット情報を読み込み
        function loadTicketsForUser(userId) {
            const ticketsContent = document.getElementById('tickets-content');
            if (!ticketsContent) {
                console.error('❌ Tickets content element not found');
                return;
            }

            // ユーザーIDがある場合はチケット情報を取得
            if (userId) {
                fetch(`/admin/users/${userId}/tickets.json`)
                    .then(response => {
                        console.log('📡 User tickets response status:', response.status);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(tickets => {
                        console.log('📡 User tickets data:', tickets);
                        displayUserTickets(tickets);
                    })
                    .catch(error => {
                        console.error('❌ Error loading user tickets:', error);
                        ticketsContent.innerHTML = '<div class="no-data">チケット情報の読み込みに失敗しました</div>';
                    });
            } else {
                console.warn('⚠️ No user ID provided');
                ticketsContent.innerHTML = '<div class="no-data">ユーザー情報がありません</div>';
            }
        }

        // ユーザーチケット情報を表示
        function displayUserTickets(tickets) {
            const ticketsContent = document.getElementById('tickets-content');
            if (!ticketsContent) {
                console.error('❌ Tickets content element not found in displayUserTickets');
                return;
            }

            if (!tickets || tickets.length === 0) {
                console.log('ℹ️ No user tickets to display');
                ticketsContent.innerHTML = '<div class="no-data">チケットがありません</div>';
                return;
            }

            // Sort tickets by newest first (assuming created_at or issued_at field exists)
            const sortedTickets = tickets.sort((a, b) => {
                const dateA = new Date(a.created_at || a.issued_at || a.expires_at || 0);
                const dateB = new Date(b.created_at || b.issued_at || b.expires_at || 0);
                return dateB - dateA; // Newest first
            });

            // Limit to 5 tickets like the original
            const limitedTickets = sortedTickets.slice(0, 5);

            const ticketsHtml = limitedTickets.map(ticket => {
                const isExpired = ticket.remaining === 0 || new Date(ticket.expires_at) < new Date();
                const expiryDate = ticket.expires_at ? new Date(ticket.expires_at).toLocaleDateString('ja-JP') : '無期限';
                
                return `
                    <div class="ticket-item ${isExpired ? 'expired' : ''}">
                        <div class="ticket-checkbox">□</div>
                        <div class="ticket-info">
                            <div class="ticket-name">${ticket.name}</div>
                            <div class="ticket-details">残${ticket.remaining}枚 / 有効期限:${expiryDate}</div>
                        </div>
                    </div>
                `;
            }).join('');

            ticketsContent.innerHTML = ticketsHtml;
        }

        // チケット情報を表示
        function displayTickets(tickets) {

            
            const ticketsContent = document.getElementById('tickets-content');
            if (!ticketsContent) {
                console.error('❌ Tickets content element not found in displayTickets');
                return;
            }

            if (!tickets || tickets.length === 0) {
                console.log('ℹ️ No tickets to display');
                ticketsContent.innerHTML = '<div class="no-data">チケットがありません</div>';
                return;
            }


            
            const ticketsHtml = tickets.map(ticket => {
                const isExpired = ticket.remaining_count === 0 || new Date(ticket.expiry_date) < new Date();
                const expiryDate = new Date(ticket.expiry_date).toLocaleDateString('ja-JP');
                

                
                return `
                    <div class="ticket-item ${isExpired ? 'expired' : ''}">
                        <div class="ticket-checkbox">□</div>
                        <div class="ticket-info">
                            <div class="ticket-name">${ticket.ticket_template_name}</div>
                            <div class="ticket-details">残${ticket.remaining_count}${ticket.unit_type} / 有効期限:${expiryDate}</div>
          </div>
        </div>
      `;
            }).join('');


            ticketsContent.innerHTML = ticketsHtml;
        }

        // ユーザーIDで利用履歴を読み込み
        function loadReservationHistoryForUser(userId) {
            const historyContent = document.getElementById('history-content');
            if (!historyContent) return;

            // ユーザーIDがある場合は利用履歴を取得
            if (userId) {
                fetch(`/admin/users/${userId}/history.json`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('📡 User history data:', data);
                        if (data.success) {
                            displayReservationHistory(data.usages);
                        } else {
                            historyContent.innerHTML = '<div class="no-data">利用履歴がありません</div>';
                        }
                    })
                    .catch(error => {
                        console.error('❌ Error loading user history:', error);
                        historyContent.innerHTML = '<div class="no-data">利用履歴の読み込みに失敗しました</div>';
                    });
            } else {
                historyContent.innerHTML = '<div class="no-data">ユーザー情報がありません</div>';
            }
        }

        // 利用履歴を読み込み
        function loadReservationHistory(reservation) {

            
            const historyContent = document.getElementById('history-content');
            if (!historyContent) return;

            // 予約データの妥当性チェック
            if (!validateReservationData(reservation)) {
                historyContent.innerHTML = '<div class="no-data">予約データが無効です</div>';
                return;
            }

            // ユーザーIDがある場合は利用履歴を取得
            if (reservation.userId) {
                fetch(`/admin/reservations/${reservation.id}/history`, {
                    headers: {
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            displayReservationHistory(data.usages);
                        } else {
                            historyContent.innerHTML = '<div class="no-data">利用履歴がありません</div>';
                        }
                    })
                    .catch(error => {
                        console.error('❌ Error loading usage history:', error);
                        console.error('❌ Error details:', {
                            message: error.message,
                            stack: error.stack,
                            reservationId: reservation.id,
                            userId: reservation.userId
                        });
                        historyContent.innerHTML = '<div class="no-data">利用履歴の読み込みに失敗しました</div>';
                    });
            } else {
                historyContent.innerHTML = '<div class="no-data">ユーザー情報がありません</div>';
            }
        }

        // 利用履歴を表示
        function displayReservationHistory(usages) {
            const historyContent = document.getElementById('history-content');
            if (!historyContent) return;

            if (!usages || usages.length === 0) {
                historyContent.innerHTML = '<div class="no-data">利用履歴がありません</div>';
                return;
            }

            const historyHtml = usages.map(usage => {
                // Backend returns date and time as separate fields
                const displayDate = usage.date || 'Unknown Date';
                const displayTime = usage.time || 'Unknown Time';
                const displayName = usage.course || usage.ticket_name || 'Unknown';
                const typeIcon = usage.type === 'reservation' ? '📅' : '🎫';
                const typeText = usage.type === 'reservation' ? '予約' : 'チケット使用';
                
                return `
                    <div class="history-item-compact">
                        <span class="history-icon-small">${typeIcon}</span>
                        <span class="history-content-compact">
                            <strong>${displayName}</strong> - ${displayDate} ${displayTime} (${typeText})
                        </span>
                    </div>
                `;
            }).join('');

            historyContent.innerHTML = historyHtml;
        }



        // ステータスアイコンを取得
        function getStatusIcon(status) {
            const statusIcons = {
                'confirmed': '✅',
                'tentative': '⏳',
                'cancelled': '❌',
                'completed': '✅',
                'no_show': '⚠️'
            };
            return statusIcons[status] || '❓';
        }



        // 予約を編集
        function editReservation() {
            if (!currentReservation) {
                showMessage('編集する予約が見つかりませんでした。', 'error');
                return;
            }
            
            console.log('✏️ Editing reservation:', currentReservation);
            
            // 編集モードフラグを設定
            isEditingReservation = true;
            
            // 予約データを保存（モーダルを閉じる前に）
            reservationToEdit = { ...currentReservation };
            
            // 予約の実際の日付を特定（reservationsオブジェクトから該当する日付キーを探す）
            let actualReservationDate = null;
            let foundDateKey = null;
            
            // すべての日付キーをチェックして該当する予約を探す
            for (const dateKey of Object.keys(reservations)) {
                const dayReservations = reservations[dateKey];
                const foundReservation = dayReservations.find(r => r.id === currentReservation.id);
                
                if (foundReservation) {
                    foundDateKey = dateKey;
                    // 日付キーから実際の日付を計算
                    const [year, month, day] = dateKey.split('-').map(Number);
                    const [hours, minutes] = currentReservation.time.split(':').map(Number);
                    actualReservationDate = new Date(year, month - 1, day, hours, minutes, 0, 0);
                    break;
                }
            }
            
            // 見つからない場合はcreatedAtから計算（フォールバック）
            if (!actualReservationDate) {
                console.warn('⚠️ Could not find reservation in date keys, using createdAt as fallback');
                actualReservationDate = new Date(reservationToEdit.createdAt);
                const [hours, minutes] = reservationToEdit.time.split(':').map(Number);
                actualReservationDate.setHours(hours, minutes, 0, 0);
            }
            
            console.log('📅 Actual reservation date:', actualReservationDate, 'from date key:', foundDateKey);
            
            // 予約詳細モーダルを閉じる
            closeReservationDetailModal();
            
            // 予約編集モーダルを開く
            openBookingModal(actualReservationDate, reservationToEdit.time);
            
            // フォームフィールドを既存の予約データで埋める（モーダルが開いた後に実行）
            setTimeout(() => {
                const customerNameField = document.getElementById('customerName');
                const customerPhoneField = document.getElementById('customerPhone');
                const customerEmailField = document.getElementById('customerEmail');
                const bookingDurationField = document.getElementById('bookingDuration');
                const bookingNoteField = document.getElementById('bookingNote');
                const bookingStatusField = document.getElementById('bookingStatus');
                
                if (customerNameField) customerNameField.value = reservationToEdit.customer;
                if (customerPhoneField) customerPhoneField.value = reservationToEdit.phone;
                if (customerEmailField) customerEmailField.value = reservationToEdit.email;
                if (bookingDurationField) bookingDurationField.value = reservationToEdit.duration;
                if (bookingNoteField) bookingNoteField.value = reservationToEdit.note;
                if (bookingStatusField) bookingStatusField.value = reservationToEdit.status;
            }, 200);
            
            showMessage('予約を編集できます。', 'info');
        }

                // 予約を削除
        function deleteReservation() {
            console.log('🗑️ deleteReservation関数が呼び出されました');
            console.log('🔍 currentReservation:', currentReservation);
            console.log('🔍 Function called from:', new Error().stack);
            
            if (!currentReservation) {
                showMessage('削除する予約が見つかりませんでした。', 'error');
                console.error('❌ currentReservationが未定義です');
                return;
            }
            
            if (!currentReservation.id) {
                showMessage('予約IDが見つかりませんでした。', 'error');
                console.error('❌ currentReservation.idが未定義です:', currentReservation);
                return;
            }
            
            // 追加の検証
            if (typeof currentReservation.id !== 'number' && typeof currentReservation.id !== 'string') {
                console.error('❌ currentReservation.id has invalid type:', typeof currentReservation.id, currentReservation.id);
                showMessage('予約IDの形式が無効です。', 'error');
                return;
            }
            
            if (currentReservation.id === 'calendar' || currentReservation.id === 'delete_reservation') {
                console.error('❌ currentReservation.id has invalid value:', currentReservation.id);
                showMessage('予約IDが無効です。', 'error');
                return;
            }
            
            console.log('✅ 予約ID確認:', currentReservation.id);
            
            const confirmed = confirm(`この予約を完全に削除しますか？\n\nお客様: ${currentReservation.customer}\n日時: ${currentReservation.time}\nコース: ${currentReservation.duration}分\n\nこの操作は取り消せません。`);
            
            if (!confirmed) {
                return;
            }
            
            console.log('🗑️ Deleting reservation:', currentReservation);
            
            // 視覚的なフィードバック: 削除アニメーションを開始
            const reservationBlocks = document.querySelectorAll('.reservation-block');
            reservationBlocks.forEach(block => {
                if (block.textContent.includes(currentReservation.customer) && 
                    block.textContent.includes(currentReservation.time)) {
                    block.classList.add('deleting');
                }
            });
            
            // 正しいAPIエンドポイントを使用
            console.log('🔍 Debug - currentReservation:', currentReservation);
            console.log('🔍 Debug - currentReservation.id:', currentReservation.id);
            const deleteUrl = `/admin/reservations/delete_reservation`;
            console.log('🌐 削除URL:', deleteUrl);
            
            // バックエンドに削除リクエストを送信
            console.log('🌐 Making DELETE request to:', deleteUrl);
            console.log('🔑 CSRF Token:', document.querySelector('meta[name="csrf-token"]')?.getAttribute('content'));
            
            fetch(deleteUrl, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                },
                body: JSON.stringify({
                    reservation_id: currentReservation.id
                })
            })
            .then(response => {
                console.log('📡 Response status:', response.status);
                console.log('📡 Response headers:', response.headers);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log('✅ Reservation deleted successfully');
                    
                    // ローカルデータから予約を削除
                    // 予約の実際の日付を特定するために、すべての日付キーをチェック
                    console.log('🗑️ Searching for reservation ID:', currentReservation.id, 'in all date keys');
                    console.log('🗑️ Available date keys:', Object.keys(reservations));
                    
                    let foundDateKey = null;
                    let foundReservation = null;
                    
                    // すべての日付キーをチェックして該当する予約を探す
                    for (const dateKey of Object.keys(reservations)) {
                        const dayReservations = reservations[dateKey];
                        const matchingReservation = dayReservations.find(r => r.id === currentReservation.id);
                        
                        if (matchingReservation) {
                            foundDateKey = dateKey;
                            foundReservation = matchingReservation;
                            console.log(`🗑️ Found reservation in date key: ${dateKey}`);
                            break;
                        }
                    }
                    
                    if (foundDateKey && foundReservation) {
                        const beforeCount = reservations[foundDateKey].length;
                        reservations[foundDateKey] = reservations[foundDateKey].filter(r => r.id !== currentReservation.id);
                        const afterCount = reservations[foundDateKey].length;
                        
                        console.log(`🗑️ Removed reservation: ${beforeCount} → ${afterCount} reservations for ${foundDateKey}`);
                        
                        if (reservations[foundDateKey].length === 0) {
                            delete reservations[foundDateKey];
                            console.log(`🗑️ Deleted empty date key: ${foundDateKey}`);
                        }
                    } else {
                        console.warn(`⚠️ Reservation ID ${currentReservation.id} not found in any date key`);
                        console.warn(`⚠️ Available reservations:`, reservations);
                    }
                    
                    // カレンダーを再描画
                    generateTimeSlots();
                    
                    // モーダルを閉じる
                    closeReservationDetailModal();
                    
                    // 成功メッセージを表示
                    showMessage('予約が削除されました。', 'success');
                    
                    // デバッグ: 削除後の予約データを確認
                    console.log('✅ After deletion - reservations data:', reservations);
                } else {
                    console.error('❌ Failed to delete reservation:', data.message);
                    showMessage(`予約の削除に失敗しました: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('❌ Error deleting reservation:', error);
                showMessage('予約の削除中にエラーが発生しました。', 'error');
            });
        }
        
        // グローバル関数として公開
        window.deleteReservationFromCalendar = deleteReservation;

        // 予約をキャンセル（削除）
        function cancelReservation() {
            console.log('🗑️ cancelReservation関数が呼び出されました');
            console.log('🔍 currentReservation:', currentReservation);
            console.log('🔍 Function called from:', new Error().stack);
            
            if (!currentReservation) {
                showMessage('キャンセルする予約が見つかりませんでした。', 'error');
                return;
            }
            
            if (!currentReservation.id) {
                console.error('❌ currentReservation.id is undefined:', currentReservation);
                showMessage('予約IDが見つかりませんでした。', 'error');
                return;
            }
            
            // 追加の検証
            if (typeof currentReservation.id !== 'number' && typeof currentReservation.id !== 'string') {
                console.error('❌ currentReservation.id has invalid type:', typeof currentReservation.id, currentReservation.id);
                showMessage('予約IDの形式が無効です。', 'error');
                return;
            }
            
            if (currentReservation.id === 'calendar' || currentReservation.id === 'delete_reservation') {
                console.error('❌ currentReservation.id has invalid value:', currentReservation.id);
                showMessage('予約IDが無効です。', 'error');
                return;
            }
            
            const confirmed = confirm(`この予約を完全に削除しますか？\n\nお客様: ${currentReservation.customer}\n日時: ${currentReservation.time}\nコース: ${currentReservation.duration}分\n\nこの操作は取り消せません。`);
            
            if (!confirmed) {
                return;
            }
            
            // バックエンドに削除リクエストを送信
            console.log('🔍 Debug - currentReservation:', currentReservation);
            console.log('🔍 Debug - currentReservation.id:', currentReservation.id);
            const deleteUrl = `/admin/reservations/delete_reservation`;
            console.log('🌐 キャンセルURL:', deleteUrl);
            
            fetch(deleteUrl, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                },
                body: JSON.stringify({
                    reservation_id: currentReservation.id
                })
            })
            .then(response => {
                console.log('📡 Response status:', response.status);
                console.log('📡 Response headers:', response.headers);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
  .then(data => {
    if (data.success) {

                    

                    
                    // キャンセル表示エリアに追加（削除前に予約データと日付を保存）
                    const reservationToCancel = { ...currentReservation };
                    
                    // 予約の実際の日付を特定（dateKeyから抽出）- 削除前に実行
                    let actualReservationDate = null;
                    let foundDateKey = null;
                    
                    // すべての日付キーをチェックして該当する予約を探す
                    for (const dateKey of Object.keys(reservations)) {
                        const dayReservations = reservations[dateKey];
                        const foundReservation = dayReservations.find(r => r.id === reservationToCancel.id);
                        
                        if (foundReservation) {
                            foundDateKey = dateKey;
                            const [year, month, day] = dateKey.split('-').map(Number);
                            actualReservationDate = new Date(year, month - 1, day);
                            break;
                        }
                    }
                    
                    // 見つからない場合はcreatedAtから計算
                    if (!actualReservationDate) {
                        actualReservationDate = new Date(reservationToCancel.createdAt);
                    }
                    
                    // ローカルデータから予約を削除
                    if (foundDateKey) {
                        const beforeCount = reservations[foundDateKey].length;
                        reservations[foundDateKey] = reservations[foundDateKey].filter(r => r.id !== reservationToCancel.id);
                        const afterCount = reservations[foundDateKey].length;
                        
                        if (reservations[foundDateKey].length === 0) {
                            delete reservations[foundDateKey];
                        }
                    }
                    
                    addToCancellationDisplay({
                        ...reservationToCancel,
                        start_time: actualReservationDate.toISOString()
                    });
                    
                    // カレンダーを再描画
                    generateTimeSlots();
                    
                    // キャンセル表示を更新（DOM操作後に確実に更新）
                    setTimeout(() => {
                        updateCancellationDisplay();
                    }, 50);
                    
                    // モーダルを閉じる
                    closeReservationDetailModal();
                    
                    showMessage('予約がキャンセル（削除）されました。', 'success');
                } else {
                    console.error('❌ Failed to cancel reservation:', data.message);
                    showMessage(`予約のキャンセルに失敗しました: ${data.message}`, 'error');
    }
  })
  .catch(error => {
                console.error('❌ Error cancelling reservation:', error);
                showMessage('予約のキャンセル中にエラーが発生しました。', 'error');
            });
        }
        
        // グローバル関数として公開
        window.cancelReservationFromCalendar = cancelReservation;

        // コースから時間を抽出する関数
        function extractDurationFromCourse(courseString) {
            if (!courseString) return 60;
            
            const match = courseString.match(/(\d+)分/);
            return match ? parseInt(match[1]) : 60;
        }

        // 重複チェック関数
        function checkForOverlap(dateTime, duration) {
            const startTime = new Date(dateTime);
            const endTime = new Date(startTime.getTime() + parseInt(duration) * 60 * 1000);
            const dateKey = formatDateKey(startTime);
            
            // 指定日の予約を取得
            const dayReservations = reservations[dateKey] || [];
            
            // 重複チェック（インターバル時間も含む）
            for (const reservation of dayReservations) {
                const reservationStart = new Date(`${dateKey}T${reservation.time}`);
                const reservationEnd = new Date(reservationStart.getTime() + reservation.duration * 60 * 1000);
                
                // インターバル時間を取得（effective_interval_minutesを使用）
                const intervalMinutes = reservation.effective_interval_minutes ?? 10;
                const reservationEndWithInterval = new Date(reservationEnd.getTime() + intervalMinutes * 60 * 1000);
                
                // 現在の予約のインターバル時間（デフォルト10分）
                const currentIntervalMinutes = 10; // デフォルト10分
                const currentEndWithInterval = new Date(endTime.getTime() + currentIntervalMinutes * 60 * 1000);
                
                // 重複判定（インターバル時間も含む）
                if (startTime < reservationEndWithInterval && currentEndWithInterval > reservationStart) {
                    return true; // 重複あり
                }
            }
            
            return false; // 重複なし
        }

        // 予約可能時間をハイライトする関数
        function highlightAvailableSlots() {
            const dateTime = document.getElementById('bookingDate')?.value;
            const duration = document.getElementById('bookingDuration')?.value;
            
            if (!dateTime || !duration) return;
            
            const startTime = new Date(dateTime);
            const endTime = new Date(startTime.getTime() + parseInt(duration) * 60 * 1000);
            const dateKey = formatDateKey(startTime);
            
            // 既存のハイライトをクリア
            document.querySelectorAll('.time-slot').forEach(slot => {
                slot.classList.remove('overlap-warning', 'available-slot');
            });
            
            // 指定日の予約を取得
            const dayReservations = reservations[dateKey] || [];
            
            // 各時間スロットをチェック
            document.querySelectorAll('.time-slot').forEach(slot => {
                const slotTime = slot.getAttribute('data-time');
                if (!slotTime) return;
                
                const slotStart = new Date(`${dateKey}T${slotTime}`);
                const slotEnd = new Date(slotStart.getTime() + parseInt(duration) * 60 * 1000);
                
                // 重複チェック（インターバル時間も含む）
                let hasOverlap = false;
                for (const reservation of dayReservations) {
                    const reservationStart = new Date(`${dateKey}T${reservation.time}`);
                    const reservationEnd = new Date(reservationStart.getTime() + reservation.duration * 60 * 1000);
                    
                    // インターバル時間を取得（effective_interval_minutesを使用）
                    const intervalMinutes = reservation.effective_interval_minutes ?? 10;
                    const reservationEndWithInterval = new Date(reservationEnd.getTime() + intervalMinutes * 60 * 1000);
                    
                    // 現在のスロットのインターバル時間（デフォルト10分）
                    const currentIntervalMinutes = 10; // デフォルト10分
                    const slotEndWithInterval = new Date(slotEnd.getTime() + currentIntervalMinutes * 60 * 1000);
                    
                    if (slotStart < reservationEndWithInterval && slotEndWithInterval > reservationStart) {
                        hasOverlap = true;
                        break;
                    }
                }
                
                if (hasOverlap) {
                    slot.classList.add('overlap-warning');
                } else {
                    slot.classList.add('available-slot');
                }
            });
        }

        // ドラッグ&ドロップ機能
        let isDragging = false;
        let draggedReservationData = null;

        function handleDragStart(e) {
            console.log('🎯 handleDragStart called for target:', e.target);
            isDragging = true;
            
            // The target should be the reservation block itself
            const reservationBlock = e.target;
            
            if (!reservationBlock || !reservationBlock.classList.contains('reservation-block')) {
                console.error('❌ Target is not a reservation block');
                return;
            }
            
            const reservationId = reservationBlock.dataset.reservationId;
            
            if (!reservationId) {
                console.error('❌ Reservation ID not found');
                return;
            }
            
            console.log('🎯 Drag started for reservation:', reservationId, 'from block:', reservationBlock);
            
            // Store the original reservation data for better debugging
            const reservationData = JSON.parse(reservationBlock.dataset.reservationData);
            draggedReservationData = reservationData; // Store globally
            
            console.log('🎯 Original reservation data:', {
                id: reservationData.id,
                customer: reservationData.customer,
                time: reservationData.time,
                date: reservationBlock.dataset.originalDateKey
            });
            
            e.dataTransfer.setData('text/plain', reservationId);
            reservationBlock.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
            
            // Use the original block as the drag image so it follows the cursor
            e.dataTransfer.setDragImage(reservationBlock, 50, 25);
            
            // Prevent other drag events from firing
            e.stopPropagation();
        }

        function handleDragEnd(e) {
            // The target should be the reservation block itself
            const reservationBlock = e.target;
            
            if (reservationBlock && reservationBlock.classList.contains('reservation-block')) {
                reservationBlock.classList.remove('dragging');
            }
            
            document.querySelectorAll('.schedule-cell').forEach(cell => {
                cell.classList.remove('drag-over');
                cell.classList.remove('drag-over-invalid');
            });
            
                            // 少し遅延してからフラグをリセット（誤クリックを防ぐ）
                setTimeout(() => {
                    isDragging = false;
                    draggedReservationData = null; // Clear global data
                }, 100);
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            
            const cell = e.target.closest('.schedule-cell');
            if (cell) {
                // Clear all previous drag-over states
                document.querySelectorAll('.schedule-cell').forEach(c => {
                    c.classList.remove('drag-over');
                    c.classList.remove('drag-over-invalid');
                });
                
                // Get the reservation data from global variable
                if (draggedReservationData) {
                    const reservationData = draggedReservationData;
                    const duration = reservationData.duration || 60;
                    const interval = reservationData.effective_interval_minutes ?? 10;
                    const totalDuration = duration + interval;
                    
                    // Calculate how many cells this reservation would occupy (10-minute slots)
                    const cellsToOccupy = Math.ceil(totalDuration / 10);
                    
                    // Check if all required cells are within business hours
                    let currentCell = cell;
                    let allCellsValid = true;
                    let cellsToCheck = [];
                    
                    // First, collect all cells that would be occupied
                    for (let i = 0; i < cellsToOccupy && currentCell; i++) {
                        cellsToCheck.push(currentCell);
                        
                        // Move to the next row (next time slot) in the same day column
                        const currentRow = currentCell.parentElement;
                        const nextRow = currentRow.nextElementSibling;
                        if (nextRow) {
                            const nextCell = nextRow.querySelector(`[data-day="${currentCell.dataset.day}"]`);
                            if (nextCell && nextCell.classList.contains('schedule-cell')) {
                                currentCell = nextCell;
                            } else {
                                break; // No more cells in this day column
                            }
                        } else {
                            break; // No more rows
                        }
                    }
                    
                    // Check if all cells are within business hours
                    for (let checkCell of cellsToCheck) {
                        const dayOfWeek = parseInt(checkCell.dataset.day);
                        const timeStr = checkCell.dataset.time;
                        
                        if (!isBusinessHour(dayOfWeek, timeStr)) {
                            allCellsValid = false;
                            break;
                        }
                    }
                    
                    // Only highlight if all cells are valid
                    if (allCellsValid) {
                        for (let checkCell of cellsToCheck) {
                            checkCell.classList.add('drag-over');
                        }
                    } else {
                        // Show invalid drop effect and visual feedback
                        e.dataTransfer.dropEffect = 'none';
                        for (let checkCell of cellsToCheck) {
                            checkCell.classList.add('drag-over-invalid');
                        }
                    }
                } else {
                    // If no dragged data, check if current cell is within business hours
                    const dayOfWeek = parseInt(cell.dataset.day);
                    const timeStr = cell.dataset.time;
                    
                    if (isBusinessHour(dayOfWeek, timeStr)) {
                        cell.classList.add('drag-over');
                    } else {
                        e.dataTransfer.dropEffect = 'none';
                    }
                }
            }
        }

        function handleDragEnter(e) {
            e.preventDefault();
            if (e.target.classList.contains('schedule-cell')) {
                e.target.classList.add('drag-over');
            }
        }

        function handleDragLeave(e) {
            if (e.target.classList.contains('schedule-cell')) {
                e.target.classList.remove('drag-over');
            }
        }

        function handleDrop(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // ドラッグオーバー状態をクリア
            document.querySelectorAll('.schedule-cell').forEach(cell => {
                cell.classList.remove('drag-over');
                cell.classList.remove('drag-over-invalid');
            });
            
            const cell = e.target.closest('.schedule-cell');
            if (!cell) return;
            
            const reservationId = e.dataTransfer.getData('text/plain');
            console.log('🎯 Drop detected for reservation:', reservationId, 'at cell:', cell.dataset.day, cell.dataset.time);
            
            if (!reservationId || reservationId.trim() === '') {
                console.log('❌ Empty reservation ID, ignoring drop');
                return;
            }
            
            const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
            
            if (!reservationBlock) {
                console.log('❌ Reservation block not found for ID:', reservationId);
                return;
            }
            
            const reservationData = JSON.parse(reservationBlock.dataset.reservationData);
            const newDay = parseInt(cell.dataset.day);
            const newTime = cell.dataset.time;
            
            // Check if the target time slot is within business hours
            if (!isBusinessHour(newDay, newTime)) {
                showMessage('営業時間外のため、この時間に予約を移動できません。', 'error');
                return;
            }
            
            // Check if all required time slots for the reservation are within business hours
            const duration = reservationData.duration || 60;
            const interval = reservationData.effective_interval_minutes ?? 10;
            const totalDuration = duration + interval;
            const cellsToOccupy = Math.ceil(totalDuration / 10);
            
            let currentCell = cell;
            let allSlotsValid = true;
            
            for (let i = 0; i < cellsToOccupy && currentCell; i++) {
                const dayOfWeek = parseInt(currentCell.dataset.day);
                const timeStr = currentCell.dataset.time;
                
                if (!isBusinessHour(dayOfWeek, timeStr)) {
                    allSlotsValid = false;
                    break;
                }
                
                // Move to the next row (next time slot) in the same day column
                const currentRow = currentCell.parentElement;
                const nextRow = currentRow.nextElementSibling;
                if (nextRow) {
                    const nextCell = nextRow.querySelector(`[data-day="${currentCell.dataset.day}"]`);
                    if (nextCell && nextCell.classList.contains('schedule-cell')) {
                        currentCell = nextCell;
                    } else {
                        break; // No more cells in this day column
                    }
                } else {
                    break; // No more rows
                }
            }
            
            if (!allSlotsValid) {
                showMessage('予約時間が営業時間外に及ぶため、この位置に移動できません。', 'error');
                return;
            }
            
            // 新しい日付を計算
            const newDate = new Date(currentWeekStart);
            newDate.setDate(newDate.getDate() + newDay);
            const newDateKey = formatDateKey(newDate);
            
            // 重複チェック
            console.log('🔍 Checking for overlap:', {
                reservationId: reservationData.id,
                from: `${reservationBlock.dataset.originalDateKey} ${reservationBlock.dataset.originalTimeStr}`,
                to: `${newDateKey} ${newTime}`,
                duration: reservationData.duration,
                interval: reservationData.effective_interval_minutes ?? 10
            });
            
            // 同じ場所にドロップした場合は何もしない
            if (reservationBlock.dataset.originalDateKey === newDateKey && 
                reservationBlock.dataset.originalTimeStr === newTime) {
                console.log('⏭️ Dropped in same location, ignoring');
                return;
            }
            
            if (checkForOverlapOnDrop(newDateKey, newTime, reservationData)) {
                showMessage('この時間帯には既に予約があります。別の時間を選択してください。', 'error');
                return;
            }
            
            console.log('✅ Proceeding with reservation update');
            
            // Prevent multiple updates for the same reservation
            if (reservationBlock.dataset.updating === 'true') {
                console.log('⏭️ Reservation already being updated, skipping');
                return;
            }
            
            reservationBlock.dataset.updating = 'true';
            updateReservationTime(reservationData.id, newDateKey, newTime);
        }

        // ドロップ時の重複チェック
        function checkForOverlapOnDrop(dateKey, timeStr, reservationData) {
            const startTime = new Date(`${dateKey}T${timeStr}`);
            const endTime = new Date(startTime.getTime() + reservationData.duration * 60 * 1000);
            
            // 指定日の予約を取得（自分以外）
            const dayReservations = reservations[dateKey] || [];
            
            console.log('🔍 Checking overlaps for:', {
                dateKey: dateKey,
                timeStr: timeStr,
                reservationId: reservationData.id,
                duration: reservationData.duration,
                dayReservations: dayReservations.length
            });
            
            // 重複チェック（インターバル時間も含む）
            for (const reservation of dayReservations) {
                if (reservation.id === reservationData.id) {
                    console.log('⏭️ Skipping self:', reservation.id);
                    continue; // 自分は除外
                }
                
                const reservationStart = new Date(`${dateKey}T${reservation.time}`);
                const reservationEnd = new Date(reservationStart.getTime() + reservation.duration * 60 * 1000);
                
                // インターバル時間を取得（effective_interval_minutesを使用）
                const intervalMinutes = reservation.effective_interval_minutes ?? 10;
                const reservationEndWithInterval = new Date(reservationEnd.getTime() + intervalMinutes * 60 * 1000);
                
                // 現在の予約のインターバル時間
                const currentIntervalMinutes = reservationData.effective_interval_minutes ?? 10;
                const currentEndWithInterval = new Date(endTime.getTime() + currentIntervalMinutes * 60 * 1000);
                
                console.log('🔍 Comparing with reservation:', {
                    existingId: reservation.id,
                    existingTime: `${reservation.time} - ${new Date(reservationEndWithInterval).toTimeString().slice(0, 5)}`,
                    newTime: `${timeStr} - ${new Date(currentEndWithInterval).toTimeString().slice(0, 5)}`,
                    existingInterval: intervalMinutes,
                    newInterval: currentIntervalMinutes
                });
                
                // 重複判定（インターバル時間も含む）
                if (startTime < reservationEndWithInterval && currentEndWithInterval > reservationStart) {
                    console.log('🚫 Overlap detected:', {
                        newReservation: `${timeStr} - ${new Date(currentEndWithInterval).toTimeString().slice(0, 5)}`,
                        existingReservation: `${reservation.time} - ${new Date(reservationEndWithInterval).toTimeString().slice(0, 5)}`,
                        date: dateKey
                    });
                    return true; // 重複あり
                }
            }
            
            console.log('✅ No overlaps detected');
            return false; // 重複なし
        }

        // 予約時間を更新する関数
        function updateReservationTime(reservationId, newDateKey, newTime) {
            // 元の予約データを取得
            const originalDateKey = document.querySelector(`[data-reservation-id="${reservationId}"]`)?.dataset.originalDateKey;
            const originalTimeStr = document.querySelector(`[data-reservation-id="${reservationId}"]`)?.dataset.originalTimeStr;
            
            if (!originalDateKey || !originalTimeStr) {
                showMessage('予約データの取得に失敗しました。', 'error');
                return;
            }
            
            // 新しい開始時間をISO形式で作成
            const newStartTime = `${newDateKey}T${newTime}`;
            
            // バックエンドに更新リクエストを送信
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            // 予約データを取得してコース情報も含める
            const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
            const reservationData = reservationBlock ? JSON.parse(reservationBlock.dataset.reservationData) : null;
            
            // より完全な予約データを送信
            const updateData = {
                reservation: {
                    start_time: newStartTime,
                    course: reservationData ? `${reservationData.duration}分` : undefined
                }
            };
            
            // 休憩機能は無効化
            // 休憩予約の場合はis_breakフラグも送信（無効化）
            
            console.log('🔄 Sending update request:', updateData);
            console.log('🔄 Original reservation data:', reservationData);
            console.log('🔄 Course duration:', reservationData ? reservationData.duration : 'undefined');
            console.log('🔄 Is break: false (休憩機能は無効化)');
            console.log('🔄 Course string being sent:', updateData.reservation.course);
            
            fetch(`/admin/reservations/${reservationId}/update_booking`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify(updateData)
            })
            .then(response => {
                console.log('🔄 Response received:', response.status, response.statusText);
                if (!response.ok) {
                    return response.json().then(errorData => {
                        console.error('❌ Server error response:', errorData);
                        console.error('❌ Response status:', response.status);
                        console.error('❌ Response headers:', response.headers);
                        throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.message || 'Unknown error'}`);
                    }).catch(() => {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('🔄 Response data received:', data);
                if (data.success) {
                    console.log('✅ Update successful, updating local data');
                    // ローカルデータを更新
                    updateLocalReservationData(reservationId, newDateKey, newTime);
                    
                    // updatedAtフィールドを更新
                    if (data.reservation && data.reservation.updated_at) {
                        // グローバルreservationsオブジェクトのupdatedAtを更新
                        const reservationIndex = reservations[newDateKey].findIndex(r => r.id === parseInt(reservationId));
                        if (reservationIndex !== -1) {
                            reservations[newDateKey][reservationIndex].updatedAt = data.reservation.updated_at;
                            console.log('✅ Updated updatedAt in global reservations object');
                        } else {
                            console.warn('⚠️ Reservation not found in global reservations object for update');
                        }
                        
                                                // 現在開いているモーダルの変更日時を即座に更新
                        console.log('🔍 Checking if currentReservation matches updated reservation');
                        if (currentReservation && currentReservation.id === parseInt(reservationId)) {
                            console.log('🔄 Updating currentReservation after drag-and-drop:', {
                                before: {
                                    time: currentReservation.time,
                                    date: currentReservation.date,
                                    dateKey: currentReservation.dateKey,
                                    start_time: currentReservation.start_time
                                }
                            });
                            
                            currentReservation.updatedAt = data.reservation.updated_at;
                            // 日付と時間も更新
                            currentReservation.time = newTime;
                            currentReservation.date = newDateKey;
                            currentReservation.dateKey = newDateKey;
                            // start_timeも更新
                            const [hours, minutes] = newTime.split(':');
                            const newStartTime = new Date(`${newDateKey}T${hours}:${minutes}:00+09:00`);
                            currentReservation.start_time = newStartTime.toISOString();
                            
                            console.log('🔄 Updated currentReservation after drag-and-drop:', {
                                after: {
                                    time: currentReservation.time,
                                    date: currentReservation.date,
                                    dateKey: currentReservation.dateKey,
                                    start_time: currentReservation.start_time
                                }
                            });
                            
                            try {
                                updateModalUpdatedAt(data.reservation.updated_at);
                                console.log('✅ Modal updated at timestamp updated successfully');
                            } catch (error) {
                                console.error('❌ Error updating modal timestamp:', error);
                            }
                        } else {
                            console.log('❌ currentReservation not found or ID mismatch:', {
                                currentReservation: currentReservation ? currentReservation.id : 'null',
                                reservationId: reservationId
                            });
                            console.log('🔍 currentReservation details:', currentReservation);
                            
                            // モーダルが開いている場合は、最新のデータでcurrentReservationを更新
                            const modal = document.getElementById('reservationDetailModal');
                            console.log('🔍 Modal display status:', modal ? modal.style.display : 'modal not found');
                            console.log('🔍 Modal element:', modal);
                            
                            if (modal && modal.style.display === 'block') {
                                console.log('🔍 Modal is open, updating currentReservation...');
                                console.log('🔍 Searching through reservations for ID:', reservationId);
                                // 最新の予約データを取得してcurrentReservationを更新
                                for (const dateKey of Object.keys(reservations)) {
                                    const dayReservations = reservations[dateKey];
                                    const foundReservation = dayReservations.find(r => r.id === parseInt(reservationId));
                                                                    if (foundReservation) {
                                    currentReservation = foundReservation;
                                    console.log('🔄 Updated currentReservation from reservations data:', {
                                        time: currentReservation.time,
                                        date: currentReservation.date,
                                        dateKey: currentReservation.dateKey,
                                        start_time: currentReservation.start_time
                                    });
                                    console.log('🔄 currentReservation object after update:', currentReservation);
                                    console.log('🔄 Found reservation details:', foundReservation);
                                    console.log('🔄 Updated currentReservation successfully');
                                    break;
                                } else {
                                    console.log('🔍 No matching reservation found in dayReservations for ID:', reservationId);
                                    console.log('🔍 Available reservations in this day:', dayReservations.map(r => ({ id: r.id, time: r.time, date: r.date })));
                                }
                                }
                            } else {
                                console.log('🔍 Modal is not open, skipping currentReservation update');
                                console.log('🔍 Modal display value:', modal ? modal.style.display : 'N/A');
                            }
                        }
                    }
                    
                    // カレンダーを再描画
                    console.log('🔄 Regenerating calendar after reservation move');
                    try {
                        generateTimeSlots();
                        console.log('✅ Calendar regenerated successfully');
                    } catch (error) {
                        console.error('❌ Error regenerating calendar:', error);
                    }
                    
                    showMessage('予約時間が更新されました。', 'success');
                } else {
                    console.error('❌ Update failed:', data.message);
                    showMessage(`予約の更新に失敗しました: ${data.message}`, 'error');
                }
                
                // Reset updating flag
                const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
                if (reservationBlock) {
                    reservationBlock.dataset.updating = 'false';
                    console.log('✅ Updating flag reset to false');
                } else {
                    console.warn('⚠️ Reservation block element not found for updating flag reset');
                }
            })
            .catch(error => {
                console.error('❌ Error updating reservation:', error);
                console.error('❌ Error details:', error.message);
                console.error('❌ Error stack:', error.stack);
                showMessage('予約の更新中にエラーが発生しました。', 'error');
                
                // Reset updating flag on error
                const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
                if (reservationBlock) {
                    reservationBlock.dataset.updating = 'false';
                    console.log('✅ Updating flag reset to false after error');
                } else {
                    console.warn('⚠️ Reservation block element not found for updating flag reset after error');
                }
            });
        }

        // ローカル予約データを更新
        function updateLocalReservationData(reservationId, newDateKey, newTime) {
            console.log('🔄 Updating local reservation data:', {
                reservationId: reservationId,
                newDateKey: newDateKey,
                newTime: newTime
            });
            console.log('🔄 Current reservations object:', reservations);
            
            // 元の予約データを取得
            let originalReservationData = null;
            let originalDateKey = null;
            
            console.log('🔍 Searching for original reservation in reservations object');
            // 元の予約を見つけて削除
            for (const dateKey of Object.keys(reservations)) {
                const reservationIndex = reservations[dateKey].findIndex(r => r.id === parseInt(reservationId));
                if (reservationIndex !== -1) {
                    originalReservationData = { ...reservations[dateKey][reservationIndex] };
                    originalDateKey = dateKey;
                    console.log('🔍 Found original reservation:', originalReservationData);
                    console.log('🔍 Original date key:', originalDateKey);
                    
                    reservations[dateKey].splice(reservationIndex, 1);
                    
                    // 空の配列の場合は日付キーを削除
                    if (reservations[dateKey].length === 0) {
                        delete reservations[dateKey];
                    }
                    break;
                }
            }
            
            if (!originalReservationData) {
                console.error('❌ Original reservation data not found for ID:', reservationId);
                return;
            }
            
            // 新しい場所に予約を追加
            if (!reservations[newDateKey]) {
                reservations[newDateKey] = [];
            }
            
            // 予約データを更新
            const updatedReservationData = {
                ...originalReservationData,
                time: newTime,
                date: newDateKey,
                dateKey: newDateKey,
                // start_timeも更新
                start_time: new Date(`${newDateKey}T${newTime}:00+09:00`).toISOString()
            };
            
            console.log('🔄 Updated reservation data:', updatedReservationData);
            reservations[newDateKey].push(updatedReservationData);
            
            // DOM要素のデータ属性も更新
            const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
            if (reservationBlock) {
                console.log('🔄 Updating DOM element data attributes');
                reservationBlock.dataset.originalDateKey = newDateKey;
                reservationBlock.dataset.originalTimeStr = newTime;
                reservationBlock.dataset.reservationData = JSON.stringify(updatedReservationData);
                console.log('🔄 DOM element updated successfully');
            } else {
                console.warn('⚠️ Reservation block element not found for DOM update');
            }
            
            console.log('✅ Local reservation data updated:', {
                from: originalDateKey,
                to: newDateKey,
                reservationId: reservationId
            });
            console.log('✅ Final reservations object state:', reservations);
        }

        // 予約データの妥当性をチェックする関数
        function validateReservationData(reservation) {
            console.log('🔍 予約データ妥当性チェック開始:', reservation);
            
            if (!reservation) {
                console.error('❌ Reservation is null or undefined');
                return false;
            }
            
            if (!reservation.id || reservation.id === 'null' || reservation.id === null || reservation.id === undefined) {
                console.error('❌ Invalid reservation ID:', reservation.id);
                console.error('❌ Reservation object:', reservation);
                return false;
            }
            
            console.log('✅ 予約ID確認:', reservation.id);
            
            if (!reservation.userId || reservation.userId === 'null' || reservation.userId === null) {
                console.warn('⚠️ No user ID for reservation:', reservation.id);
                // Don't return false - allow modal to open without userId
            }
            
            console.log('✅ 予約データ妥当性チェック完了');
            return true;
        }

                // ユーザー検索機能
        function setupUserSearch() {
            // 通常の予約作成モーダル用
            const customerNameInput = document.getElementById('customerName');
            const searchResults = document.getElementById('userSearchResults');
            
            if (customerNameInput && searchResults) {
                setupUserSearchForInput(customerNameInput, searchResults, 'customerName', 'customerPhone', 'customerEmail');
            }
            
            // 一括予約作成モーダル用
            const bulkCustomerNameInput = document.getElementById('bulkCustomerName');
            const bulkSearchResults = document.getElementById('bulkUserSearchResults');
            
            if (bulkCustomerNameInput && bulkSearchResults) {
                setupUserSearchForInput(bulkCustomerNameInput, bulkSearchResults, 'bulkCustomerName', 'bulkCustomerPhone', 'bulkCustomerEmail');
            }
        }
        
        function setupUserSearchForInput(inputElement, resultsElement, nameFieldId, phoneFieldId, emailFieldId) {
            // 入力イベント
            inputElement.addEventListener('input', function() {
                const query = this.value.trim();
                
                // デバウンス処理
                if (searchTimeout) {
                    clearTimeout(searchTimeout);
                }
                
                if (query.length < 2) {
                    hideUserSearchResults(resultsElement);
                    return;
                }
                
                searchTimeout = setTimeout(() => {
                    searchUsers(query, resultsElement, nameFieldId, phoneFieldId, emailFieldId);
                }, 300);
            });
            
            // フォーカスアウト時に結果を隠す
            inputElement.addEventListener('blur', function() {
                setTimeout(() => {
                    hideUserSearchResults(resultsElement);
                }, 200);
            });
            
            // フォーカス時に結果を表示（入力がある場合）
            inputElement.addEventListener('focus', function() {
                const query = this.value.trim();
                if (query.length >= 2) {
                    searchUsers(query, resultsElement, nameFieldId, phoneFieldId, emailFieldId);
                }
            });
        }
        
        function searchUsers(query, resultsElement, nameFieldId, phoneFieldId, emailFieldId) {
            fetch(`/admin/reservations/search_users?query=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayUserSearchResults(data.users, resultsElement, nameFieldId, phoneFieldId, emailFieldId);
                    } else {
                        console.error('❌ User search failed:', data.message);
                        hideUserSearchResults(resultsElement);
                    }
                })
                .catch(error => {
                    console.error('❌ Error searching users:', error);
                    hideUserSearchResults(resultsElement);
                });
        }
        
        function displayUserSearchResults(users, resultsElement, nameFieldId, phoneFieldId, emailFieldId) {
            if (!resultsElement) return;
            
            if (users.length === 0) {
                resultsElement.innerHTML = '<div class="user-search-item">該当するユーザーが見つかりません</div>';
                resultsElement.style.display = 'block';
                return;
            }
            
            const resultsHtml = users.map(user => `
                <div class="user-search-item" onclick="selectUser(${user.id}, '${user.name}', '${user.phone_number}', '${user.email}', '${nameFieldId}', '${phoneFieldId}', '${emailFieldId}')">
                    <div class="user-name">${user.name}</div>
                    <div class="user-details">
                        📞 ${user.phone_number || '未設定'} | 📧 ${user.email || '未設定'}
                        ${user.active_tickets > 0 ? `<span class="user-tickets"> | 🎫 残${user.active_tickets}枚</span>` : ''}
                        ${user.last_visit !== 'なし' ? ` | 📅 最終来店: ${user.last_visit}` : ''}
                    </div>
                </div>
            `).join('');
            
            resultsElement.innerHTML = resultsHtml;
            resultsElement.style.display = 'block';
        }
        
        function selectUser(userId, name, phone, email, nameFieldId, phoneFieldId, emailFieldId) {
            // フォームフィールドを更新
            const nameField = document.getElementById(nameFieldId);
            const phoneField = document.getElementById(phoneFieldId);
            const emailField = document.getElementById(emailFieldId);
            
            if (nameField) nameField.value = name;
            if (phoneField) phoneField.value = phone;
            if (emailField) emailField.value = email;
            
            // 検索結果を隠す（安全に実行）
            if (nameField) {
                const positionRelative = nameField.closest('.position-relative');
                if (positionRelative) {
                    const searchResults = positionRelative.querySelector('.user-search-results');
                    if (searchResults) {
                        hideUserSearchResults(searchResults);
                    }
                }
            }
            
            // 成功メッセージ
            showMessage(`既存ユーザー「${name}」を選択しました`, 'success');
        }
        
        function hideUserSearchResults(resultsElement) {
            console.log('🔍 hideUserSearchResults called');
            if (resultsElement) {
                resultsElement.style.display = 'none';
                resultsElement.innerHTML = ''; // Also clear the content
                console.log('🔍 Search results hidden and cleared');
            } else {
                // Fallback for backward compatibility
                const searchResults = document.getElementById('userSelectionSearchResults');
                if (searchResults) {
                    searchResults.style.display = 'none';
                    searchResults.innerHTML = '';
                    console.log('🔍 Fallback search results hidden and cleared');
                } else {
                    console.log('🔍 Search results element not found for hiding');
                }
            }
        }

        // キャンセル表示エリアに予約を追加
        function addToCancellationDisplay(reservation) {
            if (!reservation) {
                console.error('❌ Reservation is null or undefined');
                return;
            }
            
            // 予約の実際の日付を特定
            let actualReservationDate = null;
            
            // start_timeが利用可能な場合はそれを使用（最優先）
            if (reservation.start_time) {
                actualReservationDate = new Date(reservation.start_time);
            } else {
                // reservationsオブジェクトから検索
                for (const dateKey of Object.keys(reservations)) {
                    const dayReservations = reservations[dateKey];
                    const foundReservation = dayReservations.find(r => r.id === reservation.id);
                    if (foundReservation) {
                        const [year, month, day] = dateKey.split('-').map(Number);
                        actualReservationDate = new Date(year, month - 1, day);
                        break;
                    }
                }
                
                // 見つからない場合はcreatedAtから計算
                if (!actualReservationDate) {
                    actualReservationDate = new Date(reservation.createdAt);
                }
            }
            
            const cancellationData = {
                id: reservation.id,
                customer: reservation.customer,
                time: reservation.time,
                duration: reservation.duration,
                date: actualReservationDate.toLocaleDateString('ja-JP'),
                cancelledAt: new Date().toLocaleString('ja-JP')
            };
            
            cancelledReservations.unshift(cancellationData); // 最新を先頭に追加
  
  // ローカルストレージに保存
            saveCancelledReservations();
            

            
            // 即座に更新を試行（次のフレームで実行）
            requestAnimationFrame(() => {
                updateCancellationDisplayImmediately();
            });
        }

        // キャンセル表示エリアを更新（即座に実行）
        // 現在の週のキャンセル履歴をフィルタリング
        function getCurrentWeekCancellations() {
            const weekStart = new Date(currentWeekStart);
            const weekEnd = new Date(currentWeekStart);
            weekEnd.setDate(weekEnd.getDate() + 6);
            
            return cancelledReservations.filter(reservation => {
                const reservationDate = new Date(reservation.date);
                return reservationDate >= weekStart && reservationDate <= weekEnd;
            });
        }

        function updateCancellationDisplayImmediately() {
            const btn = document.getElementById('showCancellationsBtn');
            const countSpan = document.getElementById('cancellation-count');
            const display = document.getElementById('cancellation-display');
            const list = document.getElementById('cancellation-list');
            
            // 現在の週のキャンセル履歴を取得
            const currentWeekCancellations = getCurrentWeekCancellations();
            
            console.log('🔄 Attempting to update cancellation display, total count:', cancelledReservations.length, 'current week:', currentWeekCancellations.length);
            console.log('🔍 Elements found:', { btn: !!btn, countSpan: !!countSpan, display: !!display, list: !!list });
            
            // ボタンが存在する場合は即座に更新（spanがなくてもボタンテキストを直接更新）
            if (btn) {
                console.log('🔄 Updating cancellation display immediately, current week count:', currentWeekCancellations.length);
                
                // ボタンの状態を更新（spanがなくても直接テキストを更新）
                if (currentWeekCancellations.length === 0) {
                    btn.disabled = false;
                    btn.textContent = `❌ キャンセル履歴 (0)`;
                    if (display) {
                        display.style.display = 'none';
                    }
                    console.log('✅ Updated cancellation display for 0 cancellations in current week');
    } else {
                    btn.disabled = false;
                    btn.textContent = `❌ キャンセル履歴 (${currentWeekCancellations.length})`;
                    console.log('✅ Updated cancellation display for', currentWeekCancellations.length, 'cancellations in current week');
                }
                
                // spanが存在する場合はそれも更新
                if (countSpan) {
                    countSpan.textContent = currentWeekCancellations.length;
                }
                
                // リストを更新（表示されている場合のみ）
                if (display && display.style.display === 'block' && list) {
                    const listHtml = currentWeekCancellations.map(reservation => `
                        <div class="cancellation-item">
                            <div class="cancellation-info">
                                <div class="cancellation-customer">${reservation.customer}</div>
                                <div class="cancellation-details">
                                    📅 ${reservation.date} <span class="cancellation-time">${reservation.time}</span> | 
                                    ⏱️ ${reservation.duration}分 | 
                                    🗑️ ${reservation.cancelledAt}
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                    list.innerHTML = listHtml;
                }
            } else {
                if (!domReady) {
                    console.log('⚠️ DOM not ready yet, will update when ready');
                    // DOMが準備できていない場合は後で更新
                    setTimeout(() => {
                        updateCancellationDisplayImmediately();
                    }, 200);
                } else {
                    console.log('⚠️ Cancellation button not found, will update later');
                    // 要素が準備できていない場合は後で更新（より長い間隔で）
                    setTimeout(() => {
                        updateCancellationDisplayImmediately();
                    }, 100);
                }
            }
        }

        // キャンセル表示エリアを更新（待機版）
        function updateCancellationDisplay() {
            // 即座に更新を試行
            updateCancellationDisplayImmediately();
        }

        // キャンセル表示エリアの表示/非表示を切り替え
        function toggleCancellationDisplay() {
            const display = document.getElementById('cancellation-display');
            const btn = document.getElementById('showCancellationsBtn');
            const list = document.getElementById('cancellation-list');
            
            // 要素が存在しない場合は早期リターン
            if (!display || !btn || !list) {
                console.error('❌ Cancellation display elements not found');
                showMessage('キャンセル表示エリアが見つかりませんでした。', 'error');
                return;
            }
            
            if (display.style.display === 'none') {
                // 表示する
                display.style.display = 'block';
                btn.classList.add('active');
                
                // 現在の週のキャンセル履歴を取得してリストを更新
                const currentWeekCancellations = getCurrentWeekCancellations();
                const listHtml = currentWeekCancellations.map(reservation => `
                    <div class="cancellation-item">
                        <div class="cancellation-info">
                            <div class="cancellation-customer">${reservation.customer}</div>
                            <div class="cancellation-details">
                                📅 ${reservation.date} <span class="cancellation-time">${reservation.time}</span> | 
                                ⏱️ ${reservation.duration}分 | 
                                🗑️ ${reservation.cancelledAt}
                            </div>
                        </div>
                    </div>
                `).join('');
                
                list.innerHTML = listHtml;
                
                showMessage('キャンセル履歴を表示しました。', 'info');
            } else {
                // 非表示にする
                display.style.display = 'none';
                btn.classList.remove('active');
                showMessage('キャンセル履歴を非表示にしました。', 'info');
            }
        }

        // キャンセル表示エリアをクリア
        function clearCancellationDisplay() {
            console.log('🗑️ Clearing cancellation display...');
            
            // データをクリア
            cancelledReservations = [];
            
            // ローカルストレージからも削除
            localStorage.removeItem('cancelledReservations');
            
            // 要素を取得
            const display = document.getElementById('cancellation-display');
            const btn = document.getElementById('showCancellationsBtn');
            const countSpan = document.getElementById('cancellation-count');
            const list = document.getElementById('cancellation-list');
            
            // 要素が存在する場合のみ操作
            if (btn && countSpan) {
                // カウントを更新
                countSpan.textContent = '0';
                btn.textContent = '❌ キャンセル履歴 (0)';
                btn.disabled = false;
            }
            
            if (display) {
                display.style.display = 'none';
            }
            
            if (btn) {
                btn.classList.remove('active');
            }
            
            if (list) {
                list.innerHTML = '';
            }
            
            console.log('✅ Cancellation display cleared successfully');
            
            // 即座に更新
            updateCancellationDisplayImmediately();
            
            showMessage('キャンセル履歴をクリアしました。', 'info');
        }
        
        // キャンセル表示の初期化（即座に実行）
        function initializeCancellationDisplay() {
            console.log('🚀 Starting cancellation display initialization...');
            loadCancelledReservations();
            
            // 即座に更新を試行
            setTimeout(() => {
                updateCancellationDisplayImmediately();
                cancellationDisplayReady = true;
                console.log('✅ Cancellation display initialized successfully');
            }, 100);
        }
        
        // 初期化実行
        init();
        
        // DOMが完全に読み込まれてからキャンセル表示を初期化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                domReady = true;
                setTimeout(() => {
                    initializeCancellationDisplay();
                }, 100);
            });
        } else {
            // DOMが既に読み込まれている場合
            domReady = true;
            setTimeout(() => {
                initializeCancellationDisplay();
            }, 100);
        }
        
        // ユーザー検索機能を初期化
        document.addEventListener('DOMContentLoaded', function() {
            setupUserSearch();
        });
        
        // グローバル関数として公開（onclick属性で使用される関数）
        window.openBookingModal = openBookingModal;
        window.openBreakModal = openBreakModal;
        window.closeSlotOptionsMenu = closeSlotOptionsMenu;
        window.openBulkReservationModal = openBulkReservationModal;
        window.closeBulkReservationModal = closeBulkReservationModal;
        window.previewBulkReservations = previewBulkReservations;
        window.createBulkReservations = createBulkReservations;
        window.openSettingsModal = openSettingsModal;
        window.closeSettingsModal = closeSettingsModal;
        window.switchTab = switchTab;
        window.saveSettings = saveSettings;
        window.openUserSelectionModal = openUserSelectionModal;
        window.closeUserSelectionModal = closeUserSelectionModal;
        window.saveUserSelection = saveUserSelection;
        window.selectUserForModal = selectUserForModal;
        window.selectUser = selectUser;
        window.previousWeek = previousWeek;
        window.nextWeek = nextWeek;
        window.toggleMiniCalendar = toggleMiniCalendar;
        window.previousMiniCalendarYear = previousMiniCalendarYear;
        window.previousMiniCalendarMonth = previousMiniCalendarMonth;
        window.nextMiniCalendarMonth = nextMiniCalendarMonth;
        window.nextMiniCalendarYear = nextMiniCalendarYear;
        window.toggleCancellationDisplay = toggleCancellationDisplay;
        window.clearCancellationDisplay = clearCancellationDisplay;
        window.closeBookingModal = closeBookingModal;
        window.createBooking = createBooking;
        window.closeBreakModal = closeBreakModal;
        window.createBreak = createBreak;
        window.closeBreakDetailModal = closeBreakDetailModal;
        window.saveBreakChanges = saveBreakChanges;
        window.deleteBreakReservation = deleteBreakReservation;
        window.closeReservationDetailModal = closeReservationDetailModal;
        window.toggleDay = toggleDay;
        window.addTimeSlot = addTimeSlot;
        window.removeTimeSlot = removeTimeSlot;
        window.updateIntervalOnChange = updateIntervalOnChange;
        window.handleBreakTitleChange = handleBreakTitleChange;
        window.handleEditBreakTitleChange = handleEditBreakTitleChange;
        window.updateCalendarOnStatusChange = updateCalendarOnStatusChange;
        window.updateCalendarOnCourseChange = updateCalendarOnCourseChange;
        window.updateTimeSlot = updateTimeSlot;
        window.saveReservationChanges = saveReservationChanges;
        
        console.log('✅ All global functions exposed for onclick attributes');
        })(); // IIFEを閉じる
</script> 
</body>
</html> 