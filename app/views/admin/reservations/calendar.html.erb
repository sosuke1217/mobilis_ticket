<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>予約管理システム</title>
<style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Hiragino Kaku Gothic Pro', 'ヒラギノ角ゴ Pro W3', Meiryo, sans-serif;
            background-color: #f8f9fa;
            min-height: 100vh;
        }

        .container {
  max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            color: #333;
            font-size: 24px;
        }

        .header-controls {
  display: flex;
            gap: 12px;
  align-items: center;
}

        .week-nav {
  display: flex;
  align-items: center;
            gap: 16px;
        }

        .nav-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s;
        }

        .nav-btn:hover {
            background: #0056b3;
        }

        .current-week {
            font-weight: 600;
            color: #333;
            min-width: 200px;
            text-align: center;
        }

        .settings-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .settings-btn:hover {
            background: #1e7e34;
            transform: translateY(-1px);
        }

        /* Mini Calendar */
        .mini-calendar-container {
            position: relative;
        }

        .mini-calendar-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .mini-calendar-btn:hover {
            background: #545b62;
        }

        .mini-calendar {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            padding: 16px;
            z-index: 1000;
            min-width: 280px;
            display: none;
            animation: slideDown 0.2s ease;
        }

        .mini-calendar.show {
            display: block;
        }

        .mini-calendar-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 12px;
        }

        .mini-calendar-title {
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

        .mini-calendar-nav {
            display: flex;
            gap: 4px;
        }

        .mini-calendar-nav-btn {
            background: none;
            border: none;
            cursor: pointer;
            padding: 4px 8px;
            border-radius: 4px;
            color: #6c757d;
            transition: background 0.2s;
        }

        .mini-calendar-nav-btn:hover {
            background: #f8f9fa;
        }

        .mini-calendar-weekdays {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            margin-bottom: 8px;
        }

        .mini-calendar-weekday {
            text-align: center;
            font-size: 11px;
            font-weight: 600;
            color: #6c757d;
            padding: 4px 0;
        }

        .mini-calendar-days {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
        }

        .mini-calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.2s;
            border: 1px solid transparent;
        }

        .mini-calendar-day:hover {
            background: #f8f9fa;
        }

        .mini-calendar-day.other-month {
            color: #adb5bd;
        }

        .mini-calendar-day.today {
            background: #007bff;
            color: white;
            font-weight: 600;
        }

        .mini-calendar-day.selected {
            background: #28a745;
            color: white;
            font-weight: 600;
        }

        .mini-calendar-day.week-start {
            border-color: #28a745;
            background: #e8f5e8;
            color: #28a745;
            font-weight: 600;
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .schedule-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .schedule-header {
            display: grid;
            grid-template-columns: 80px repeat(7, 1fr);
            background: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
        }

        .time-column-header {
            padding: 16px 8px;
            text-align: center;
            font-weight: 600;
            color: #6c757d;
            border-right: 1px solid #dee2e6;
        }

        .day-header {
            padding: 16px 12px;
            text-align: center;
            font-weight: 600;
            color: #333;
            border-right: 1px solid #dee2e6;
        }

        .day-header.sunday {
            color: #dc3545;
            background: #ffeaea;
        }

        .day-header.saturday {
            color: #007bff;
            background: #e6f3ff;
        }

        .schedule-body {
            display: grid;
            grid-template-columns: 80px repeat(7, 1fr);
            max-height: 600px;
            overflow-y: auto;
        }

        .time-slot {
            padding: 8px;
            text-align: center;
  font-size: 12px;
            color: #6c757d;
            border-right: 1px solid #dee2e6;
            border-bottom: 1px solid #f0f0f0;
            background: #fafafa;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 40px;
        }

        .schedule-cell {
            padding: 4px;
            border-right: 1px solid #dee2e6;
            border-bottom: 1px solid #f0f0f0;
            min-height: 40px;
            cursor: pointer;
            transition: background 0.2s;
  position: relative;
}

        .schedule-cell:hover {
            background: #f8f9fa;
        }

        .schedule-cell.available {
            background: #d4edda;
            border-color: #c3e6cb;
        }

        .schedule-cell.reserved {
            background: #f8d7da;
            border-color: #f5c6cb;
        }

        .reservation-block {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
  color: white;
            padding: 4px 8px;
  border-radius: 4px;
  font-size: 11px;
            font-weight: 500;
            text-align: center;
            margin: 2px 0;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
            overflow: hidden;
        }

        .reservation-block:hover {
            transform: scale(1.02);
            box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);
        }

        .reservation-block.completed {
            background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
        }

        .reservation-block.cancelled {
            background: linear-gradient(135deg, #6c757d 0%, #545b62 100%);
        }

        .available-slot {
            background: #e8f5e8;
            color: #155724;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 10px;
            text-align: center;
            margin: 1px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .available-slot:hover {
            background: #d1ecf1;
            color: #0c5460;
        }

        /* 設定モーダル */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
  left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            animation: fadeIn 0.3s ease;
        }

        .modal-content {
            background: white;
            margin: 3% auto;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideIn 0.3s ease;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
        }

        .modal-header {
            background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
            color: white;
            padding: 20px 24px;
            border-radius: 12px 12px 0 0;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .modal-header h2 {
            margin: 0;
            font-size: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .close {
  color: white;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background 0.2s;
        }

        .close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .modal-body {
            padding: 24px;
        }

        .settings-tabs {
            display: flex;
            border-bottom: 2px solid #dee2e6;
            margin-bottom: 24px;
        }

        .tab-button {
            padding: 12px 24px;
            border: none;
            background: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #6c757d;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }

        .tab-button.active {
            color: #007bff;
            border-bottom-color: #007bff;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .day-setting {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            margin-bottom: 16px;
            overflow: hidden;
        }

        .day-setting-header {
            background: #f8f9fa;
            padding: 12px 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-weight: 600;
        }

        .day-setting-header.sunday {
            color: #dc3545;
            background: #ffeaea;
        }

        .day-setting-header.saturday {
            color: #007bff;
            background: #e6f3ff;
        }

        .day-toggle {
            position: relative;
            width: 50px;
            height: 24px;
            background: #ccc;
    border-radius: 12px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .day-toggle.active {
            background: #28a745;
        }

        .day-toggle::before {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            transition: transform 0.3s;
        }

        .day-toggle.active::before {
            transform: translateX(26px);
        }

        .time-slots-container {
            padding: 16px;
            background: white;
        }

        .time-slot-input {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
            padding: 12px;
            background: #f8f9fa;
            border-radius: 6px;
        }

        .time-input {
            padding: 6px 10px;
            border: 1px solid #dee2e6;
  border-radius: 4px;
            font-size: 14px;
}

        .btn {
            padding: 8px 16px;
            border: none;
  border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s;
        }

        .btn-sm {
            padding: 4px 8px;
            font-size: 12px;
        }

        .btn-primary {
            background: #007bff;
  color: white;
        }

        .btn-primary:hover {
            background: #0056b3;
        }

        .btn-success {
            background: #28a745;
  color: white;
        }

        .btn-success:hover {
            background: #1e7e34;
        }

        .btn-danger {
            background: #dc3545;
  color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-secondary {
            background: #6c757d;
  color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        .add-time-btn {
            width: 100%;
            margin-top: 8px;
            border: 2px dashed #dee2e6;
            background: white;
            color: #6c757d;
            padding: 12px;
  border-radius: 6px;
  cursor: pointer;
            transition: all 0.2s;
        }

        .add-time-btn:hover {
            border-color: #28a745;
            color: #28a745;
            background: #f8fff8;
        }

        .modal-footer {
            padding: 16px 24px;
            border-top: 1px solid #dee2e6;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

@media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .header {
                flex-direction: column;
                gap: 16px;
                padding: 16px;
            }

            .header-controls {
                width: 100%;
                justify-content: space-between;
            }

            .schedule-header {
                grid-template-columns: 60px repeat(7, 1fr);
            }

            .schedule-body {
                grid-template-columns: 60px repeat(7, 1fr);
            }

            .time-column-header,
            .time-slot {
                padding: 8px 4px;
                font-size: 10px;
            }

            .day-header {
                padding: 12px 4px;
                font-size: 12px;
            }

            .schedule-cell {
                min-height: 30px;
            }

            .reservation-block {
          font-size: 10px;
                padding: 2px 4px;
            }

            .modal-content {
                margin: 5% auto;
                width: 95%;
            }

            .settings-tabs {
                overflow-x: auto;
            }

            .tab-button {
                white-space: nowrap;
                min-width: 100px;
            }

            .time-slot-input {
                flex-direction: column;
                gap: 8px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📅 予約管理システム</h1>
            <div class="header-controls">
                <div class="week-nav">
                    <button class="nav-btn" onclick="previousWeek()">← 前週</button>
                    <div class="current-week" id="currentWeek">2025年 8月10日 - 8月16日</div>
                    <button class="nav-btn" onclick="nextWeek()">次週 →</button>
                </div>
                <div class="mini-calendar-container">
                    <button class="mini-calendar-btn" onclick="toggleMiniCalendar()">
                        📅 週を選択
                    </button>
                    <div class="mini-calendar" id="miniCalendar">
                        <div class="mini-calendar-header">
                            <div class="mini-calendar-title" id="miniCalendarTitle">2025年 8月</div>
                            <div class="mini-calendar-nav">
                                <button class="mini-calendar-nav-btn" onclick="previousMiniCalendarMonth()">‹</button>
                                <button class="mini-calendar-nav-btn" onclick="nextMiniCalendarMonth()">›</button>
                            </div>
                        </div>
                        <div class="mini-calendar-weekdays">
                            <div class="mini-calendar-weekday">日</div>
                            <div class="mini-calendar-weekday">月</div>
                            <div class="mini-calendar-weekday">火</div>
                            <div class="mini-calendar-weekday">水</div>
                            <div class="mini-calendar-weekday">木</div>
                            <div class="mini-calendar-weekday">金</div>
                            <div class="mini-calendar-weekday">土</div>
                        </div>
                        <div class="mini-calendar-days" id="miniCalendarDays">
                            <!-- 動的に生成される -->
                        </div>
                    </div>
                </div>
                <button class="settings-btn" onclick="openSettingsModal()">
                    ⚙️ 予約可能日時を編集
                </button>
            </div>
        </div>

        <div class="schedule-container">
            <div class="schedule-header">
                <div class="time-column-header">時刻</div>
                <div class="day-header sunday">日<br><span style="font-size: 12px;">8/10</span></div>
                <div class="day-header">月<br><span style="font-size: 12px;">8/11</span></div>
                <div class="day-header">火<br><span style="font-size: 12px;">8/12</span></div>
                <div class="day-header">水<br><span style="font-size: 12px;">8/13</span></div>
                <div class="day-header">木<br><span style="font-size: 12px;">8/14</span></div>
                <div class="day-header">金<br><span style="font-size: 12px;">8/15</span></div>
                <div class="day-header saturday">土<br><span style="font-size: 12px;">8/16</span></div>
            </div>
            
            <div class="schedule-body" id="scheduleBody">
                <!-- 時間スロットは動的に生成される -->
            </div>
        </div>
    </div>

    <!-- 設定モーダル -->
    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>⚙️ 予約可能日時を編集</h2>
                <span class="close" onclick="closeSettingsModal()">&times;</span>
            </div>
            <div class="modal-body">
                <div class="settings-tabs">
                    <button class="tab-button active" onclick="switchTab('general')">一回限りの変更</button>
                    <button class="tab-button" onclick="switchTab('recurring')">定期的なスケジュール</button>
                </div>

                <!-- 一回限りの変更タブ -->
                <div id="general-tab" class="tab-content active">
                    <p style="margin-bottom: 20px; color: #666;">8月10日 - 8月16日の予約可能時間を設定</p>
                    
                    <div id="daySettings">
                        <!-- 曜日別設定が動的に生成される -->
      </div>
    </div>

                <!-- 定期的なスケジュールタブ -->
                <div id="recurring-tab" class="tab-content">
                    <p style="margin-bottom: 20px; color: #666;">今後の週に適用するデフォルトスケジュールを設定</p>
                    
                    <div id="recurringDaySettings">
                        <!-- 定期的な設定が動的に生成される -->
        </div>
        </div>
        </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeSettingsModal()">キャンセル</button>
                <button class="btn btn-success" onclick="saveSettings()">完了</button>
          </div>
        </div>
        </div>

    <script>
        let currentWeekStart = new Date(2025, 7, 10); // 2025年8月10日（日曜日）
        let weeklySchedule = {}; // 週間スケジュール
        let reservations = {}; // 予約データ
        let miniCalendarMonth = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), 1); // ミニカレンダーの表示月
        
        // 曜日の名前
        const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
        const dayNamesLong = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'];
        
        // 月の名前
        const monthNames = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];
        
        // 初期化
        function init() {
            initializeDefaultSchedule();
            generateSampleReservations();
            renderWeekView();
            renderDaySettings();
            renderMiniCalendar();
        }

        // デフォルトスケジュールを初期化
        function initializeDefaultSchedule() {
            weeklySchedule = {
                0: { enabled: false, times: [] }, // 日曜日は休業
                1: { enabled: true, times: [{ start: '09:00', end: '20:00' }] }, // 月曜日
                2: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 火曜日
                3: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 水曜日
                4: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 木曜日
                5: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 金曜日
                6: { enabled: true, times: [{ start: '09:00', end: '18:00' }] }, // 土曜日
            };
        }

        // サンプル予約データを生成
        function generateSampleReservations() {
            reservations = {
                '2025-08-11': [
                    { time: '10:00', duration: 60, customer: '田中様', status: 'confirmed' },
                    { time: '14:00', duration: 90, customer: '佐藤様', status: 'confirmed' },
                ],
                '2025-08-13': [
                    { time: '11:00', duration: 60, customer: '山田様', status: 'completed' },
                    { time: '16:00', duration: 75, customer: '鈴木様', status: 'confirmed' },
                ],
                '2025-08-14': [
                    { time: '09:30', duration: 60, customer: '高橋様', status: 'cancelled' },
                ],
            };
        }

        // 週表示を描画
        function renderWeekView() {
            updateWeekHeader();
            generateTimeSlots();
        }

        // 週のヘッダーを更新
        function updateWeekHeader() {
            const endDate = new Date(currentWeekStart);
            endDate.setDate(endDate.getDate() + 6);
            
            const startStr = formatDateShort(currentWeekStart);
            const endStr = formatDateShort(endDate);
            
            document.getElementById('currentWeek').textContent = 
                `${currentWeekStart.getFullYear()}年 ${startStr} - ${endStr}`;
            
            // 日付ヘッダーを更新
            const headers = document.querySelectorAll('.day-header');
            for (let i = 1; i < headers.length; i++) {
                const date = new Date(currentWeekStart);
                date.setDate(date.getDate() + (i - 1));
                
                const dayName = dayNames[date.getDay()];
                const dateStr = `${date.getMonth() + 1}/${date.getDate()}`;
                
                headers[i].innerHTML = `${dayName}<br><span style="font-size: 12px;">${dateStr}</span>`;
            }
        }

        // タイムスロットを生成
        function generateTimeSlots() {
            const scheduleBody = document.getElementById('scheduleBody');
            scheduleBody.innerHTML = '';
            
            // 8:00から21:00まで10分刻みで生成
            for (let hour = 8; hour <= 21; hour++) {
                for (let minute = 0; minute < 60; minute += 10) {
                    if (hour === 21 && minute > 0) break; // 21:00で終了
                    
                    const timeStr = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
                    
                    // 時刻ラベル
                    const timeSlot = document.createElement('div');
                    timeSlot.className = 'time-slot';
                    timeSlot.textContent = timeStr;
                    scheduleBody.appendChild(timeSlot);
                    
                    // 各曜日のセル
                    for (let day = 0; day < 7; day++) {
                        const cell = document.createElement('div');
                        cell.className = 'schedule-cell';
                        cell.dataset.day = day;
                        cell.dataset.time = timeStr;
                        
                        const currentDate = new Date(currentWeekStart);
                        currentDate.setDate(currentDate.getDate() + day);
                        const dateKey = formatDateKey(currentDate);
                        
                        // 営業時間チェック
                        if (isBusinessHour(day, timeStr)) {
                            // 予約チェック
                            const reservation = findReservation(dateKey, timeStr);
                            if (reservation) {
                                const block = createReservationBlock(reservation);
                                cell.appendChild(block);
  } else {
                                cell.classList.add('available');
                                const slot = document.createElement('div');
                                slot.className = 'available-slot';
                                slot.textContent = '空き';
                                cell.appendChild(slot);
                            }
                        }
                        
                        scheduleBody.appendChild(cell);
                    }
                }
            }
        }

        // 営業時間かどうかチェック
        function isBusinessHour(dayOfWeek, timeStr) {
            const schedule = weeklySchedule[dayOfWeek];
            if (!schedule || !schedule.enabled) return false;
            
            const [hours, minutes] = timeStr.split(':').map(Number);
            const timeInMinutes = hours * 60 + minutes;
            
            return schedule.times.some(slot => {
                const [startHour, startMin] = slot.start.split(':').map(Number);
                const [endHour, endMin] = slot.end.split(':').map(Number);
                const startInMinutes = startHour * 60 + startMin;
                const endInMinutes = endHour * 60 + endMin;
                
                return timeInMinutes >= startInMinutes && timeInMinutes < endInMinutes;
            });
        }

        // 予約を検索
        function findReservation(dateKey, timeStr) {
            const dayReservations = reservations[dateKey] || [];
            return dayReservations.find(reservation => {
                const reservationTime = reservation.time;
                const [resHour, resMin] = reservationTime.split(':').map(Number);
                const [checkHour, checkMin] = timeStr.split(':').map(Number);
                
                const resTimeInMin = resHour * 60 + resMin;
                const checkTimeInMin = checkHour * 60 + checkMin;
                const endTimeInMin = resTimeInMin + reservation.duration;
                
                return checkTimeInMin >= resTimeInMin && checkTimeInMin < endTimeInMin;
            });
        }

        // 予約ブロックを作成
        function createReservationBlock(reservation) {
            const block = document.createElement('div');
            block.className = `reservation-block ${reservation.status}`;
            
            const statusIcon = {
                'confirmed': '✓',
                'completed': '✓',
                'cancelled': '✗'
            };
            
            block.innerHTML = `
                ${statusIcon[reservation.status] || ''} ${reservation.customer}
                <div style="font-size: 9px; opacity: 0.9;">${reservation.duration}分</div>
            `;
            
            return block;
        }

        // 設定モーダルを開く
        function openSettingsModal() {
            document.getElementById('settingsModal').style.display = 'block';
            renderDaySettings();
        }

        // 設定モーダルを閉じる
        function closeSettingsModal() {
            document.getElementById('settingsModal').style.display = 'none';
        }

        // タブ切り替え
        function switchTab(tabName) {
            // タブボタンの状態更新
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
            
            // タブコンテンツの表示切り替え
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(`${tabName}-tab`).classList.add('active');
            
            if (tabName === 'recurring') {
                renderRecurringDaySettings();
            }
        }

        // 曜日別設定を描画
        function renderDaySettings() {
            const container = document.getElementById('daySettings');
            container.innerHTML = '';
            
            for (let day = 0; day < 7; day++) {
                const dayDiv = createDaySettingDiv(day, false);
                container.appendChild(dayDiv);
            }
        }

        // 定期的な設定を描画
        function renderRecurringDaySettings() {
            const container = document.getElementById('recurringDaySettings');
            container.innerHTML = '';
            
            for (let day = 0; day < 7; day++) {
                const dayDiv = createDaySettingDiv(day, true);
                container.appendChild(dayDiv);
            }
        }

        // 曜日設定DIVを作成
        function createDaySettingDiv(day, isRecurring) {
            const schedule = weeklySchedule[day];
            const dayDiv = document.createElement('div');
            dayDiv.className = 'day-setting';
            
            const headerClass = day === 0 ? 'sunday' : day === 6 ? 'saturday' : '';
            
            dayDiv.innerHTML = `
                <div class="day-setting-header ${headerClass}">
                    <span>${dayNamesLong[day]}</span>
                    <div class="day-toggle ${schedule.enabled ? 'active' : ''}" onclick="toggleDay(${day}, ${isRecurring})"></div>
            </div>
                <div class="time-slots-container" style="display: ${schedule.enabled ? 'block' : 'none'};">
                    <div id="timeSlots-${day}-${isRecurring}" class="time-slots">
                        ${renderTimeSlots(day, schedule.times)}
            </div>
                    <button class="add-time-btn" onclick="addTimeSlot(${day}, ${isRecurring})">
                        + 時間帯を追加
              </button>
        </div>
      `;
            
            return dayDiv;
        }

        // 時間スロットを描画
        function renderTimeSlots(day, times) {
            return times.map((time, index) => `
                <div class="time-slot-input">
                    <input type="time" class="time-input" value="${time.start}" 
                           onchange="updateTimeSlot(${day}, ${index}, 'start', this.value)">
                    <span>〜</span>
                    <input type="time" class="time-input" value="${time.end}"
                           onchange="updateTimeSlot(${day}, ${index}, 'end', this.value)">
                    <button class="btn btn-danger btn-sm" onclick="removeTimeSlot(${day}, ${index})">削除</button>
                </div>
            `).join('');
        }

        // 曜日の有効/無効を切り替え
        function toggleDay(day, isRecurring) {
            weeklySchedule[day].enabled = !weeklySchedule[day].enabled;
            
            const toggle = document.querySelector(`[onclick="toggleDay(${day}, ${isRecurring})"]`);
            const container = toggle.parentElement.nextElementSibling;
            
            if (weeklySchedule[day].enabled) {
                toggle.classList.add('active');
                container.style.display = 'block';
                
                // 時間スロットがない場合は追加
                if (weeklySchedule[day].times.length === 0) {
                    weeklySchedule[day].times.push({ start: '09:00', end: '18:00' });
                    renderTimeSlots(day, weeklySchedule[day].times);
                }
  } else {
                toggle.classList.remove('active');
                container.style.display = 'none';
            }
        }

        // 時間スロットを追加
        function addTimeSlot(day, isRecurring) {
            weeklySchedule[day].times.push({ start: '09:00', end: '18:00' });
            
            const container = document.getElementById(`timeSlots-${day}-${isRecurring}`);
            container.innerHTML = renderTimeSlots(day, weeklySchedule[day].times);
        }

        // 時間スロットを削除
        function removeTimeSlot(day, index) {
            weeklySchedule[day].times.splice(index, 1);
            
            // 現在表示されているタブに応じてコンテナを更新
            const isRecurringTab = document.getElementById('recurring-tab').classList.contains('active');
            const container = document.getElementById(`timeSlots-${day}-${isRecurringTab}`);
            container.innerHTML = renderTimeSlots(day, weeklySchedule[day].times);
        }

        // 時間スロットを更新
        function updateTimeSlot(day, index, field, value) {
            weeklySchedule[day].times[index][field] = value;
        }

        // 設定を保存
        function saveSettings() {
            // 設定を保存（実際のアプリケーションではサーバーに送信）
            console.log('設定を保存:', weeklySchedule);
            
            // 表示を更新
            renderWeekView();
            closeSettingsModal();
            
            // 保存完了メッセージ
            showMessage('設定が保存されました', 'success');
        }

        // 前週へ
        function previousWeek() {
            currentWeekStart.setDate(currentWeekStart.getDate() - 7);
            renderWeekView();
        }

        // 次週へ
        function nextWeek() {
            currentWeekStart.setDate(currentWeekStart.getDate() + 7);
            renderWeekView();
        }

        // 日付をフォーマット（短縮版）
        function formatDateShort(date) {
            return `${date.getMonth() + 1}月${date.getDate()}日`;
        }

        // 日付キーをフォーマット
        function formatDateKey(date) {
            return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
        }

        // メッセージ表示
        function showMessage(message, type = 'info') {
            const messageDiv = document.createElement('div');
            messageDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 2000;
                padding: 12px 20px;
                border-radius: 6px;
                color: white;
                font-weight: 500;
                animation: slideInRight 0.3s ease;
                background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff'};
            `;
            messageDiv.textContent = message;
            
            document.body.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => document.body.removeChild(messageDiv), 300);
            }, 3000);
        }

        // モーダルの外側クリックで閉じる
        window.onclick = function(event) {
            const modal = document.getElementById('settingsModal');
            if (event.target === modal) {
                closeSettingsModal();
            }
            
            // ミニカレンダーの外側クリックで閉じる
            const miniCalendar = document.getElementById('miniCalendar');
            const miniCalendarContainer = document.querySelector('.mini-calendar-container');
            if (miniCalendar && !miniCalendarContainer.contains(event.target)) {
                miniCalendar.classList.remove('show');
            }
        }

        // ミニカレンダー関連の関数
        function toggleMiniCalendar() {
            const miniCalendar = document.getElementById('miniCalendar');
            miniCalendar.classList.toggle('show');
        }

        function renderMiniCalendar() {
            const year = miniCalendarMonth.getFullYear();
            const month = miniCalendarMonth.getMonth();
            
            // タイトルを更新
            document.getElementById('miniCalendarTitle').textContent = 
                `${year}年 ${monthNames[month]}`;
            
            // 月の最初の日と最後の日を取得
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            
            // 最初の週の開始日を取得（日曜日から）
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            // 最後の週の終了日を取得（土曜日まで）
            const endDate = new Date(lastDay);
            endDate.setDate(endDate.getDate() + (6 - lastDay.getDay()));
            
            const daysContainer = document.getElementById('miniCalendarDays');
            daysContainer.innerHTML = '';
            
            // カレンダーの日付セルを生成
            const current = new Date(startDate);
            while (current <= endDate) {
                const dayDiv = document.createElement('div');
                dayDiv.className = 'mini-calendar-day';
                dayDiv.textContent = current.getDate();
                
                // 今月以外の日付
                if (current.getMonth() !== month) {
                    dayDiv.classList.add('other-month');
                }
                
                // 今日の日付
                const today = new Date();
                if (current.toDateString() === today.toDateString()) {
                    dayDiv.classList.add('today');
                }
                
                // 現在選択されている週の開始日
                if (current.getFullYear() === currentWeekStart.getFullYear() && 
                    current.getMonth() === currentWeekStart.getMonth() && 
                    current.getDate() === currentWeekStart.getDate()) {
                    dayDiv.classList.add('week-start');
                }
                
                // クリックイベント
                dayDiv.addEventListener('click', () => {
                    selectWeekFromDate(current);
                });
                
                daysContainer.appendChild(dayDiv);
                current.setDate(current.getDate() + 1);
            }
        }

        function selectWeekFromDate(date) {
            console.log('Selected date:', date);
            console.log('Selected date day of week:', date.getDay());
            console.log('Selected date month:', date.getMonth());
            
            // 指定された日付が含まれる週の開始日（日曜日）を計算
            const dayOfWeek = date.getDay();
            const targetDate = date.getDate() - dayOfWeek;
            
            console.log('Target date calculation:', date.getDate(), '-', dayOfWeek, '=', targetDate);
            
            // Create a new date object for the week start
            const weekStart = new Date();
            weekStart.setFullYear(date.getFullYear());
            weekStart.setMonth(date.getMonth());
            weekStart.setDate(targetDate);
            weekStart.setHours(0, 0, 0, 0);
            
            console.log('Calculated week start:', weekStart);
            console.log('Week start month:', weekStart.getMonth());
            
            // 週を更新
            currentWeekStart = weekStart;
            
            // 表示を更新
            renderWeekView();
            
            // ミニカレンダーを閉じる
            document.getElementById('miniCalendar').classList.remove('show');
            
            // ミニカレンダーを再描画（選択状態を更新）
            renderMiniCalendar();
        }

        function previousMiniCalendarMonth() {
            miniCalendarMonth.setMonth(miniCalendarMonth.getMonth() - 1);
            renderMiniCalendar();
        }

        function nextMiniCalendarMonth() {
            miniCalendarMonth.setMonth(miniCalendarMonth.getMonth() + 1);
            renderMiniCalendar();
        }

        // 初期化実行
        init();
    </script>

    <!-- アニメーション用CSS -->
    <style>
        @keyframes slideInRight {
            from { transform: translateX(300px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes slideOutRight {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(300px); opacity: 0; }
        }
    </style>
</body>
</html> 