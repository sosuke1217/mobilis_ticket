<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= form_authenticity_token %>">
    <title>予約管理システム</title>
    <%= stylesheet_link_tag 'calendar', media: 'all' %>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📅 予約管理システム</h1>
            <div class="header-controls">
                <div class="week-nav">
                    <button class="nav-btn" onclick="previousWeek()">← 前週</button>
                    <div class="current-week" id="currentWeek">2025年 8月10日 - 8月16日</div>
                    <button class="nav-btn" onclick="nextWeek()">次週 →</button>
                </div>
                <div class="mini-calendar-container">
                    <button class="mini-calendar-btn" onclick="toggleMiniCalendar()">
                        📅 週を選択
                    </button>
                    <div class="mini-calendar" id="miniCalendar">
                        <div class="mini-calendar-header">
                            <button class="mini-calendar-year-btn" onclick="previousMiniCalendarYear()" title="前年">‹‹</button>
                            <button class="mini-calendar-nav-btn" onclick="previousMiniCalendarMonth()" title="前月">‹</button>
                            <div class="mini-calendar-title" id="miniCalendarTitle">2025年 8月</div>
                            <button class="mini-calendar-nav-btn" onclick="nextMiniCalendarMonth()" title="翌月">›</button>
                            <button class="mini-calendar-year-btn" onclick="nextMiniCalendarYear()" title="翌年">››</button>
                        </div>
                        <div class="mini-calendar-weekdays">
                            <div class="mini-calendar-weekday">日</div>
                            <div class="mini-calendar-weekday">月</div>
                            <div class="mini-calendar-weekday">火</div>
                            <div class="mini-calendar-weekday">水</div>
                            <div class="mini-calendar-weekday">木</div>
                            <div class="mini-calendar-weekday">金</div>
                            <div class="mini-calendar-weekday">土</div>
                        </div>
                        <div class="mini-calendar-days" id="miniCalendarDays">
                            <!-- 動的に生成される -->
                        </div>
                    </div>
                </div>
                <button id="showCancellationsBtn" onclick="toggleCancellationDisplay()" class="cancellation-btn">
                    ❌ キャンセル履歴 (<span id="cancellation-count">0</span>)
                </button>
                <button class="settings-btn" onclick="openSettingsModal()">
                    ⚙️ 予約可能日時を編集
                </button>
            </div>
        </div>
        
        <div id="cancellation-display" class="cancellation-display" style="display: none;">
            <div class="cancellation-header">
                <h3>❌ キャンセルされた予約</h3>
                <button onclick="clearCancellationDisplay()" class="clear-btn">クリア</button>
            </div>
            <div id="cancellation-list" class="cancellation-list">
                <!-- キャンセルされた予約がここに表示されます -->
            </div>
        </div>

        <div class="schedule-container">
            <div class="schedule-header">
                <div class="time-column-header">時刻</div>
                <div class="day-header sunday">日<br><span style="font-size: 12px;">8/10</span></div>
                <div class="day-header">月<br><span style="font-size: 12px;">8/11</span></div>
                <div class="day-header">火<br><span style="font-size: 12px;">8/12</span></div>
                <div class="day-header">水<br><span style="font-size: 12px;">8/13</span></div>
                <div class="day-header">木<br><span style="font-size: 12px;">8/14</span></div>
                <div class="day-header">金<br><span style="font-size: 12px;">8/15</span></div>
                <div class="day-header saturday">土<br><span style="font-size: 12px;">8/16</span></div>
            </div>
            
            <div class="schedule-body" id="scheduleBody">
                <!-- 時間スロットは動的に生成される -->
            </div>
        </div>
    </div>

    <!-- 設定モーダル -->
    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>⚙️ 予約可能日時を編集</h2>
                <span class="close" onclick="closeSettingsModal()">&times;</span>
            </div>
            <div class="modal-body">
                <div class="settings-tabs">
                    <button class="tab-button active" onclick="switchTab('general')">一回限りの変更</button>
                    <button class="tab-button" onclick="switchTab('recurring')">定期的なスケジュール</button>
                </div>

                <!-- 一回限りの変更タブ -->
                <div id="general-tab" class="tab-content active">
                    <div id="week-info" style="margin-bottom: 20px; padding: 12px; background: #f8f9fa; border-radius: 6px; border-left: 4px solid #007bff;">
                        <strong>現在の週:</strong> <span id="current-week-display"></span>
                        <br><small id="schedule-type-info" style="color: #666;"></small>
                    </div>
                    
                    <div id="daySettings">
                        <!-- 曜日別設定が動的に生成される -->
      </div>
    </div>

                <!-- 定期的なスケジュールタブ -->
                <div id="recurring-tab" class="tab-content">
                    <p style="margin-bottom: 20px; color: #666;">今後の週に適用するデフォルトスケジュールを設定</p>
                    
                    <div id="recurringDaySettings">
                        <!-- 定期的な設定が動的に生成される -->
        </div>
        </div>
        </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeSettingsModal()">キャンセル</button>
                <button class="btn btn-success" onclick="saveSettings()">完了</button>
          </div>
        </div>
        </div>

    <!-- 予約作成モーダル -->
    <div id="bookingModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>📅 新規予約作成</h2>
                <span class="close" onclick="closeBookingModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="bookingForm">
                    <div class="form-group mb-3">
                        <label for="bookingDate" class="form-label">予約日時</label>
                        <input type="text" id="bookingDate" class="form-control" readonly>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="bookingTime" class="form-label">開始時間</label>
                        <input type="text" id="bookingTime" class="form-control" readonly>
      </div>
                    
                    <div class="form-group mb-3">
                        <label for="bookingDuration" class="form-label">コース選択</label>
                        <select id="bookingDuration" class="form-select" required>
                            <option value="">コースを選択してください</option>
                            <option value="40">40分コース</option>
                            <option value="60">60分コース</option>
                            <option value="80">80分コース</option>
                        </select>
    </div>
                    
                    <div class="form-group mb-3">
                        <label for="customerName" class="form-label">お客様名</label>
                        <div class="position-relative">
                            <input type="text" id="customerName" class="form-control" required placeholder="山田太郎" autocomplete="off">
                            <div id="userSearchResults" class="user-search-results" style="display: none;"></div>
                        </div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="customerPhone" class="form-label">電話番号</label>
                        <input type="tel" id="customerPhone" class="form-control" required placeholder="090-1234-5678">
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="customerEmail" class="form-label">メールアドレス</label>
                        <input type="email" id="customerEmail" class="form-control" placeholder="example@email.com">
        </div>
                    
                    <div class="form-group mb-3">
                        <label for="bookingNote" class="form-label">備考</label>
                        <textarea id="bookingNote" class="form-control" rows="3" placeholder="ご要望やご質問があればご記入ください"></textarea>
        </div>
                    
                    <div class="form-group mb-3">
                        <label for="bookingStatus" class="form-label">予約ステータス</label>
                        <select id="bookingStatus" class="form-select">
                            <option value="tentative">仮予約</option>
                            <option value="confirmed">確定</option>
                        </select>
        </div>
                </form>
          </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeBookingModal()">キャンセル</button>
                <button class="btn btn-success" onclick="createBooking()">予約作成</button>
        </div>
        </div>
      </div>

    <!-- 予約詳細モーダル -->
    <div id="reservationDetailModal" class="modal">
        <div class="modal-content">
            <div class="modal-body" id="reservationDetailContent">
                <span class="close" onclick="closeReservationDetailModal()">&times;</span>
                <!-- 動的に生成される -->
            </div>
            <div class="modal-footer">
                                 <button type="submit" class="btn btn-primary" form="reservationEditForm" onclick="console.log('💾 Save button clicked')">保存</button>
                 <button type="button" class="btn btn-warning" onclick="cancelReservation()">キャンセル</button>
                 <button type="button" class="btn btn-danger" onclick="deleteReservation()">削除</button>
                 <button type="button" class="btn btn-secondary" onclick="closeReservationDetailModal()">閉じる</button>
            </div>
        </div>
    </div>



    <!-- ユーザー選択モーダル -->
    <div id="userSelectionModal" class="modal">
        <div class="modal-content">
            <div class="modal-body">
                <span class="close" onclick="closeUserSelectionModal()">&times;</span>
                <h3>お客様の変更</h3>
                <div class="user-selection-settings">
                    <div class="form-group">
                        <label for="userSearchInput" class="form-label">お客様を検索してください</label>
                        <input type="text" id="userSearchInput" class="form-control" placeholder="お客様名を入力してください..." autocomplete="off">
                    </div>
                    <div class="user-search-results" id="userSelectionSearchResults">
                        <!-- 検索結果がここに表示されます -->
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" onclick="closeUserSelectionModal()">キャンセル</button>
                        <button class="btn btn-primary" onclick="return saveUserSelection()" id="saveUserBtn" disabled>変更</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentWeekStart = new Date(2025, 7, 10); // 2025年8月10日（日曜日）
        let weeklySchedules = {}; // 週別スケジュール（週のキーで保存）
        let defaultSchedule = {}; // デフォルトスケジュール
        let reservations = {}; // 予約データ
        let miniCalendarMonth = new Date(2025, 7, 1); // ミニカレンダーの表示月（8月）
        let clickedDate = null; // クリックされた日付
        let currentReservation = null; // 現在表示中の予約
        let searchTimeout = null; // 検索のデバウンス用
        let isEditingReservation = false; // 予約編集モードフラグ
        let reservationToEdit = null; // 編集対象の予約データ
        let cancelledReservations = []; // キャンセルされた予約のリスト
        let cancellationDisplayReady = false; // キャンセル表示の準備完了フラグ
        let domReady = false; // DOMの準備完了フラグ

        // ローカルストレージからキャンセル履歴を読み込み
        function loadCancelledReservations() {
            try {
                const stored = localStorage.getItem('cancelledReservations');
                if (stored) {
                    cancelledReservations = JSON.parse(stored);
        
                }
            } catch (error) {
                console.error('❌ Error loading cancelled reservations:', error);
                cancelledReservations = [];
            }
        }

        // ローカルストレージにキャンセル履歴を保存
        function saveCancelledReservations() {
            try {
                localStorage.setItem('cancelledReservations', JSON.stringify(cancelledReservations));
    
            } catch (error) {
                console.error('❌ Error saving cancelled reservations:', error);
            }
        }
        
        // バックエンドから予約データを読み込み
        <% if @reservations.present? %>
            console.log('🔄 Loading server-side reservations:', <%= @reservations.count %>);
            <% @reservations.each do |reservation| %>
                (function() {
                    const reservationDateKey = '<%= reservation.start_time.strftime('%Y-%m-%d') %>';
                    if (!reservations[reservationDateKey]) {
                        reservations[reservationDateKey] = [];
                    }
                    const reservationData = {
                        id: <%= reservation.id %>,
                        time: '<%= reservation.start_time.strftime('%H:%M') %>',
                        duration: <%= extract_course_duration(reservation.course) %>,
                        customer: '<%= j(reservation.name || reservation.user&.name || '未設定') %>',
                        phone: '<%= j(reservation.user&.phone_number || '') %>',
                        email: '<%= j(reservation.user&.email || '') %>',
                        note: '<%= j(reservation.note || '') %>',
                        status: '<%= reservation.status %>',
                        createdAt: '<%= reservation.created_at.iso8601 %>',
                        updatedAt: '<%= reservation.updated_at.iso8601 %>',
                        userId: <%= reservation.user_id || 'null' %>,
                        effective_interval_minutes: <%= reservation.effective_interval_minutes || 0 %>,
                        individual_interval_minutes: <%= reservation.individual_interval_minutes || 'null' %>
                    };
                    reservations[reservationDateKey].push(reservationData);
                    console.log('📅 Server-side reservation loaded:', {
                        date: reservationDateKey,
                        id: reservationData.id,
                        userId: reservationData.userId,
                        customer: reservationData.customer,
                        createdAt: reservationData.createdAt,
                        updatedAt: reservationData.updatedAt,
                        effective_interval_minutes: reservationData.effective_interval_minutes,
                        individual_interval_minutes: reservationData.individual_interval_minutes
                    });
                })();
            <% end %>
        <% else %>
            console.log('ℹ️ No server-side reservations found');
        <% end %>
        
        // 曜日の名前
        const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
        const dayNamesLong = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'];
        
        // 月の名前
        const monthNames = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];
        
        // 初期化
        function init() {
            // モーダル外クリックで閉じる機能を設定
            setupModalClickOutside();
            
            Promise.all([
                loadShiftSettingsFromBackend(),
                loadReservationsFromBackend()
            ]).then(() => {
                renderWeekView();
                renderDaySettings();
                renderMiniCalendar();
                showDragHint();
            });
        }

        // ドラッグヒントを表示
        function showDragHint() {
            // ヒント要素を作成
            const hint = document.createElement('div');
            hint.className = 'drag-hint';
            hint.textContent = '💡 予約をドラッグして時間を変更できます';
            document.body.appendChild(hint);
            
            // 3秒後に表示
            setTimeout(() => {
                hint.classList.add('show');
            }, 1000);
            
            // 5秒後に非表示
            setTimeout(() => {
                hint.classList.remove('show');
                setTimeout(() => {
                    if (hint.parentNode) {
                        hint.parentNode.removeChild(hint);
                    }
                }, 300);
            }, 5000);
        }

        // 各フィールドの変更時に保存を実行
        function updateCalendarOnStatusChange() {
            console.log('🔄 Status changed - triggering save');
            saveReservationChanges({preventDefault: () => {}});
        }

        function updateCalendarOnCourseChange() {
            console.log('🔄 Course changed - triggering save');
            saveReservationChanges({preventDefault: () => {}});
        }

        // ユーザー検索結果表示関数
        function displayUserSearchResultsForModal(users) {
            console.log('🔍 displayUserSearchResultsForModal called with users:', users);
            const resultsContainer = document.getElementById('userSelectionSearchResults');
            
            if (!users || users.length === 0) {
                resultsContainer.innerHTML = '<div class="no-results">該当するお客様が見つかりません</div>';
                resultsContainer.style.display = 'block';
                return;
            }
            
            const resultsHTML = users.map(user => `
                <div class="user-result-item" onclick="selectUserForModal({userId: ${user.id}, name: '${user.name}', phone: '${user.phone_number}', email: '${user.email}'})">
                    <div class="user-name">${user.name}</div>
                    <div class="user-details">${user.phone_number} | ${user.email}</div>
                </div>
            `).join('');
            
            resultsContainer.innerHTML = resultsHTML;
            resultsContainer.style.display = 'block';
            console.log('🔍 Search results displayed:', users.length, 'users');
        }

        // ユーザー選択関数
        function selectUserForModal(userData) {
            console.log('🔍 selectUserForModal called with:', userData);
            
            // Set the global selectedUser that the existing saveUserSelection function expects
            window.selectedUser = {
                id: userData.userId,
                name: userData.name,
                phone_number: userData.phone,
                email: userData.email
            };
            
            console.log('✅ Set window.selectedUser:', window.selectedUser);
            
            // Hide search results and enable save button
            hideUserSearchResults();
            document.getElementById('saveUserBtn').disabled = false;
        }

        // ユーザー検索結果を隠す関数
        function hideUserSearchResults() {
            console.log('🔍 hideUserSearchResults called');
            const resultsContainer = document.getElementById('userSelectionSearchResults');
            resultsContainer.style.display = 'none';
            resultsContainer.innerHTML = '';
            console.log('🔍 Search results hidden and cleared');
        }

        // ユーザー検索とモーダル管理関数
        function openUserSelectionModal() {
            console.log('🔍 openUserSelectionModal called');
            const modal = document.getElementById('userSelectionModal');
            const searchInput = document.getElementById('userSearchInput');
            const searchResults = document.getElementById('userSelectionSearchResults');
            
            console.log('🔍 Search input found and cleared');
            if (searchInput) {
                searchInput.value = '';
                searchInput.focus();
            }
            
            console.log('🔍 Search results cleared and hidden');
            if (searchResults) {
                searchResults.innerHTML = '';
                searchResults.style.display = 'none';
            }
            
            // Reset selected user
            window.selectedUser = null;
            document.getElementById('saveUserBtn').disabled = true;
            
            // Add input event listener for search
            if (searchInput && !searchInput.hasAttribute('data-listener-added')) {
                console.log('🔍 Input event listener added');
                searchInput.addEventListener('input', function(e) {
                    handleUserSearch(e.target.value);
                });
                searchInput.setAttribute('data-listener-added', 'true');
            }
            
            // Show modal
            modal.style.display = 'block';
            console.log('🔍 Modal displayed');
        }

        function handleUserSearch(query) {
            console.log('🔍 handleUserSearch called with query:', query);
            
            if (query.length < 2) {
                console.log('🔍 Query too short, hiding results');
                hideUserSearchResults();
                return;
            }
            
            console.log('🔍 Setting timeout for search');
            clearTimeout(window.searchTimeout);
            window.searchTimeout = setTimeout(() => {
                console.log('🔍 Calling searchUsersForModal with:', query);
                searchUsersForModal(query);
            }, 300);
        }

        function searchUsersForModal(query) {
            console.log('🔍 searchUsersForModal called with query:', query);
            
            fetch(`/admin/users/search?q=${encodeURIComponent(query)}`)
                .then(response => {
                    console.log('🔍 Search response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('🔍 Search response data:', data);
                    if (data.success) {
                        displayUserSearchResultsForModal(data.users);
                    }
                })
                .catch(error => {
                    console.error('❌ Search error:', error);
                });
        }

        // 予約変更を保存
        function saveReservationChanges(event) {
            if (event && event.preventDefault) {
                event.preventDefault();
            }
            
            if (!currentReservation) {
                showMessage('予約データが見つかりません。', 'error');
                return false;
            }

            // フォームデータを取得
            const courseSelect = document.getElementById('edit-course');
            const statusSelect = document.getElementById('edit-status');
            const noteTextarea = document.getElementById('edit-note');
            
            console.log('📝 Form elements found:', {
                courseSelect: courseSelect ? 'found' : 'not found',
                statusSelect: statusSelect ? 'found' : 'not found',
                noteTextarea: noteTextarea ? 'found' : 'not found'
            });
            
            const newCourse = courseSelect ? courseSelect.value : `${currentReservation.duration}分`;
            const newDuration = extractDurationFromCourse(newCourse);
            const currentInterval = currentReservation.effective_interval_minutes ?? 10;
            
            // 営業時間内に収まるかチェック - use proper validation object like other functions
            let reservationDate = currentReservation.date;
            if (!reservationDate) {
                // Fallback: search reservations object for this reservation's date
                console.log('🔍 Save validation fallback: searching reservations object for reservation ID:', currentReservation.id);
                for (const [dateKey, dayReservations] of Object.entries(reservations)) {
                    const foundReservation = dayReservations.find(r => r.id === currentReservation.id);
                    if (foundReservation) {
                        reservationDate = dateKey;
                        console.log('🟩 Found reservation date in save validation fallback:', reservationDate);
                        break;
                    }
                }
            }
            
            const validationReservation = {
                ...currentReservation,
                date: reservationDate,
                time: currentReservation.time || currentReservation.startTime
            };
            
            console.log('🔍 Save validation reservation object:', validationReservation);
            
            const businessHoursValidation = validateReservationTimeWithinBusinessHours(validationReservation, newDuration, currentInterval);
            if (!businessHoursValidation.valid) {
                showMessage(businessHoursValidation.message, 'error');
                return;
            }
            
            // 重複チェック
            const overlapValidation = validateReservationOverlap(validationReservation, newDuration, currentInterval, currentReservation.id);
            if (!overlapValidation.valid) {
                showMessage(overlapValidation.message, 'error');
                return;
            }
            
            const formData = {
                reservation: {
                    course: newCourse,
                    status: statusSelect ? statusSelect.value : currentReservation.status,
                    note: noteTextarea ? noteTextarea.value : currentReservation.note || ''
                }
            };
            
            // ユーザーIDを送信
            if (currentReservation.userId) {
                formData.reservation.user_id = currentReservation.userId;
            }

            // バックエンドに更新リクエストを送信
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            fetch(`/admin/reservations/${currentReservation.id}/update_booking`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify(formData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.message || 'Unknown error'}`);
                    }).catch(() => {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // ユーザー変更検出のために元のユーザーIDを保存
                    const originalUserId = currentReservation.userId;
                    
                    // ローカルデータを更新
                    const reservationData = data.reservation;
                    const updatedReservation = {
                        ...currentReservation,
                        customer: reservationData.name || reservationData.user?.name || '未設定',
                        phone: reservationData.user?.phone_number || '',
                        email: reservationData.user?.email || '',
                        duration: extractDurationFromCourse(reservationData.course),
                        status: reservationData.status,
                        note: reservationData.note || '',
                        updatedAt: reservationData.updated_at,
                        userId: window.currentUserId || currentReservation.userId // 新しいユーザーIDを設定
                    };
                    
                    // グローバルreservationsオブジェクトを更新
                    const reservationDateKey = formatDateKey(new Date(currentReservation.start_time || currentReservation.time));
                    if (reservations[reservationDateKey]) {
                        const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                        if (reservationIndex !== -1) {
                            reservations[reservationDateKey][reservationIndex] = updatedReservation;
                        }
                    }
                    
                    // currentReservationを更新
                    currentReservation = updatedReservation;
                    
                    // モーダル内の変更日時を更新
                    let updateTimestamp = reservationData.updated_at;
                    if (!updateTimestamp) {
                        // Backend doesn't provide updated_at, use current time
                        updateTimestamp = new Date().toISOString();
                        console.log('🔍 Backend missing updated_at, using current time:', updateTimestamp);
                    }
                    console.log('🔍 About to call updateModalUpdatedAt with:', updateTimestamp);
                    updateModalUpdatedAt(updateTimestamp);
                    
                    // ユーザーが変更された場合、モーダルのチケットと履歴を再読み込み
                    console.log('🔍 User change check:', {
                        windowCurrentUserId: window.currentUserId,
                        originalUserId: originalUserId,
                        updatedReservationCustomer: updatedReservation.customer,
                        isUserChanged: window.currentUserId && window.currentUserId !== originalUserId
                    });
                    
                    if (window.currentUserId && window.currentUserId !== originalUserId) {
                        console.log('🔄 User changed, reloading modal data for new user:', window.currentUserId);
                        
                        // モーダルの顧客名を更新
                        const customerNameElement = document.querySelector('.customer-name-large');
                        console.log('🔍 Customer name element found:', customerNameElement);
                        if (customerNameElement) {
                            console.log('🔄 Updating customer name from:', customerNameElement.textContent, 'to:', updatedReservation.customer);
                            customerNameElement.textContent = updatedReservation.customer;
                            console.log('🔄 Updated customer name display to:', updatedReservation.customer);
                        } else {
                            console.error('❌ Customer name element not found!');
                        }
                        
                        // チケット情報を再読み込み
                        loadTicketsForUser(window.currentUserId);
                        
                        // 履歴情報を再読み込み
                        loadReservationHistoryForUser(window.currentUserId);
                    } else {
                        console.log('🔍 No user change detected or window.currentUserId not set');
                    }
                    
                    // カレンダーを再描画
                    generateTimeSlots();
                    
                    showMessage('予約が更新されました。', 'success');
                    
                    // モーダルを開いたままにして変更内容を確認できるようにする
                    console.log('🔄 Keeping modal open to show updated information');
                    
                    // 短時間後にモーダルを閉じる（ユーザーが変更を確認できるように）
                    setTimeout(() => {
                        if (window.currentUserId && window.currentUserId !== originalUserId) {
                            console.log('🔄 User was changed, extended delay before closing modal');
                            // ユーザーが変更された場合はさらに長く待つ
                            setTimeout(() => {
                    closeReservationDetailModal();
                            }, 3000);
                        } else {
                            console.log('🔄 Normal delay before closing modal');
                            closeReservationDetailModal();
                        }
                    }, 1000);
                } else {
                    showMessage(`予約の更新に失敗しました: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error updating reservation:', error);
                showMessage('予約の更新中にエラーが発生しました。', 'error');
            });
            
            return false; // Prevent any form submission
        }

        // モーダル内の変更日時を即座に更新
        function updateModalUpdatedAt(updatedAt) {
            console.log('🔍 updateModalUpdatedAt called with:', updatedAt);
            
            const modal = document.getElementById('reservationDetailModal');
            console.log('🔍 Modal found:', modal ? 'yes' : 'no');
            if (!modal) {
                console.log('❌ Modal not found, cannot update change date');
                return;
            }
            
            const systemInfoSection = modal.querySelector('.system-info-section');
            console.log('🔍 System info section found:', systemInfoSection ? 'yes' : 'no');
            if (!systemInfoSection) {
                console.log('❌ System info section not found, cannot update change date');
                // Let's try to find what sections do exist
                const allSections = modal.querySelectorAll('div[class*="section"], div[class*="info"]');
                console.log('🔍 Available sections in modal:', Array.from(allSections).map(s => s.className));
                return;
            }
            
            // 既存の変更日時要素を削除
            const detailItems = systemInfoSection.querySelectorAll('.detail-item');
            detailItems.forEach(item => {
                const label = item.querySelector('.detail-label');
                if (label && label.textContent === '変更日時') {
                    item.remove();
                }
            });
            
            // 作成日時要素を取得
            let createdAtItem = null;
            detailItems.forEach(item => {
                const label = item.querySelector('.detail-label');
                if (label && label.textContent === '作成日時') {
                    createdAtItem = item;
                }
            });
            
            if (!createdAtItem) return;
            
            // 新しい変更日時要素を作成
            const updatedAtItem = document.createElement('div');
            updatedAtItem.className = 'detail-item';
            updatedAtItem.innerHTML = `
                <span class="detail-label">変更日時</span>
                <span class="detail-value">${new Date(updatedAt).toLocaleString('ja-JP')}</span>
            `;
            
            // 作成日時の後に挿入
            createdAtItem.insertAdjacentElement('afterend', updatedAtItem);
            console.log('✅ Successfully added change date/time to modal');
        }

        // Add event listener to course dropdown to update change time immediately
        document.addEventListener('DOMContentLoaded', function() {
            // Add event listener for course changes
            document.addEventListener('change', function(event) {
                if (event.target && event.target.id === 'edit-course') {
                    console.log('🔍 Course dropdown changed, updating change time');
                    const currentTime = new Date().toISOString();
                    updateModalUpdatedAt(currentTime);
                }
            });
        });

        // Fixed updateIntervalOnChange function for calendar.html.erb
        // Replace the existing updateIntervalOnChange function around line 703 with this version

        function updateIntervalOnChange() {
            if (!currentReservation) {
                showMessage('予約データが見つかりません。', 'error');
                return;
            }

            const newInterval = parseInt(document.getElementById('edit-interval').value);
            const currentDuration = currentReservation.duration || 60;
            
            console.log('🔍 updateIntervalOnChange called with:', {
                newInterval,
                currentDuration,
                currentReservation
            });
            
            console.log('🔍 DEBUG: Full currentReservation object:', JSON.stringify(currentReservation, null, 2));

            // Extract time and date from the current reservation - this is the key fix
            let startTime;
            let reservationDate;
            
            // Try multiple ways to get the start time
            if (currentReservation.time) {
                startTime = currentReservation.time;
            } else if (currentReservation.startTime) {
                startTime = currentReservation.startTime;
            } else {
                // Try to get from form fields as fallback
                startTime = document.getElementById('reservationTime')?.value;
            }
            
            // Try multiple ways to get the date
            if (currentReservation.date) {
                reservationDate = currentReservation.date;
            } else if (currentReservation.reservationDate) {
                reservationDate = currentReservation.reservationDate;
            } else {
                // Try to get from form fields as fallback
                reservationDate = document.getElementById('reservationDate')?.value;
            }
            
            // If we still don't have date, try to extract from any available datetime
            if (!reservationDate && currentReservation.start_time) {
                try {
                    const startDateTime = new Date(currentReservation.start_time);
                    const year = startDateTime.getFullYear();
                    const month = String(startDateTime.getMonth() + 1).padStart(2, '0');
                    const day = String(startDateTime.getDate()).padStart(2, '0');
                    reservationDate = `${year}-${month}-${day}`;
                } catch (e) {
                    console.error('❌ Error parsing start_time:', e);
                }
            }
            
            // Final fallback: search through reservations object to find the date key
            if (!reservationDate && currentReservation.id) {
                console.log('🔍 Final fallback: searching reservations object for reservation ID:', currentReservation.id);
                for (const dateKey of Object.keys(reservations)) {
                    const dayReservations = reservations[dateKey];
                    if (dayReservations && dayReservations.find(r => r.id === currentReservation.id)) {
                        reservationDate = dateKey;
                        console.log('🟩 Found reservation date in fallback:', dateKey);
                        break;
                    }
                }
            }
            
            console.log('🔍 Interval change attempt:', {
                newInterval,
                currentDuration,
                currentReservation,
                startTime,
                date: reservationDate,
                extractedStartTime: startTime,
                extractedDate: reservationDate
            });

            // Validation - ensure we have required data
            if (!startTime || !reservationDate) {
                console.error('❌ Missing required data for validation:', { startTime, reservationDate });
                showMessage('予約の時間・日付情報が取得できません', 'warning');
                return;
            }

            console.log('🔍 About to call business hours validation with:', {
                reservation: {
                    date: reservationDate,
                    time: startTime,
                    start_time: currentReservation.start_time
                },
                duration: currentDuration,
                interval: newInterval
            });

            // Create a properly structured reservation object for validation
            const validationReservation = {
                date: reservationDate,
                time: startTime,
                start_time: currentReservation.start_time
            };

            const validation = validateReservationTimeWithinBusinessHours(
                validationReservation,
                currentDuration,
                newInterval
            );

            console.log('🔍 Interval change business hours validation result:', validation);

            if (!validation.valid) {
                console.log('❌ Business hours validation failed, showing error and returning');
                showMessage(validation.message, 'error');
                // 元の値に戻す
                const intervalSelect = document.getElementById('edit-interval');
                intervalSelect.value = currentReservation.effective_interval_minutes ?? 10;
                return;
            }
            
            // 重複チェック
            console.log('🔍 About to call overlap validation with:', {
                reservation: validationReservation,
                duration: currentDuration,
                interval: newInterval
            });
            const overlapValidation = validateReservationOverlap(validationReservation, currentDuration, newInterval, currentReservation.id);
            console.log('🔍 Interval change overlap validation result:', overlapValidation);
            if (!overlapValidation.valid) {
                showMessage(overlapValidation.message, 'error');
                // 元の値に戻す
                const intervalSelect = document.getElementById('edit-interval');
                intervalSelect.value = currentReservation.effective_interval_minutes ?? 10;
                return;
            }

            console.log('✅ Interval change validation passed');

            const reservationId = currentReservation.id;

            // バックエンドに更新リクエストを送信
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            const requestBody = {
                reservation: {
                individual_interval_minutes: newInterval
                }
            };
            console.log('🔍 Sending interval update request:', {
                reservationId,
                newInterval,
                requestBody
            });
            
            fetch(`/admin/reservations/${reservationId}/update_interval`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify(requestBody)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('🔍 Backend response for interval update:', data);
                if (data.success) {
                    // ローカルデータを更新
                    currentReservation.effective_interval_minutes = newInterval;
                    currentReservation.individual_interval_minutes = newInterval;
                    console.log('🔍 Updated currentReservation:', currentReservation);
                    
                    // updatedAtフィールドを更新
                    let updateTimestamp = data.updated_at;
                    if (!updateTimestamp) {
                        // Backend doesn't provide updated_at, use current time
                        updateTimestamp = new Date().toISOString();
                        console.log('🔍 Interval update: Backend missing updated_at, using current time:', updateTimestamp);
                    }
                    currentReservation.updatedAt = updateTimestamp;
                    // モーダル内の変更日時を更新
                    console.log('🔍 Interval update: About to call updateModalUpdatedAt with:', updateTimestamp);
                    updateModalUpdatedAt(updateTimestamp);
                        
                                            // グローバルreservationsオブジェクトも更新
                    const reservationDateKey = currentReservation.date || formatDateKey(new Date(currentReservation.start_time || currentReservation.time));
                    if (reservations[reservationDateKey]) {
                        const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                        if (reservationIndex !== -1) {
                            reservations[reservationDateKey][reservationIndex].updatedAt = updateTimestamp;
                            reservations[reservationDateKey][reservationIndex].effective_interval_minutes = newInterval;
                            reservations[reservationDateKey][reservationIndex].individual_interval_minutes = newInterval;
                            console.log('🔍 Updated local reservation data:', reservations[reservationDateKey][reservationIndex]);
                        }
                    }
                    
                    // カレンダーを再描画
                    generateTimeSlots();
                    
                    showMessage('準備時間が更新されました。', 'success');
                } else {
                    showMessage(`準備時間の更新に失敗しました: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error updating interval:', error);
                showMessage('準備時間の更新中にエラーが発生しました。', 'error');
            });
        }

        // ステータス変更時にカレンダーを即座に更新
        function updateCalendarOnStatusChange() {
            if (!currentReservation) {
                return;
            }

            const newStatus = document.getElementById('edit-status').value;
            
            // ローカルデータを更新
            currentReservation.status = newStatus;
            
            // グローバルreservationsオブジェクトも更新
            const reservationDateKey = formatDateKey(new Date(currentReservation.start_time || currentReservation.time));
            if (reservations[reservationDateKey]) {
                const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                if (reservationIndex !== -1) {
                    reservations[reservationDateKey][reservationIndex].status = newStatus;
                }
            }
            
            // カレンダーを再描画
            generateTimeSlots();
        }

        // 予約時間が営業時間内に収まるかチェック
        // Also update the validateReservationTimeWithinBusinessHours function
        function validateReservationTimeWithinBusinessHours(reservation, newDuration, newInterval) {
            console.log('🔍 validateReservationTimeWithinBusinessHours called with:', {
                reservation,
                newDuration,
                newInterval
            });

            // Extract date - improved logic
            let dateToCheck = reservation.date;
            
            // If no date field, try to extract from start_time
            if (!dateToCheck && reservation.start_time) {
                try {
                    const startDateTime = new Date(reservation.start_time);
                    const year = startDateTime.getFullYear();
                    const month = String(startDateTime.getMonth() + 1).padStart(2, '0');
                    const day = String(startDateTime.getDate()).padStart(2, '0');
                    dateToCheck = `${year}-${month}-${day}`;
                } catch (e) {
                    console.error('❌ Error parsing start_time for date:', e);
                }
            }

            // Extract start time
            let startTime = reservation.time;
            if (!startTime && reservation.start_time) {
                try {
                    const startDateTime = new Date(reservation.start_time);
                    startTime = startDateTime.toTimeString().substring(0, 5);
                } catch (e) {
                    console.error('❌ Error parsing start_time for time:', e);
                }
            }
            
            console.log('🔍 Date calculation debug:', {
                start_time: reservation.start_time,
                date: reservation.date,
                dateKey: dateToCheck,
                reservationDate: reservation.start_time,
                extractedDate: dateToCheck,
                extractedStartTime: startTime
            });

            // Validation - check we have the required data
            if (!dateToCheck || !startTime) {
                console.error('❌ Missing date or time for validation:', { dateToCheck, startTime });
                return { valid: false, message: '予約の日時情報が不正です' };
            }

            // Calculate day of week correctly using the extracted date
            const reservationDate = new Date(dateToCheck + 'T00:00:00'); // Force local timezone interpretation
            const dayOfWeek = reservationDate.getDay(); // 0 = Sunday, 1 = Monday, etc.

            // Convert start time to minutes
            const [hours, minutes] = startTime.split(':').map(Number);
            const startTimeInMinutes = hours * 60 + minutes;
            const totalDuration = newDuration + newInterval;
            const endTimeInMinutes = startTimeInMinutes + totalDuration;
            
            const endHours = Math.floor(endTimeInMinutes / 60);
            const endMins = endTimeInMinutes % 60;
            const endTimeStr = `${String(endHours).padStart(2, '0')}:${String(endMins).padStart(2, '0')}`;
            
            console.log('🔍 Validation debug:', {
                startTime,
                startTimeInMinutes,
                totalDuration,
                endTimeInMinutes,
                endTimeStr,
                dayOfWeek,
                dayName: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek],
                dateToCheck,
                reservationDate: reservationDate.toDateString()
            });

            // Check using your existing custom schedule logic
            const customScheduleDate = '2025-08-10'; // Your reference date for custom schedule
            
            // Check start time is within business hours
            const isStartTimeValid = isBusinessHourForCustomSchedule(dayOfWeek, startTimeInMinutes, customScheduleDate);
            console.log('🔍 Business hours check for start time:', {
                dayOfWeek,
                startTime,
                startTimeInMinutes,
                isValid: isStartTimeValid
            });
            
            if (!isStartTimeValid) {
                const message = `予約開始時間が営業時間外（${startTime}）のため、この設定はできません。`;
                console.log('❌ Start time validation failed:', startTime, 'dayOfWeek:', dayOfWeek);
                return { valid: false, message };
            }
            
            // Check end time is within business hours - allow ending exactly at closing time
            const isEndTimeValid = isBusinessHourForEndTime(dayOfWeek, endTimeInMinutes, customScheduleDate);
            console.log('🔍 Business hours check for end time:', {
                dayOfWeek,
                endTimeStr,
                endTimeInMinutes,
                isValid: isEndTimeValid
            });
            
            if (!isEndTimeValid) {
                const message = `予約終了時間が営業時間外（${endTimeStr}）に及ぶため、この設定はできません。`;
                console.log('❌ End time validation failed:', endTimeStr, 'dayOfWeek:', dayOfWeek);
                return { valid: false, message };
            }
            
            console.log('✅ Validation passed');
            return { valid: true };
        }

        // 定期的なスケジュール変更が既存予約に与える影響をチェック（非同期で全予約をチェック）
        async function checkRecurringScheduleImpact(dayOfWeek, newStartTime, newEndTime) {
            const affectedReservations = [];
            
            console.log('🔍 Checking recurring schedule impact:', {
                dayOfWeek,
                newStartTime,
                newEndTime,
                dayName: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]
            });
            
            try {
                // バックエンドから該当曜日の全予約を取得
                const response = await fetch(`/admin/test/by_day_of_week?day_of_week=${dayOfWeek}&from_date=${new Date().toISOString().split('T')[0]}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                });
                
                if (response.ok) {
                    const allReservations = await response.json();
                    console.log(`🔍 Retrieved ${allReservations.length} future reservations for ${['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]}`);
                    
                    // 取得した予約をチェック
                    for (const reservation of allReservations) {
                        const reservationTime = reservation.time;
                        const duration = reservation.duration || 60;
                        const interval = reservation.effective_interval_minutes || 10;
                        
                        // 予約の開始時間と終了時間を計算
                        const [startHour, startMin] = reservationTime.split(':').map(Number);
                        const startTimeInMinutes = startHour * 60 + startMin;
                        const endTimeInMinutes = startTimeInMinutes + duration + interval;
                        
                        // 新しい営業時間と比較
                        const [newStartHour, newStartMin] = newStartTime.split(':').map(Number);
                        const [newEndHour, newEndMin] = newEndTime.split(':').map(Number);
                        const newStartInMinutes = newStartHour * 60 + newStartMin;
                        const newEndInMinutes = newEndHour * 60 + newEndMin;
                        
                        // 予約が新しい営業時間外になるかチェック
                        if (startTimeInMinutes < newStartInMinutes || endTimeInMinutes > newEndInMinutes) {
                            affectedReservations.push({
                                ...reservation,
                                endTime: `${Math.floor(endTimeInMinutes / 60).toString().padStart(2, '0')}:${(endTimeInMinutes % 60).toString().padStart(2, '0')}`
                            });
                            
                            console.log('⚠️ Found affected reservation:', {
                                id: reservation.id,
                                customer: reservation.customer,
                                date: reservation.date,
                                time: reservationTime,
                                duration,
                                interval,
                                calculatedEndTime: `${Math.floor(endTimeInMinutes / 60).toString().padStart(2, '0')}:${(endTimeInMinutes % 60).toString().padStart(2, '0')}`,
                                newBusinessHours: `${newStartTime} - ${newEndTime}`,
                                reason: startTimeInMinutes < newStartInMinutes ? 'starts before business hours' : 'ends after business hours'
                            });
                        }
                    }
                } else {
                    console.error('❌ Failed to fetch reservations for validation');
                    // フォールバック: 現在のreservationsオブジェクトのみチェック
                    return checkRecurringScheduleImpactLocal(dayOfWeek, newStartTime, newEndTime);
                }
            } catch (error) {
                console.error('❌ Error fetching reservations for validation:', error);
                // フォールバック: 現在のreservationsオブジェクトのみチェック
                return checkRecurringScheduleImpactLocal(dayOfWeek, newStartTime, newEndTime);
            }
            
            console.log(`🔍 Found ${affectedReservations.length} affected reservations for ${['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]}`);
            return affectedReservations;
        }

        // 現在の週の特定の曜日の予約をチェック
        function checkCurrentWeekReservationsForDay(dayOfWeek) {
            const affectedReservations = [];
            
            console.log('🔍 Checking current week reservations for day:', {
                dayOfWeek,
                dayName: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek],
                allReservationDates: Object.keys(reservations),
                currentWeekStart: currentWeekStart
            });
            
            // 現在の週の該当曜日の日付を計算
            const weekStart = new Date(currentWeekStart);
            const targetDate = new Date(weekStart);
            targetDate.setDate(weekStart.getDate() + dayOfWeek);
            
            // UTCではなくローカル日付を使用してタイムゾーンの問題を回避
            const year = targetDate.getFullYear();
            const month = String(targetDate.getMonth() + 1).padStart(2, '0');
            const day = String(targetDate.getDate()).padStart(2, '0');
            const dateKey = `${year}-${month}-${day}`;
            
            console.log('🔍 Checking for reservations on date:', dateKey);
            console.log('🔍 Date calculation details:', {
                weekStartStr: currentWeekStart,
                weekStartDateLocal: `${weekStart.getFullYear()}-${String(weekStart.getMonth() + 1).padStart(2, '0')}-${String(weekStart.getDate()).padStart(2, '0')}`,
                dayOfWeek,
                targetDateStr: dateKey,
                targetDateObj: targetDate,
                availableReservationDates: Object.keys(reservations)
            });
            
            // 該当日の予約をチェック
            if (reservations[dateKey]) {
                const dayReservations = reservations[dateKey];
                console.log(`🔍 Found ${dayReservations.length} reservations on ${dateKey}`);
                
                for (const reservation of dayReservations) {
                    affectedReservations.push({
                        id: reservation.id,
                        customer: reservation.customer || reservation.name || '未設定',
                        date: dateKey,
                        time: reservation.time || reservation.start_time?.split('T')[1]?.substring(0, 5) || '時間不明'
                    });
                }
            }
            
            console.log('🔍 Total affected reservations for day toggle:', affectedReservations.length);
            return affectedReservations;
        }

        // ローカルreservationsオブジェクトのみをチェックする関数（フォールバック）
        function checkRecurringScheduleImpactLocal(dayOfWeek, newStartTime, newEndTime) {
            const affectedReservations = [];
            
            // 現在表示中の予約のみをチェック（元のロジック）
            for (const [dateKey, dayReservations] of Object.entries(reservations)) {
                const date = new Date(dateKey + 'T00:00:00');
                const reservationDayOfWeek = date.getDay();
                
                if (reservationDayOfWeek === dayOfWeek) {
                    for (const reservation of dayReservations) {
                        const reservationTime = reservation.time;
                        const duration = reservation.duration || 60;
                        const interval = reservation.effective_interval_minutes || 10;
                        
                        const [startHour, startMin] = reservationTime.split(':').map(Number);
                        const startTimeInMinutes = startHour * 60 + startMin;
                        const endTimeInMinutes = startTimeInMinutes + duration + interval;
                        
                        const [newStartHour, newStartMin] = newStartTime.split(':').map(Number);
                        const [newEndHour, newEndMin] = newEndTime.split(':').map(Number);
                        const newStartInMinutes = newStartHour * 60 + newStartMin;
                        const newEndInMinutes = newEndHour * 60 + newEndMin;
                        
                        if (startTimeInMinutes < newStartInMinutes || endTimeInMinutes > newEndInMinutes) {
                            affectedReservations.push({
                                ...reservation,
                                date: dateKey,
                                endTime: `${Math.floor(endTimeInMinutes / 60).toString().padStart(2, '0')}:${(endTimeInMinutes % 60).toString().padStart(2, '0')}`
                            });
                        }
                    }
                }
            }
            
            return affectedReservations;
        }

        // Helper function that integrates with your existing custom schedule logic
        function isBusinessHourForCustomSchedule(dayOfWeek, timeInMinutes, customScheduleDate) {
            // Convert minutes back to time string for existing isBusinessHour function
            const hour = Math.floor(timeInMinutes / 60);
            const minute = timeInMinutes % 60;
            const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
            
            console.log('🔍 Checking business hour with existing function:', {
                dayOfWeek,
                timeStr,
                timeInMinutes
            });
            
            // Use your existing isBusinessHour function if available
            if (typeof isBusinessHour === 'function') {
                const result = isBusinessHour(dayOfWeek, timeStr);
                console.log('🔍 Existing isBusinessHour result:', result);
                return result;
            }
            
            // Fallback: basic business hours check
            console.log('🔍 Using fallback business hours (9:00-18:00)');
            const businessStart = 9 * 60;  // 9:00 in minutes  
            const businessEnd = 18 * 60;   // 18:00 in minutes
            
            // Sunday check
            if (dayOfWeek === 0) {
                return false; // Sunday closed
            }
            
            return timeInMinutes >= businessStart && timeInMinutes < businessEnd;
        }

        // Business hour check for end times - allows ending exactly at closing time
        function isBusinessHourForEndTime(dayOfWeek, timeInMinutes, customScheduleDate) {
            // Convert minutes back to time string for existing isBusinessHour function
            const hour = Math.floor(timeInMinutes / 60);
            const minute = timeInMinutes % 60;
            const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
            
            console.log('🔍 Checking business hour for END TIME with existing function:', {
                dayOfWeek,
                timeStr,
                timeInMinutes
            });
            
            // Use your existing isBusinessHour function if available
            if (typeof isBusinessHour === 'function') {
                // First check if it's within regular business hours
                const isWithinBusinessHours = isBusinessHour(dayOfWeek, timeStr);
                
                console.log('🔍 Existing isBusinessHour result for end time:', isWithinBusinessHours);
                
                // If within business hours, allow it
                if (isWithinBusinessHours) {
                    return true;
                }
                
                // If not within regular business hours, check common closing times
                // This is a simplified approach - check if it's exactly at common closing times
                const commonClosingTimes = [
                    17 * 60,  // 17:00
                    18 * 60,  // 18:00
                    19 * 60,  // 19:00
                    20 * 60,  // 20:00
                    21 * 60,  // 21:00
                    22 * 60   // 22:00
                ];
                
                const isAtClosingTime = commonClosingTimes.includes(timeInMinutes);
                console.log('🔍 Checking if end time is at common closing time:', {
                    endTimeInMinutes: timeInMinutes,
                    timeStr,
                    isAtClosingTime
                });
                
                if (isAtClosingTime) {
                    console.log('✅ End time is at common closing time - allowing');
                    return true;
                }
                
                return false;
            }
            
            // Fallback: basic business hours check with closing time allowance
            console.log('🔍 Using fallback business hours for end time (9:00-18:00, allowing 18:00)');
            const businessStart = 9 * 60;  // 9:00 in minutes  
            const businessEnd = 18 * 60;   // 18:00 in minutes
            
            // Sunday check
            if (dayOfWeek === 0) {
                return false; // Sunday closed
            }
            
            // Allow ending exactly at closing time (note: <= instead of <)
            return timeInMinutes >= businessStart && timeInMinutes <= businessEnd;
        }

        // 予約の重複チェック
        function validateReservationOverlap(reservation, newDuration, newInterval, excludeReservationId = null) {
            if (!reservation) return { valid: false, message: '予約データが見つかりません。' };
            
            // 予約の開始時間を取得
            let startTime;
            let dateKey;
            
            // 優先順位: start_time > dateKey > date > time
            if (reservation.start_time) {
                const dateTime = new Date(reservation.start_time);
                startTime = `${dateTime.getHours().toString().padStart(2, '0')}:${dateTime.getMinutes().toString().padStart(2, '0')}`;
                dateKey = formatDateKey(dateTime);
            } else if (reservation.dateKey) {
                startTime = reservation.time;
                dateKey = reservation.dateKey;
            } else if (reservation.date && reservation.time) {
                startTime = reservation.time;
                dateKey = reservation.date;
            } else if (reservation.time) {
                startTime = reservation.time;
                // 現在の週の開始日を使用
                const reservationDate = new Date(currentWeekStart);
                dateKey = formatDateKey(reservationDate);
            } else {
                return { valid: false, message: '予約の開始時間が見つかりません。' };
            }
            
            const [startHour, startMin] = startTime.split(':').map(Number);
            const startTimeInMinutes = startHour * 60 + startMin;
            const totalDuration = newDuration + newInterval;
            const endTimeInMinutes = startTimeInMinutes + totalDuration;
            
            // 指定日の予約を取得（自分以外）
            const dayReservations = reservations[dateKey] || [];
            
            console.log('🔍 Overlap validation debug:', {
                dateKey,
                startTime,
                startTimeInMinutes,
                totalDuration,
                endTimeInMinutes,
                reservationId: reservation.id,
                dayReservations: dayReservations.length,
                reservationData: {
                    start_time: reservation.start_time,
                    dateKey: reservation.dateKey,
                    date: reservation.date,
                    time: reservation.time
                }
            });
            
            // 重複チェック（インターバル時間も含む）
            for (const existingReservation of dayReservations) {
                if (existingReservation.id === reservation.id || existingReservation.id === excludeReservationId) {
                    console.log('⏭️ Skipping self or excluded reservation:', existingReservation.id);
                    continue; // 自分または除外対象は除外
                }
                
                const existingStart = new Date(`${dateKey}T${existingReservation.time}`);
                const existingEnd = new Date(existingStart.getTime() + existingReservation.duration * 60 * 1000);
                
                // 既存予約のインターバル時間を取得
                const existingIntervalMinutes = existingReservation.effective_interval_minutes ?? 10;
                const existingEndWithInterval = new Date(existingEnd.getTime() + existingIntervalMinutes * 60 * 1000);
                
                // 新しい予約の終了時間
                const newEnd = new Date(`${dateKey}T${startTime}`);
                newEnd.setMinutes(newEnd.getMinutes() + totalDuration);
                
                console.log('🔍 Comparing with existing reservation:', {
                    existingId: existingReservation.id,
                    existingTime: `${existingReservation.time} - ${new Date(existingEndWithInterval).toTimeString().slice(0, 5)}`,
                    newTime: `${startTime} - ${newEnd.toTimeString().slice(0, 5)}`,
                    existingInterval: existingIntervalMinutes,
                    newInterval: newInterval
                });
                
                // 重複判定（インターバル時間も含む）
                if (startTimeInMinutes < (existingEndWithInterval.getHours() * 60 + existingEndWithInterval.getMinutes()) && 
                    endTimeInMinutes > (existingStart.getHours() * 60 + existingStart.getMinutes())) {
                    console.log('🚫 Overlap detected with reservation:', existingReservation.id);
                    return { 
                        valid: false, 
                        message: `予約時間が既存の予約（${existingReservation.customer}様）と重複するため、この設定はできません。` 
                    };
                }
            }
            
            console.log('✅ No overlaps detected');
            return { valid: true, message: '' };
        }

        // コース変更時にカレンダーを即座に更新
        function updateCalendarOnCourseChange() {
            if (!currentReservation) return;
            
            const courseSelect = document.getElementById('edit-course');
            if (!courseSelect) return;
            
            const newCourse = courseSelect.value;
            const newDuration = parseInt(newCourse);
            const currentInterval = currentReservation.effective_interval_minutes ?? 10;
            
            console.log('🔄 Course changed to:', newCourse, 'Duration:', newDuration);
            
            // 営業時間内に収まるかチェック
            console.log('🔍 Validating course change for reservation:', currentReservation);
            
            // Extract proper date and time from reservation for validation (same logic as interval change)
            let startTime = currentReservation.time || currentReservation.startTime;
            let reservationDate = currentReservation.date || currentReservation.reservationDate;
            
            // Final fallback: search through reservations object to find the date key
            if (!reservationDate && currentReservation.id) {
                console.log('🔍 Course change fallback: searching reservations object for reservation ID:', currentReservation.id);
                for (const dateKey of Object.keys(reservations)) {
                    const dayReservations = reservations[dateKey];
                    if (dayReservations && dayReservations.find(r => r.id === currentReservation.id)) {
                        reservationDate = dateKey;
                        console.log('🟩 Found reservation date in course change fallback:', dateKey);
                        break;
                    }
                }
            }
            
            // Create properly structured reservation object for validation
            const validationReservation = {
                date: reservationDate,
                time: startTime,
                start_time: currentReservation.start_time
            };
            
            console.log('🔍 Course change validation reservation:', validationReservation);
            
            const businessHoursValidation = validateReservationTimeWithinBusinessHours(validationReservation, newDuration, currentInterval);
            console.log('🔍 Course change business hours validation result:', businessHoursValidation);
            if (!businessHoursValidation.valid) {
                showMessage(businessHoursValidation.message, 'error');
                // 元の値に戻す
                courseSelect.value = currentReservation.course || currentReservation.duration.toString();
                return;
            }
            
            // 重複チェック - use the same properly structured reservation object and exclude current reservation
            const overlapValidation = validateReservationOverlap(validationReservation, newDuration, currentInterval, currentReservation.id);
            console.log('🔍 Course change overlap validation result:', overlapValidation);
            if (!overlapValidation.valid) {
                showMessage(overlapValidation.message, 'error');
                // 元の値に戻す
                courseSelect.value = currentReservation.course || currentReservation.duration.toString();
                return;
            }
            
            // ローカルデータを即座に更新（警告があっても更新する）
            currentReservation.duration = newDuration;
            currentReservation.course = newCourse;
            
            // グローバルreservationsオブジェクトも更新 - use the correct date
            const reservationDateKey = reservationDate; // Use the date we already found
            if (reservations[reservationDateKey]) {
                const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                if (reservationIndex !== -1) {
                    reservations[reservationDateKey][reservationIndex].duration = newDuration;
                    reservations[reservationDateKey][reservationIndex].course = newCourse;
                }
            }
            
            // カレンダーを即座に再描画
            generateTimeSlots();
            
            console.log('✅ Calendar updated immediately for course change');
        }



        // ユーザー選択モーダルを開く
        function openUserSelectionModal() {
            console.log('🔍 openUserSelectionModal called');
            
            // 検索入力フィールドをクリア
            const searchInput = document.getElementById('userSearchInput');
            if (searchInput) {
                searchInput.value = '';
                console.log('🔍 Search input found and cleared');
            } else {
                console.error('❌ Search input not found');
            }
            
            // 検索結果をクリア
            const searchResults = document.getElementById('userSelectionSearchResults');
            if (searchResults) {
                searchResults.innerHTML = '';
                searchResults.style.display = 'none';
                console.log('🔍 Search results cleared and hidden');
            } else {
                console.error('❌ Search results container not found');
            }
            
            // 保存ボタンを無効化
            const saveBtn = document.getElementById('saveUserBtn');
            if (saveBtn) {
                saveBtn.disabled = true;
            }
            
            // イベントリスナーを設定
            if (searchInput) {
                // 既存のイベントリスナーを削除
                searchInput.removeEventListener('input', handleUserSearch);
                
                // 入力イベント
                searchInput.addEventListener('input', handleUserSearch);
                console.log('🔍 Input event listener added');
                
                // フォーカスアウト時に結果を隠す
                searchInput.addEventListener('blur', function() {
                    setTimeout(() => {
                        hideUserSearchResults();
                    }, 200);
                });
                
                // フォーカス時に結果を表示（入力がある場合）
                searchInput.addEventListener('focus', function() {
                    const query = this.value.trim();
                    if (query.length >= 2) {
                        searchUsersForModal(query);
                    }
                });
                
                searchInput.focus();
            }
            
            document.getElementById('userSelectionModal').style.display = 'block';
            console.log('🔍 Modal displayed');
            
            // Debug modal dimensions
            const modal = document.getElementById('userSelectionModal');
            const modalContent = modal.querySelector('.modal-content');
            console.log('🔍 Modal dimensions:', modal.offsetWidth, 'x', modal.offsetHeight);
            console.log('🔍 Modal content dimensions:', modalContent.offsetWidth, 'x', modalContent.offsetHeight);
        }

        // ユーザー検索を処理
        function handleUserSearch(event) {
            const query = event.target.value.trim();
            console.log('🔍 handleUserSearch called with query:', query);
            
            // デバウンス処理
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }
            
            if (query.length < 2) {
                console.log('🔍 Query too short, hiding results');
                hideUserSearchResults();
                return;
            }
            
            console.log('🔍 Setting timeout for search');
            searchTimeout = setTimeout(() => {
                console.log('🔍 Calling searchUsersForModal with:', query);
                searchUsersForModal(query);
            }, 300);
        }

        // モーダル用ユーザー検索
        function searchUsersForModal(query) {
            console.log('🔍 searchUsersForModal called with query:', query);
            fetch(`/admin/reservations/search_users?query=${encodeURIComponent(query)}`)
                .then(response => {
                    console.log('🔍 Search response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('🔍 Search response data:', data);
                    if (data.success) {
                        displayUserSearchResultsForModal(data.users);
                    } else {
                        console.error('❌ User search failed:', data.message);
                        hideUserSearchResults();
                    }
                })
                .catch(error => {
                    console.error('❌ Error searching users:', error);
                    hideUserSearchResults();
                });
        }

        // モーダル用検索結果表示
        function displayUserSearchResultsForModal(users) {
            console.log('🔍 displayUserSearchResultsForModal called with users:', users);
            const searchResults = document.getElementById('userSelectionSearchResults');
            if (!searchResults) {
                console.error('❌ Search results container not found');
                return;
            }
            
            if (users.length === 0) {
                searchResults.innerHTML = '<div class="user-search-item">該当するユーザーが見つかりません</div>';
                searchResults.style.display = 'block';
                console.log('🔍 No users found, showing message');
                return;
            }
            
            const resultsHtml = users.map(user => `
                <div class="user-search-item" onclick="selectUserForModal(${user.id}, '${user.name}', '${user.phone_number}', '${user.email}')">
                    <div class="user-name">${user.name}</div>
                    <div class="user-details">
                        📞 ${user.phone_number || '未設定'} | 📧 ${user.email || '未設定'}
                        ${user.active_tickets > 0 ? `<span class="user-tickets"> | 🎫 残${user.active_tickets}枚</span>` : ''}
                        ${user.last_visit !== 'なし' ? ` | 📅 最終来店: ${user.last_visit}` : ''}
                    </div>
                </div>
            `).join('');
            
            searchResults.innerHTML = resultsHtml;
            searchResults.style.display = 'block';
            
            // Let the container size naturally based on content
            searchResults.style.height = 'auto';
            
            // Force a reflow to ensure the browser recalculates dimensions
            searchResults.offsetHeight;
            
            console.log('🔍 Search results displayed:', users.length, 'users');
            

        }

        // モーダル用ユーザー選択
        function selectUserForModal(userId, name, phone, email) {
            console.log('🔍 selectUserForModal called with:', { userId, name, phone, email });
            console.log('🔍 Current reservation user ID:', currentReservation?.userId);
            
            // 選択されたユーザーを保存
            window.selectedUser = {
                id: userId,
                name: name,
                phone_number: phone,
                email: email
            };
            
            // 検索結果をクリアして選択されたユーザーを表示
            const searchResults = document.getElementById('userSelectionSearchResults');
            if (searchResults) {
                searchResults.innerHTML = `
                    <div class="selected-user">
                        <div class="user-info">
                            <div class="user-name">✅ ${name}</div>
                            <div class="user-details">
                                📞 ${phone || '未設定'} | 📧 ${email || '未設定'}
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // 保存ボタンを有効化
            const saveBtn = document.getElementById('saveUserBtn');
            if (saveBtn) {
                saveBtn.disabled = false;
            }
            

            
            // 成功メッセージ
            showMessage(`既存ユーザー「${name}」を選択しました`, 'success');
        }

        // ユーザー選択モーダルを閉じる
        function closeUserSelectionModal() {
            document.getElementById('userSelectionModal').style.display = 'none';
        }

        // ユーザー選択を保存
        function saveUserSelection() {
            if (!window.selectedUser) {
                showMessage('お客様を選択してください。', 'error');
                return;
            }
            
            const newUserId = window.selectedUser.id;
            const newUserName = window.selectedUser.name;
            const newUserPhone = window.selectedUser.phone_number || '';
            const newUserEmail = window.selectedUser.email || '';
            
            console.log('🔍 saveUserSelection - Selected user:', { newUserId, newUserName, newUserPhone, newUserEmail });
            console.log('🔍 saveUserSelection - Current reservation user ID:', currentReservation?.userId);
            
            // 顧客情報を更新
            const customerNameElement = document.querySelector('.customer-name-large');
            if (customerNameElement) {
                customerNameElement.textContent = newUserName;
            }
            
            const phoneElement = document.querySelector('.customer-phone');
            if (phoneElement) {
                phoneElement.textContent = newUserPhone || '電話番号未記入';
            }
            
            const emailElement = document.querySelector('.customer-email');
            if (emailElement) {
                emailElement.textContent = newUserEmail || 'メールアドレス未記入';
            }
            
            // ローカルデータも更新
            if (currentReservation) {
                currentReservation.customer = newUserName;
                currentReservation.phone = newUserPhone;
                currentReservation.email = newUserEmail;
                currentReservation.userId = newUserId;
            }
            
            // グローバルreservationsオブジェクトも更新
            const reservationDateKey = formatDateKey(new Date(currentReservation.start_time || currentReservation.time));
            if (reservations[reservationDateKey]) {
                const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                if (reservationIndex !== -1) {
                    reservations[reservationDateKey][reservationIndex].customer = newUserName;
                    reservations[reservationDateKey][reservationIndex].phone = newUserPhone;
                    reservations[reservationDateKey][reservationIndex].email = newUserEmail;
                    reservations[reservationDateKey][reservationIndex].userId = newUserId;
                }
            }
            
            // バックエンドにユーザー変更を保存
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            fetch(`/admin/reservations/${currentReservation.id}/update_booking`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify({
                    reservation: {
                        user_id: newUserId
                    }
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // レスポンスから更新されたユーザー情報を取得
                    const updatedUser = data.reservation.user;
                    
                    // ローカルデータを更新
                    if (currentReservation) {
                        currentReservation.customer = updatedUser.name;
                        currentReservation.phone = updatedUser.phone_number;
                        currentReservation.email = updatedUser.email;
                        currentReservation.userId = updatedUser.id;
                    }
                    
                    // グローバルreservationsオブジェクトも更新
                    const reservationDateKey = formatDateKey(new Date(currentReservation.start_time || currentReservation.time));
                    if (reservations[reservationDateKey]) {
                        const reservationIndex = reservations[reservationDateKey].findIndex(r => r.id === currentReservation.id);
                        if (reservationIndex !== -1) {
                            reservations[reservationDateKey][reservationIndex].customer = updatedUser.name;
                            reservations[reservationDateKey][reservationIndex].phone = updatedUser.phone_number;
                            reservations[reservationDateKey][reservationIndex].email = updatedUser.email;
                            reservations[reservationDateKey][reservationIndex].userId = updatedUser.id;
                        }
                    }
                    
                    // グローバル変数も更新
                    window.currentUserId = updatedUser.id;
                    
                    // 即座にモーダルの顧客名を更新
                    const customerNameElement = document.querySelector('.customer-name-large');
                    if (customerNameElement) {
                        customerNameElement.textContent = updatedUser.name;
                        console.log('✅ Customer name updated immediately to:', updatedUser.name);
                    }
                    
                    // 元のユーザーIDを保存してから更新
                    currentReservation.originalUserId = currentReservation.userId;
                    
                    // currentReservationも即座に更新
                    currentReservation.customer = updatedUser.name;
                    currentReservation.userId = updatedUser.id;
                    currentReservation.phone = updatedUser.phone_number;
                    currentReservation.email = updatedUser.email;
                    
                    // カレンダーを即座に再描画して変更を反映
                    generateTimeSlots();
                    
                    // チケットと履歴を新しいユーザーで更新
                    loadTicketsAndHistoryForUser(updatedUser.id);
                    
                    // モーダルを閉じる
                    closeUserSelectionModal();
                    
                    showMessage('お客様が変更されました。', 'success');
                    
                    console.log('🔄 Customer changed to:', updatedUser.name);
                    
                    // ページを再読み込みして確実にデータを同期
                    setTimeout(() => {
                        window.location.reload();
                    }, 500);
                } else {
                    showMessage(`お客様の変更に失敗しました: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('❌ Error updating user:', error);
                showMessage('お客様の変更中にエラーが発生しました。', 'error');
            });
        }



        // バックエンドからシフト設定を読み込み
        function loadShiftSettingsFromBackend() {
            const weekStartStr = formatDateKey(currentWeekStart);
            
            return fetch(`/admin/reservations/load_shift_settings?week_start_date=${weekStartStr}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        defaultSchedule = data.default_schedule;
                        weeklySchedules[weekStartStr] = data.current_week_schedule;
                        

                        
                        // 週固有のスケジュールがない場合のログ
                        if (!data.has_custom_schedule) {
    
                        }
  } else {
                        console.error('❌ Failed to load shift settings:', data.message);
                        // フォールバック: デフォルトスケジュールを初期化
                        initializeDefaultSchedule();
                    }
                })
                .catch(error => {
                    console.error('❌ Error loading shift settings:', error);
                    // フォールバック: デフォルトスケジュールを初期化
                    initializeDefaultSchedule();
                });
        }

        // バックエンドから予約データを読み込み
        function loadReservationsFromBackend() {
            const weekStartStr = formatDateKey(currentWeekStart);

            
            return fetch(`/admin/reservations/load_reservations?week_start_date=${weekStartStr}`)
                .then(response => response.json())
                .then(data => {

                    if (data.success) {
                        // 新しい週の予約データで既存のデータを更新（既存データを保持）
                        console.log('🔄 Loading reservations from backend');
                        console.log('📅 Existing reservations:', reservations);
                        console.log('📅 Backend reservations:', data.reservations);
                        
                        // 既存のデータと新しいデータをマージ（既存データを保持）
                        for (const [dateKey, newReservations] of Object.entries(data.reservations)) {
                            reservations[dateKey] = newReservations;
                        }
                        
                        console.log('📅 Final merged reservations:', reservations);
                        console.log('📅 Checking specific reservation 97:', reservations['2025-08-13']?.find(r => r.id === 97));
                        
                        // Debug: Check if AJAX reservations have timestamp fields and interval data
                        if (data.reservations && Object.keys(data.reservations).length > 0) {
                            const firstDateKey = Object.keys(data.reservations)[0];
                            const firstReservation = data.reservations[firstDateKey][0];
                            console.log('🔍 First AJAX reservation structure:', firstReservation);
                            console.log('🔍 AJAX interval data:', {
                                effective_interval_minutes: firstReservation.effective_interval_minutes,
                                individual_interval_minutes: firstReservation.individual_interval_minutes,
                                id: firstReservation.id
                            });
                        }
                        
                        // カレンダーを即座に再描画して変更を反映
                        console.log('🔄 Calling generateTimeSlots after data load');
                        generateTimeSlots();
    } else {
                        console.error('❌ Failed to load reservations:', data.message);
                    }
                })
                .catch(error => {
                    console.error('❌ Error loading reservations:', error);
                });
        }

        // デフォルトスケジュールを初期化
        function initializeDefaultSchedule() {
            defaultSchedule = {
                0: { enabled: false, times: [] }, // 日曜日は休業
                1: { enabled: true, times: [{ start: '09:00', end: '20:00' }] }, // 月曜日
                2: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 火曜日
                3: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 水曜日
                4: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 木曜日
                5: { enabled: true, times: [{ start: '10:00', end: '20:00' }] }, // 金曜日
                6: { enabled: true, times: [{ start: '09:00', end: '18:00' }] }, // 土曜日
            };
        }

        // 週表示を描画
        function renderWeekView() {
            updateWeekHeader();
            generateTimeSlots();
        }

        // 週のヘッダーを更新
        function updateWeekHeader() {
            const endDate = new Date(currentWeekStart);
            endDate.setDate(endDate.getDate() + 6);
            
            const startStr = formatDateShort(currentWeekStart);
            const endStr = formatDateShort(endDate);
            
            document.getElementById('currentWeek').textContent = 
                `${currentWeekStart.getFullYear()}年 ${startStr} - ${endStr}`;
            
            // 日付ヘッダーを更新
            const headers = document.querySelectorAll('.day-header');
            for (let i = 0; i < headers.length; i++) {
                const date = new Date(currentWeekStart);
                date.setDate(date.getDate() + i);
                
                const dayName = dayNames[date.getDay()];
                const dateStr = `${date.getMonth() + 1}/${date.getDate()}`;
                
                // CSSクラスをリセット
                headers[i].classList.remove('sunday', 'saturday');
                
                // 正しいCSSクラスを追加
                if (date.getDay() === 0) {
                    headers[i].classList.add('sunday');
                } else if (date.getDay() === 6) {
                    headers[i].classList.add('saturday');
                }
                
                headers[i].innerHTML = `${dayName}<br><span style="font-size: 12px;">${dateStr}</span>`;
            }
        }

        // タイムスロットを生成
        function generateTimeSlots() {
            console.log('🔍 generateTimeSlots called - defaultSchedule:', defaultSchedule);
            console.log('🔍 generateTimeSlots - current reservations data:', reservations);
            console.log('🔍 generateTimeSlots - reservation 97 data:', reservations['2025-08-13']?.find(r => r.id === 97));
            const scheduleBody = document.getElementById('scheduleBody');
            scheduleBody.innerHTML = '';
            
            // 8:00から21:00まで10分刻みで生成
            for (let hour = 8; hour <= 21; hour++) {
                for (let minute = 0; minute < 60; minute += 10) {
                    if (hour === 21 && minute > 0) break; // 21:00で終了
                    
                    const timeStr = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
                    
                    // 行コンテナを作成
                    const row = document.createElement('div');
                    row.className = 'schedule-row';
                    
                    // 行全体のスタイルを追加
                    if (minute === 0) {
                        row.classList.add('hour-row');
                    } else if (minute === 30) {
                        row.classList.add('half-hour-row');
                    }
                    
                    // 時刻ラベル
                    const timeSlot = document.createElement('div');
                    timeSlot.className = 'time-slot';
                    
                    // 時間マーカーのスタイルを追加（10分刻みに対応）
                    if (minute === 0) {
                        timeSlot.classList.add('hour-marker');
                    } else if (minute === 30) {
                        timeSlot.classList.add('half-hour-marker');
                    }
                    
                    timeSlot.textContent = timeStr;
                    row.appendChild(timeSlot);
                    
                    // 各曜日のセル
                    for (let day = 0; day < 7; day++) {
                        const cell = document.createElement('div');
                        cell.className = 'schedule-cell';
                        cell.dataset.day = day;
                        cell.dataset.time = timeStr;
                        
                        // ドロップゾーンとして設定
                        cell.addEventListener('dragover', handleDragOver);
                        cell.addEventListener('drop', handleDrop);
                        cell.addEventListener('dragenter', handleDragEnter);
                        cell.addEventListener('dragleave', handleDragLeave);
                        
                        const currentDate = new Date(currentWeekStart);
                        currentDate.setDate(currentDate.getDate() + day);
                        const dateKey = formatDateKey(currentDate);
                        
                                                // 営業時間チェック
                        if (isBusinessHour(day, timeStr)) {
                            // 予約チェック
                            const reservation = findReservation(dateKey, timeStr);
                            
                            // デバッグ用ログ（特定の時間のみ）
                            if (timeStr === '10:00' && day === 1) {
                                console.log(`🔍 Checking for reservation at ${dateKey} ${timeStr}:`, {
                                    dayReservations: reservations[dateKey] || [],
                                    foundReservation: reservation,
                                    isReservationStart: reservation ? isReservationStart(dateKey, timeStr) : false
                                });
                            }
                            
                            if (reservation) {
                                // 予約の開始スロットの場合のみブロックを表示
                                if (isReservationStart(dateKey, timeStr)) {
                                    console.log('🎯 Creating reservation block for:', {
                                        id: reservation.id,
                                        customer: reservation.customer,
                                        userId: reservation.userId,
                                        date: dateKey,
                                        time: timeStr,
                                        effective_interval_minutes: reservation.effective_interval_minutes,
                                        individual_interval_minutes: reservation.individual_interval_minutes,
                                        duration: reservation.duration
                                    });
                                    const block = createSpanningReservationBlock(reservation, dateKey, timeStr);
                                    cell.appendChild(block);
                                    // 予約詳細を表示するためのクリックイベント
                                    cell.addEventListener('click', (e) => {
                                        // ドラッグ中でない場合のみクリックイベントを実行
                                        if (!isDragging) {
                                        openReservationDetailModal(reservation);
                                        }
                                    });
                                    
                                    // ドラッグイベントを追加（メインブロックに追加）
                                    console.log('🎯 Setting up drag events for reservation:', reservation.id);
                                    block.addEventListener('dragstart', handleDragStart);
                                    block.addEventListener('dragend', handleDragEnd);
                                    
                                    // Also add drag over to the cell for visual feedback
                                    cell.addEventListener('dragover', handleDragOver);
                                    
                                    // デバッグ用ログ（特定の予約のみ）
                                    if (reservation.customer === '田中様') {
                                        console.log(`🔍 Created reservation block for ${dateKey} ${timeStr}:`, reservation);
                                    }
                                }
    } else {
                                cell.classList.add('available', 'bookable');
                                // 新規予約作成のためのクリックイベント
                                cell.addEventListener('click', () => {
                                    const slotDate = new Date(currentWeekStart);
                                    slotDate.setDate(slotDate.getDate() + day);
                                    openBookingModal(slotDate, timeStr);
                                });
                            }
                        } else {
                            cell.classList.add('unavailable', 'outside-business-hours');
                        }
                        
                        row.appendChild(cell);
                    }
                    
                    scheduleBody.appendChild(row);
                }
            }
            
            // スケジュール生成後にキャンセル表示を更新
            setTimeout(() => {
                updateCancellationDisplayImmediately();
            }, 10);
        }

        // 現在の週のスケジュールを取得
        function getCurrentWeekSchedule() {
            // 安全チェック: デフォルトスケジュールが読み込まれているか確認
            if (!defaultSchedule) {
                console.warn('⚠️ Default schedule not loaded, initializing fallback');
                initializeDefaultSchedule();
            }
            
            const weekKey = formatDateKey(currentWeekStart);
            if (!weeklySchedules[weekKey]) {
                // 週固有のスケジュールがない場合はデフォルトを使用（コピーは作成しない）
                console.log(`🔍 No custom schedule for ${weekKey}, using default schedule`);
                return defaultSchedule;
            }
            
            console.log(`🔍 Using custom schedule for ${weekKey}`);
            return weeklySchedules[weekKey];
        }

        // 営業時間かどうかチェック
        function isBusinessHour(dayOfWeek, timeStr) {
            // 現在の週のスケジュールをチェック
            const currentWeekSchedule = getCurrentWeekSchedule();
            const currentSchedule = currentWeekSchedule[dayOfWeek];
            
            // デバッグ用ログ（18:20の時間のみ）
            if (timeStr === '18:20') {
                console.log('🔍 isBusinessHour debug for 18:20:', {
                    dayOfWeek,
                    currentSchedule,
                    currentWeekSchedule: Object.keys(currentWeekSchedule)
                });
            }
            
            // スケジュールが有効で時間設定がある場合のみチェック
            if (currentSchedule && currentSchedule.enabled && currentSchedule.times.length > 0) {
                const [hours, minutes] = timeStr.split(':').map(Number);
                const timeInMinutes = hours * 60 + minutes;
                
                const isAvailable = currentSchedule.times.some(slot => {
                    const [startHour, startMin] = slot.start.split(':').map(Number);
                    const [endHour, endMin] = slot.end.split(':').map(Number);
                    const startInMinutes = startHour * 60 + startMin;
                    const endInMinutes = endHour * 60 + endMin;
                    
                    return timeInMinutes >= startInMinutes && timeInMinutes < endInMinutes;
                });
                
                // デバッグ用ログ（特定の時間のみ）
                if (timeStr === '10:00' && dayOfWeek === 1) {
                    console.log(`🔍 Business hour check for Monday 10:00:`, {
                        schedule: currentSchedule,
                        timeInMinutes,
                        isAvailable,
                        scheduleType: currentWeekSchedule === defaultSchedule ? 'default' : 'custom'
                    });
                }
                
                return isAvailable;
            }
            
    return false;
  }
  
        // 予約を検索
        function findReservation(dateKey, timeStr) {
            const dayReservations = reservations[dateKey] || [];
            
            // デバッグ用：特定の予約をチェック
            if (dateKey === '2025-08-13' && timeStr === '10:00') {
                console.log('🔍 findReservation called for 2025-08-13 10:00');
                console.log('🔍 dayReservations:', dayReservations);
                console.log('🔍 Looking for reservation 97:', dayReservations.find(r => r.id === 97));
            }
            return dayReservations.find(reservation => {
                const reservationTime = reservation.time;
                const [resHour, resMin] = reservationTime.split(':').map(Number);
                const [checkHour, checkMin] = timeStr.split(':').map(Number);
                
                const resTimeInMin = resHour * 60 + resMin;
                const checkTimeInMin = checkHour * 60 + checkMin;
                const preparationTime = reservation.effective_interval_minutes ?? 10; // 実際の準備時間を使用
                const endTimeInMin = resTimeInMin + reservation.duration + preparationTime;
                
                // 時間スロットの境界を考慮して、次の時間スロットとの重複を避ける
                const nextHourInMin = Math.ceil(endTimeInMin / 60) * 60; // 次の時間の開始
                const adjustedEndTimeInMin = Math.min(endTimeInMin, nextHourInMin);
                
                // デバッグ用：時間計算を確認
                if (timeStr === '15:00' && reservation.customer === '吉田') {
                    console.log('🔍 Time calculation debug:', {
                        reservationTime,
                        timeStr,
                        resTimeInMin,
                        checkTimeInMin,
                        duration: reservation.duration,
                        preparationTime,
                        endTimeInMin,
                        isOverlapping: checkTimeInMin >= resTimeInMin && checkTimeInMin < endTimeInMin
                    });
                }
                
                return checkTimeInMin >= resTimeInMin && checkTimeInMin < adjustedEndTimeInMin;
            });
        }

        // 予約の開始スロットかどうかチェック
        function isReservationStart(dateKey, timeStr) {
            const dayReservations = reservations[dateKey] || [];
            return dayReservations.some(reservation => {
                return reservation.time === timeStr;
            });
        }

        // 予約の継続スロットかどうかチェック
        function isReservationContinuation(dateKey, timeStr) {
            const dayReservations = reservations[dateKey] || [];
            return dayReservations.some(reservation => {
                const reservationTime = reservation.time;
                const [resHour, resMin] = reservationTime.split(':').map(Number);
                const [checkHour, checkMin] = timeStr.split(':').map(Number);
                
                const resTimeInMin = resHour * 60 + resMin;
                const checkTimeInMin = checkHour * 60 + checkMin;
                const endTimeInMin = resTimeInMin + reservation.duration;
                
                return checkTimeInMin > resTimeInMin && checkTimeInMin < endTimeInMin;
            });
        }

        // 予約ブロックを作成
        function createReservationBlock(reservation) {
            const block = document.createElement('div');
            block.className = `reservation-block ${reservation.status}`;
            block.draggable = true;
            block.dataset.reservationId = reservation.id;
            block.dataset.reservationData = JSON.stringify(reservation);
            
            const statusIcon = {
                'tentative': '⏳',
                'confirmed': '✓',
                'completed': '✅'
            };
            
            block.innerHTML = `
                ${statusIcon[reservation.status] || ''} ${reservation.customer}
                <div style="font-size: 9px; opacity: 0.9;">${reservation.duration}分</div>
            `;
            
            return block;
        }

        // スパニング予約ブロックを作成
        function createSpanningReservationBlock(reservation, dateKey, timeStr) {
            console.log('🎯 Creating spanning block for reservation:', reservation.id, {
                effective_interval_minutes: reservation.effective_interval_minutes,
                individual_interval_minutes: reservation.individual_interval_minutes,
                duration: reservation.duration
            });
            const block = document.createElement('div');
            block.className = `reservation-block spanning ${reservation.status}`;
            block.draggable = true; // メインブロックをドラッグ可能に変更
            block.dataset.reservationId = reservation.id;
            block.dataset.reservationData = JSON.stringify(reservation);
            block.dataset.originalDateKey = dateKey;
            block.dataset.originalTimeStr = timeStr;
            
            const statusIcon = {
                'tentative': '⏳',
                'confirmed': '✓',
                'completed': '✅'
            };
            
            // 予約の継続時間に基づいて高さを計算（正確な時間 + 準備時間）
            const durationInMinutes = reservation.duration;
            const preparationTime = reservation.effective_interval_minutes ?? 10; // 準備時間（分）
            const totalTime = durationInMinutes + preparationTime;
                         const rowHeight = 20; // 各時間スロットの高さ（10分間）
            const exactHeight = (totalTime / 10) * rowHeight; // 正確な高さを計算
            
            block.style.height = `${exactHeight}px`;
            block.style.top = '0';
            
            // 準備時間部分を視覚的に区別
            const bookingHeight = (durationInMinutes / 10) * rowHeight;
            const preparationHeight = (preparationTime / 10) * rowHeight;
            
            // 開始時間と終了時間を計算
            const [startHour, startMin] = timeStr.split(':').map(Number);
            const startTimeInMinutes = startHour * 60 + startMin;
            const endTimeInMinutes = startTimeInMinutes + reservation.duration;
            
            const startTime = `${String(Math.floor(startTimeInMinutes / 60)).padStart(2, '0')}:${String(startTimeInMinutes % 60).padStart(2, '0')}`;
            const endTime = `${String(Math.floor(endTimeInMinutes / 60)).padStart(2, '0')}:${String(endTimeInMinutes % 60).padStart(2, '0')}`;
            
            // 準備時間が0の場合は準備時間セクションを表示しない
            const preparationSection = preparationTime > 0 ? `
                <div style="height: ${preparationHeight}px; background: linear-gradient(135deg, rgba(255,255,255,0.2), rgba(255,255,255,0.1)); display: flex; align-items: center; justify-content: center; font-size: 9px; border-top: 1px solid rgba(255,255,255,0.3); backdrop-filter: blur(1px); position: absolute; left: 0; right: 0; bottom: 0; width: 100%;">
                    <div style="position: absolute; top: 0; left: 0; right: 0; height: 1px; background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);"></div>
                    <span style="background: rgba(255,255,255,0.25); padding: 3px 10px; border-radius: 15px; font-weight: 600; font-size: 8px; text-transform: uppercase; letter-spacing: 0.5px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">${preparationTime}分</span>
                </div>
            ` : '';
            
            block.innerHTML = `
                <div style="height: ${preparationTime > 0 ? bookingHeight : exactHeight}px; display: flex; flex-direction: column; justify-content: center; padding: 8px; position: relative;">

                    <div style="font-size: 12px; font-weight: 600; margin-bottom: 4px; text-shadow: 0 1px 2px rgba(0,0,0,0.3);">
                        ${statusIcon[reservation.status] || ''} ${reservation.customer}
      </div>
                    <div style="font-size: 10px; opacity: 0.9; background: rgba(255,255,255,0.2); padding: 2px 6px; border-radius: 10px; display: inline-block; backdrop-filter: blur(2px); margin-bottom: 4px;">
                        ${reservation.duration}分
    </div>
                    <div style="font-size: 9px; opacity: 0.8; background: rgba(0,0,0,0.2); padding: 2px 6px; border-radius: 8px; display: inline-block; backdrop-filter: blur(1px);">
                        ${startTime} - ${endTime}
        </div>
        </div>
                ${preparationSection}
    `;
            
            return block;
        }

        // 設定モーダルを開く
        function openSettingsModal() {
            document.getElementById('settingsModal').style.display = 'block';
            renderDaySettings();
        }

        // 設定モーダルを閉じる
        function closeSettingsModal() {
            document.getElementById('settingsModal').style.display = 'none';
        }

        // タブ切り替え
        function switchTab(tabName) {
            // タブボタンの状態更新
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
            
            // タブコンテンツの表示切り替え
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(`${tabName}-tab`).classList.add('active');
            
            if (tabName === 'recurring') {
                renderRecurringDaySettings();
            }
        }

        // 曜日別設定を描画
        function renderDaySettings() {
            // 週情報を更新
            updateWeekInfo();
            
            const container = document.getElementById('daySettings');
            container.innerHTML = '';
            
            for (let day = 0; day < 7; day++) {
                const dayDiv = createDaySettingDiv(day, false);
                container.appendChild(dayDiv);
            }
        }

        // 定期的な設定を描画
        function renderRecurringDaySettings() {
            const container = document.getElementById('recurringDaySettings');
            container.innerHTML = '';
            
            for (let day = 0; day < 7; day++) {
                const dayDiv = createDaySettingDiv(day, true);
                container.appendChild(dayDiv);
            }
        }

        // 週情報を更新
        function updateWeekInfo() {
            const weekStartStr = formatDateKey(currentWeekStart);
            const weekEnd = new Date(currentWeekStart);
            weekEnd.setDate(weekEnd.getDate() + 6);
            const weekEndStr = formatDateKey(weekEnd);
            
            const currentWeekDisplay = document.getElementById('current-week-display');
            const scheduleTypeInfo = document.getElementById('schedule-type-info');
            
            if (currentWeekDisplay) {
                currentWeekDisplay.textContent = `${weekStartStr} 〜 ${weekEndStr}`;
            }
            
            if (scheduleTypeInfo) {
                const hasCustomSchedule = weeklySchedules[weekStartStr] && 
                    JSON.stringify(weeklySchedules[weekStartStr]) !== JSON.stringify(defaultSchedule);
                
                if (hasCustomSchedule) {
                    scheduleTypeInfo.textContent = '✅ この週にはカスタムスケジュールが設定されています';
                    scheduleTypeInfo.style.color = '#28a745';
                } else {
                    scheduleTypeInfo.textContent = 'ℹ️ この週にはデフォルトスケジュールが適用されています';
                    scheduleTypeInfo.style.color = '#6c757d';
                }
            }
        }

        // 曜日設定DIVを作成
        function createDaySettingDiv(day, isRecurring) {
            // 安全チェック: スケジュールデータが読み込まれているか確認
            if (!defaultSchedule || !defaultSchedule[day]) {
                console.warn(`⚠️ Schedule data not loaded for day ${day}, using fallback`);
                return createFallbackDaySettingDiv(day, isRecurring);
            }
            
            const schedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
            const dayDiv = document.createElement('div');
            dayDiv.className = 'day-setting';
            
            const headerClass = day === 0 ? 'sunday' : day === 6 ? 'saturday' : '';
            
            dayDiv.innerHTML = `
                <div class="day-setting-header ${headerClass}">
                    <span>${dayNamesLong[day]}</span>
                    <div class="day-toggle ${schedule.enabled ? 'active' : ''}" onclick="toggleDay(${day}, ${isRecurring})"></div>
        </div>
                <div class="time-slots-container" style="display: ${schedule.enabled ? 'block' : 'none'};">
                    <div id="timeSlots-${day}-${isRecurring}" class="time-slots">
                        ${renderTimeSlots(day, schedule.times, isRecurring)}
        </div>
                    <button class="add-time-btn" onclick="addTimeSlot(${day}, ${isRecurring})">
                        + 時間帯を追加
          </button>
        </div>
  `;
            
            return dayDiv;
        }

        // フォールバック用の曜日設定DIVを作成
        function createFallbackDaySettingDiv(day, isRecurring) {
            const dayDiv = document.createElement('div');
            dayDiv.className = 'day-setting';
            
            const headerClass = day === 0 ? 'sunday' : day === 6 ? 'saturday' : '';
            
            dayDiv.innerHTML = `
                <div class="day-setting-header ${headerClass}">
                    <span>${dayNamesLong[day]}</span>
                    <div class="day-toggle" onclick="toggleDay(${day}, ${isRecurring})"></div>
      </div>
                <div class="time-slots-container" style="display: none;">
                    <div id="timeSlots-${day}-${isRecurring}" class="time-slots">
                        <!-- データ読み込み中 -->
                    </div>
                    <button class="add-time-btn" onclick="addTimeSlot(${day}, ${isRecurring})">
                        + 時間帯を追加
                    </button>
    </div>
  `;
            
            return dayDiv;
        }

        // 時間スロットを描画
        function renderTimeSlots(day, times, isRecurring = false) {
            return times.map((time, index) => `
                <div class="time-slot-input">
                    <input type="time" class="time-input" value="${time.start}" 
                           onchange="(async () => { await updateTimeSlot(${day}, ${index}, 'start', this.value, ${isRecurring}); })()">
                    <span>〜</span>
                    <input type="time" class="time-input" value="${time.end}"
                           onchange="(async () => { await updateTimeSlot(${day}, ${index}, 'end', this.value, ${isRecurring}); })()">
                    <button class="btn btn-danger btn-sm" onclick="removeTimeSlot(${day}, ${index}, ${isRecurring})">削除</button>
                </div>
            `).join('');
        }

        // 曜日の有効/無効を切り替え
        async function toggleDay(day, isRecurring) {
            console.log(`Toggling day ${day} (${dayNamesLong[day]}) for recurring: ${isRecurring}`);
            
            const currentSchedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
            const wouldBeDisabled = currentSchedule.enabled; // If currently enabled, it would become disabled
            
            // Check for existing reservations if trying to disable the day
            if (wouldBeDisabled) {
                console.log(`🔍 Checking if day ${day} can be disabled`);
                
                if (isRecurring) {
                    // For recurring schedules, check all future reservations for this day of week
                    try {
                        const affectedReservations = await checkRecurringScheduleImpact(day, '00:00', '00:00');
                        if (affectedReservations.length > 0) {
                            const dayName = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'][day];
                            const reservationList = affectedReservations.map(r => `${r.customer}様 (${r.date} ${r.time})`).join(', ');
                            
                            showMessage(`${dayName}を休業日にすることはできません。以下の予約があります: ${reservationList}`, 'error');
                            return; // Don't proceed with the toggle
                        }
                    } catch (error) {
                        console.error('❌ Error checking reservations for day toggle:', error);
                        showMessage('予約状況の確認中にエラーが発生しました。', 'error');
                        return;
                    }
                } else {
                    // For current week, check reservations for specific dates
                    const affectedReservations = checkCurrentWeekReservationsForDay(day);
                    if (affectedReservations.length > 0) {
                        const dayName = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'][day];
                        const reservationList = affectedReservations.map(r => `${r.customer}様 (${r.time})`).join(', ');
                        
                        showMessage(`${dayName}を休業日にすることはできません。以下の予約があります: ${reservationList}`, 'error');
                        return; // Don't proceed with the toggle
                    }
                }
            }
            
            if (isRecurring) {
                // 定期的なスケジュールの場合
                defaultSchedule[day].enabled = !defaultSchedule[day].enabled;
            } else {
                // 現在の週の場合、カスタムスケジュールを作成
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                    console.log(`🔍 Created custom schedule for week ${weekKey}`);
                }
                weeklySchedules[weekKey][day].enabled = !weeklySchedules[weekKey][day].enabled;
            }
            
            const toggle = document.querySelector(`[onclick="toggleDay(${day}, ${isRecurring})"]`);
            const timeSlotsContainer = toggle.parentElement.nextElementSibling;
            
            const schedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
            
            if (schedule.enabled) {
                toggle.classList.add('active');
                timeSlotsContainer.style.display = 'block';
                
                // 時間スロットがない場合は追加
                if (schedule.times.length === 0) {
                    schedule.times.push({ start: '09:00', end: '18:00' });
                }
                
                // 現在のタブのコンテナのみ更新
                const slotsContainer = document.getElementById(`timeSlots-${day}-${isRecurring}`);
                if (slotsContainer) {
                    slotsContainer.innerHTML = renderTimeSlots(day, schedule.times, isRecurring);
                }
            } else {
                toggle.classList.remove('active');
                timeSlotsContainer.style.display = 'none';
            }
            
            console.log(`Day ${day} (${dayNamesLong[day]}) is now ${schedule.enabled ? 'enabled' : 'disabled'} for ${isRecurring ? 'recurring' : 'current week'}`);
        }

        // 時間スロットを追加
        function addTimeSlot(day, isRecurring) {
            if (isRecurring) {
                defaultSchedule[day].times.push({ start: '09:00', end: '18:00' });
            } else {
                // 現在の週の場合、カスタムスケジュールを作成
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                    console.log(`🔍 Created custom schedule for week ${weekKey}`);
                }
                weeklySchedules[weekKey][day].times.push({ start: '09:00', end: '18:00' });
            }
            
            // 現在のタブのコンテナのみ更新
            const slotsContainer = document.getElementById(`timeSlots-${day}-${isRecurring}`);
            if (slotsContainer) {
                const schedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
                slotsContainer.innerHTML = renderTimeSlots(day, schedule.times, isRecurring);
            }
        }

        // 時間スロットを削除
        function removeTimeSlot(day, index, isRecurring = false) {
            if (isRecurring) {
                defaultSchedule[day].times.splice(index, 1);
            } else {
                // 現在の週の場合、カスタムスケジュールを作成
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                    console.log(`🔍 Created custom schedule for week ${weekKey}`);
                }
                weeklySchedules[weekKey][day].times.splice(index, 1);
            }
            
            // 現在のタブのコンテナのみ更新
            const slotsContainer = document.getElementById(`timeSlots-${day}-${isRecurring}`);
            if (slotsContainer) {
                const schedule = isRecurring ? defaultSchedule[day] : getCurrentWeekSchedule()[day];
                slotsContainer.innerHTML = renderTimeSlots(day, schedule.times, isRecurring);
            }
        }

        // 時間スロットを更新
        async function updateTimeSlot(day, index, field, value, isRecurring = false) {
            // 変更前の値を保存
            let oldValue;
            if (isRecurring) {
                oldValue = defaultSchedule[day].times[index][field];
            } else {
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                }
                oldValue = weeklySchedules[weekKey][day].times[index][field];
            }
            
            // 新しい値を設定
            if (isRecurring) {
                defaultSchedule[day].times[index][field] = value;
            } else {
                const weekKey = formatDateKey(currentWeekStart);
                if (!weeklySchedules[weekKey]) {
                    weeklySchedules[weekKey] = JSON.parse(JSON.stringify(defaultSchedule));
                    console.log(`🔍 Created custom schedule for week ${weekKey}`);
                }
                weeklySchedules[weekKey][day].times[index][field] = value;
            }
            
            // 時間変更の妥当性をチェック（定期的なスケジュールも含む）
            if (isRecurring) {
                console.log('🔍 Validating recurring schedule time change:', {
                    day,
                    field,
                    oldValue,
                    newValue: value,
                    dayName: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][day]
                });
                
                // 定期的なスケジュールの場合、基本的な時間妥当性チェック
                if (field === 'start' || field === 'end') {
                    // 時間形式の基本チェック
                    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
                    if (!timeRegex.test(value)) {
                        showMessage('時間は HH:MM 形式で入力してください', 'error');
                        // 元の値に戻す
                        defaultSchedule[day].times[index][field] = oldValue;
                        return;
                    }
                    
                    // 開始時間 < 終了時間のチェック
                    const currentSlot = defaultSchedule[day].times[index];
                    const startTime = field === 'start' ? value : currentSlot.start;
                    const endTime = field === 'end' ? value : currentSlot.end;
                    
                    if (startTime >= endTime) {
                        showMessage('開始時間は終了時間より前に設定してください', 'error');
                        // 元の値に戻す
                        defaultSchedule[day].times[index][field] = oldValue;
                        return;
                    }
                    
                    // 既存の予約への影響をチェック（非同期）
                    try {
                        const affectedReservations = await checkRecurringScheduleImpact(day, startTime, endTime);
                        if (affectedReservations.length > 0) {
                            const dayName = ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'][day];
                            const reservationList = affectedReservations.map(r => `${r.customer}様 (${r.date} ${r.time})`).join(', ');
                            
                            showMessage(`${dayName}の営業時間変更により、以下の予約が営業時間外になります: ${reservationList}`, 'error');
                            
                            // 元の値に戻す
                            defaultSchedule[day].times[index][field] = oldValue;
                            return;
                        }
                    } catch (error) {
                        console.error('❌ Error checking recurring schedule impact:', error);
                        showMessage('予約データの確認中にエラーが発生しました。', 'error');
                        // 元の値に戻す
                        defaultSchedule[day].times[index][field] = oldValue;
                        return;
                    }
                    
                    console.log('✅ Recurring schedule time validation passed');
                }
            }
            
            // 営業時間の変更（短縮・拡張）の場合、影響をチェック
            if ((field === 'end' && parseInt(value) < parseInt(oldValue)) || 
                (field === 'start' && parseInt(value) > parseInt(oldValue)) ||
                (field === 'end' && parseInt(value) > parseInt(oldValue)) || 
                (field === 'start' && parseInt(value) < parseInt(oldValue))) {
                console.log(`🔍 Checking impact of changing business hours for day ${day} from ${oldValue} to ${value} (${field})`);
                
                // 影響を受ける予約をチェック
                const affectedReservations = checkShiftChangeImpact(day, oldValue, value, field);
                
                if (affectedReservations.length > 0) {
                    // 影響がある場合は確認ダイアログを表示
                    const confirmed = await showShiftChangeConfirmation(affectedReservations, day, oldValue, value, field);
                    if (!confirmed) {
                        // キャンセルされた場合は元の値に戻す
                        if (isRecurring) {
                            defaultSchedule[day].times[index][field] = oldValue;
                        } else {
                            const weekKey = formatDateKey(currentWeekStart);
                            weeklySchedules[weekKey][day].times[index][field] = oldValue;
                        }
                        return;
                    }
                }
            }
        }

        // 設定を保存
        function saveSettings() {
            // 現在アクティブなタブを確認
            const activeTab = document.querySelector('.tab-button.active');
            const isRecurring = activeTab && activeTab.textContent.includes('定期的なスケジュール');
            
            console.log('🔍 Active tab:', activeTab ? activeTab.textContent : 'none');
            console.log('🔍 isRecurring:', isRecurring);
            
            const scheduleData = isRecurring ? defaultSchedule : getCurrentWeekSchedule();
            const weekStartStr = formatDateKey(currentWeekStart);
            
            console.log('🔄 Saving shift settings:', {
                isRecurring,
                weekStartStr,
                scheduleData
            });
            
            // バックエンドに保存
            fetch('/admin/reservations/save_shift_settings', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                },
                body: JSON.stringify({
                    schedule_data: scheduleData,
                    is_recurring: isRecurring,
                    week_start_date: weekStartStr
                })
            })
            .then(response => response.json())
  .then(data => {
    if (data.success) {
                    console.log('✅ Shift settings saved successfully');
                    
                    // 表示を更新
                    renderWeekView();
                    closeSettingsModal();
                    
                    // 保存完了メッセージ
                    const message = isRecurring 
                        ? '定期的なスケジュールが保存されました。この設定は全ての週に適用されます。'
                        : '設定が保存されました。この設定は現在の週のみに適用されます。';
                    showMessage(message, 'success');
    } else {
                    console.error('❌ Failed to save shift settings:', data.message);
                    showMessage(`シフト設定の保存に失敗しました: ${data.message}`, 'error');
    }
  })
  .catch(error => {
                console.error('❌ Error saving shift settings:', error);
                showMessage('シフト設定の保存中にエラーが発生しました', 'error');
            });
        }

        // 前週へ
        function previousWeek() {
            currentWeekStart.setDate(currentWeekStart.getDate() - 7);
            Promise.all([
                loadShiftSettingsFromBackend(),
                loadReservationsFromBackend()
            ]).then(() => {
                renderWeekView();
                updateCancellationDisplay(); // キャンセル履歴を更新
            });
        }

        // 次週へ
        function nextWeek() {
            currentWeekStart.setDate(currentWeekStart.getDate() + 7);
            Promise.all([
                loadShiftSettingsFromBackend(),
                loadReservationsFromBackend()
            ]).then(() => {
                renderWeekView();
                updateCancellationDisplay(); // キャンセル履歴を更新
            });
        }

        // 日付をフォーマット（短縮版）
        function formatDateShort(date) {
            return `${date.getMonth() + 1}月${date.getDate()}日`;
        }
        
        // シフト変更の影響をチェック（ラッパー関数）
        function checkShiftChangeImpactAuto(day, oldTime, newTime, field) {
            // アクティブなタブに基づいてisRecurringを判定
            const activeTab = document.querySelector('.tab-button.active');
            const isRecurring = activeTab && activeTab.textContent.includes('定期的なスケジュール');
            
            console.log(`🔍 Checking impact of changing business hours for day ${day} from ${oldTime} to ${newTime} (${field})`);
            console.log(`🔍 Active tab text: "${activeTab ? activeTab.textContent : 'no active tab found'}"`);
            console.log(`🔍 isRecurring determined from active tab: ${isRecurring}`);
            
            return checkShiftChangeImpact(day, oldTime, newTime, field, isRecurring);
        }
        
        // シフト変更の影響をチェック
        function checkShiftChangeImpact(day, oldTime, newTime, field, isRecurring = null) {
            const affectedReservations = [];
            const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
            
            // If isRecurring is not specified, auto-detect from active tab
            if (isRecurring === null) {
                const activeTab = document.querySelector('.tab-button.active');
                isRecurring = activeTab && activeTab.textContent.includes('定期的なスケジュール');
                console.log(`🔍 Auto-detected isRecurring from active tab: "${activeTab ? activeTab.textContent : 'no active tab'}" -> ${isRecurring}`);
            }
            
            console.log(`🔍 checkShiftChangeImpact called with: day=${day} (${dayNames[day]}), oldTime=${oldTime}, newTime=${newTime}, field=${field}, isRecurring=${isRecurring}`);
            console.log(`🔍 All reservations:`, reservations);
            
            // Get current week dates if this is not a recurring change
            let currentWeekDates = [];
            if (!isRecurring && currentWeekStart) {
                const weekStart = new Date(currentWeekStart);
                for (let i = 0; i < 7; i++) {
                    const date = new Date(weekStart);
                    date.setDate(weekStart.getDate() + i);
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const dayStr = String(date.getDate()).padStart(2, '0');
                    currentWeekDates.push(`${year}-${month}-${dayStr}`);
                }
                console.log(`🔍 Current week dates:`, currentWeekDates);
            }
            
            // Check reservations (all weeks for recurring, current week only for non-recurring)
            Object.keys(reservations).forEach(weekKey => {
                // If not recurring, only check current week dates
                if (!isRecurring && !currentWeekDates.includes(weekKey)) {
                    console.log(`🔍 Skipping ${weekKey} - not in current week`);
                    return;
                }
                const weekReservations = reservations[weekKey] || [];
                
                weekReservations.forEach(reservation => {
                    // 週のキーから日付を取得
                    const reservationDate = new Date(weekKey);
                    const reservationDayOfWeek = reservationDate.getDay();
                    
                    console.log(`🔍 Checking reservation: ${reservation.id} on ${weekKey} (day ${reservationDayOfWeek}) vs target day ${day}`);
                    
                    // 同じ曜日の予約をチェック
                    if (reservationDayOfWeek === day) {
                        const [startHour, startMin] = reservation.time.split(':').map(Number);
                        const reservationStartInMin = startHour * 60 + startMin;
                        const reservationEndInMin = reservationStartInMin + reservation.duration;
                        console.log(`🔍 Reservation time: ${reservation.time} (start: ${reservationStartInMin} min, duration: ${reservation.duration} min, end: ${reservationEndInMin} min)`);
                        let isAffected = false;
                        if (field === 'end') {
                            if (parseInt(newTime) < parseInt(oldTime)) {
                                // 新しい終了時間（分単位）
                                let newEndInMin;
                                if (String(newTime).includes(':')) {
                                    const [h, m] = String(newTime).split(':').map(Number);
                                    newEndInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    newEndInMin = parseInt(newTime) * 60;
                                }
                                // 終了時間が短縮される場合 - 予約が新しい終了時間を超える場合
                                isAffected = reservationEndInMin > newEndInMin;
                                console.log(`🔍 End time shrinking check: reservation ends at ${reservationEndInMin} min, new end time is ${newEndInMin} min = ${isAffected}`);
                            } else {
                                // 終了時間が拡張される場合
                                let oldEndInMin, newEndInMin;
                                if (String(oldTime).includes(':')) {
                                    const [h, m] = String(oldTime).split(':').map(Number);
                                    oldEndInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    oldEndInMin = parseInt(oldTime) * 60;
                                }
                                if (String(newTime).includes(':')) {
                                    const [h, m] = String(newTime).split(':').map(Number);
                                    newEndInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    newEndInMin = parseInt(newTime) * 60;
                                }
                                isAffected = reservationStartInMin >= oldEndInMin && reservationStartInMin < newEndInMin;
                                console.log(`🔍 End time expanding check: ${reservationStartInMin} >= ${oldEndInMin} AND ${reservationStartInMin} < ${newEndInMin} = ${isAffected}`);
                            }
                        } else if (field === 'start') {
                            if (parseInt(newTime) > parseInt(oldTime)) {
                                // 開始時間が遅くなる場合
                                let newStartInMin;
                                if (String(newTime).includes(':')) {
                                    const [h, m] = String(newTime).split(':').map(Number);
                                    newStartInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    newStartInMin = parseInt(newTime) * 60;
                                }
                                isAffected = reservationStartInMin < newStartInMin;
                                console.log(`🔍 Start time delaying check: ${reservationStartInMin} < ${newStartInMin} = ${isAffected}`);
                            } else {
                                // 開始時間が早くなる場合
                                let oldStartInMin, newStartInMin;
                                if (String(oldTime).includes(':')) {
                                    const [h, m] = String(oldTime).split(':').map(Number);
                                    oldStartInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    oldStartInMin = parseInt(oldTime) * 60;
                                }
                                if (String(newTime).includes(':')) {
                                    const [h, m] = String(newTime).split(':').map(Number);
                                    newStartInMin = h * 60 + (isNaN(m) ? 0 : m);
                                } else {
                                    newStartInMin = parseInt(newTime) * 60;
                                }
                                isAffected = reservationStartInMin >= newStartInMin && reservationStartInMin < oldStartInMin;
                                console.log(`🔍 Start time advancing check: ${reservationStartInMin} >= ${newStartInMin} AND ${reservationStartInMin} < ${oldStartInMin} = ${isAffected}`);
                            }
                        }
                        if (isAffected) {
                            affectedReservations.push({
                                id: reservation.id,
                                customer: reservation.customer,
                                start_time: reservation.time,
                                end_time: `${Math.floor(reservationEndInMin/60)}:${(reservationEndInMin%60).toString().padStart(2,'0')}`,
                                date: weekKey,
                                dayName: dayNames[day]
                            });
                            console.log(`🔍 Added affected reservation: ${reservation.id}`);
                        }
                    }
                });
            });
            
            console.log(`🔍 Found ${affectedReservations.length} affected reservations for day ${day} (${dayNames[day]}) - ${field} time change`);
            return affectedReservations;
        }
        
        // シフト変更の確認ダイアログを表示
        function showShiftChangeConfirmation(affectedReservations, day, oldTime, newTime, field) {
            return new Promise((resolve) => {
                const dayNames = ['日', '月', '火', '水', '木', '金', '土'];
                const fieldName = field === 'start' ? '開始時間' : '終了時間';
                
                // 既存のモーダルがあれば削除
                const existingModal = document.getElementById('shiftChangeModal');
                if (existingModal) {
                    existingModal.remove();
                }
                
                const modal = document.createElement('div');
                modal.id = 'shiftChangeModal';
                modal.className = 'modal fade';
                modal.setAttribute('tabindex', '-1');
                modal.setAttribute('aria-labelledby', 'shiftChangeModalLabel');
                modal.setAttribute('aria-hidden', 'true');
                modal.innerHTML = `
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header bg-warning text-dark">
                                <h5 class="modal-title" id="shiftChangeModalLabel">⚠️ 営業時間変更の確認</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="alert alert-warning mb-1">
                                    <strong>営業時間の変更により影響を受ける予約があります:</strong><br>
                                    ${dayNames[day]}曜日 ${fieldName}: ${oldTime}:00 → ${newTime}:00
                                </div>
                                
                                <div class="table-responsive mb-1" style="max-height: 300px; overflow-y: hidden;">
                                    <table class="table table-sm mb-0">
                                        <thead>
                                            <tr>
                                                <th style="font-size: 1rem; padding: 0.3rem;">日時</th>
                                                <th style="font-size: 1rem; padding: 0.3rem;">お客様</th>
                                                <th style="font-size: 1rem; padding: 0.3rem;">時間</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${affectedReservations.map(reservation => `
                                                <tr>
                                                    <td style="font-size: 1rem; padding: 0.3rem;">${reservation.date}</td>
                                                    <td style="font-size: 1rem; padding: 0.3rem;">${reservation.customer}</td>
                                                    <td style="font-size: 1rem; padding: 0.3rem;">${reservation.start_time}-${reservation.end_time}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                                
                                <div class="alert alert-danger mb-0">
                                    <strong>エラー:</strong> 営業時間を変更すると、これらの予約が営業時間外になってしまいます。変更はできません。
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" id="cancelShiftChange">OK</button>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
                
                // イベントリスナーを設定
                const cancelBtn = modal.querySelector('#cancelShiftChange');
                const closeBtn = modal.querySelector('.btn-close');
                
                cancelBtn.addEventListener('click', () => {
                    modal.remove();
                    resolve(false);
                });
                
                closeBtn.addEventListener('click', () => {
                    modal.remove();
                    resolve(false);
                });
                
                // モーダルの外側クリックで閉じる
                modal.addEventListener('click', (event) => {
                    if (event.target === modal) {
                        modal.remove();
                        resolve(false);
                    }
                });
                
                // モーダルを表示
                modal.style.display = 'block';
                modal.classList.add('show');
                modal.setAttribute('aria-modal', 'true');
                modal.setAttribute('role', 'dialog');
                
                // 背景を暗くする
                const backdrop = document.createElement('div');
                backdrop.className = 'modal-backdrop fade show';
                backdrop.id = 'shiftChangeBackdrop';
                document.body.appendChild(backdrop);
                
                        // ESCキーで閉じる
        const handleEscKey = (event) => {
            if (event.key === 'Escape') {
                modal.remove();
                backdrop.remove();
                document.removeEventListener('keydown', handleEscKey);
                resolve(false);
            }
        };
        document.addEventListener('keydown', handleEscKey);
        
        // モーダルとバックドロップを削除する関数
        const cleanup = () => {
            if (modal) modal.remove();
            if (backdrop) backdrop.remove();
            document.removeEventListener('keydown', handleEscKey);
        };
        
        // クリーンアップを設定
        cancelBtn.addEventListener('click', cleanup);
        closeBtn.addEventListener('click', cleanup);
        modal.addEventListener('click', (event) => {
            if (event.target === modal) {
                cleanup();
                resolve(false);
            }
        });
    });
        }

        // 日付キーをフォーマット
        function formatDateKey(date) {
            return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
        }

        // メッセージ表示
function showMessage(message, type = 'info') {
            const messageDiv = document.createElement('div');
            messageDiv.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 2000;
                padding: 12px 20px;
                border-radius: 6px;
                color: white;
                font-weight: 500;
                animation: slideInRight 0.3s ease;
                background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : type === 'warning' ? '#ffc107' : '#007bff'};
                color: ${type === 'warning' ? '#212529' : 'white'};
            `;
            messageDiv.textContent = message;
            
            document.body.appendChild(messageDiv);
            
  setTimeout(() => {
                messageDiv.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => document.body.removeChild(messageDiv), 300);
  }, 3000);
}

        // モーダルの外側クリックで閉じる
        window.onclick = function(event) {
            const modal = document.getElementById('settingsModal');
            if (event.target === modal) {
                closeSettingsModal();
            }
            
            // ミニカレンダーの外側クリックで閉じる
            const miniCalendar = document.getElementById('miniCalendar');
            const miniCalendarContainer = document.querySelector('.mini-calendar-container');
            if (miniCalendar && !miniCalendarContainer.contains(event.target)) {
                miniCalendar.classList.remove('show');
            }
        }

        // ミニカレンダー関連の関数
        function toggleMiniCalendar() {
            const miniCalendar = document.getElementById('miniCalendar');
            miniCalendar.classList.toggle('show');
        }

        function renderMiniCalendar() {
            const year = miniCalendarMonth.getFullYear();
            const month = miniCalendarMonth.getMonth();
            
            console.log('📅 Rendering mini calendar for:', year, '年', monthNames[month]);
            
            // タイトルを更新
            document.getElementById('miniCalendarTitle').textContent = 
                `${year}年 ${monthNames[month]}`;
            
            // 月の最初の日と最後の日を取得
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            
            // 最初の週の開始日を取得（日曜日から）
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            // 最後の週の終了日を取得（土曜日まで）
            const endDate = new Date(lastDay);
            endDate.setDate(endDate.getDate() + (6 - lastDay.getDay()));
            
            const daysContainer = document.getElementById('miniCalendarDays');
            daysContainer.innerHTML = '';
            
            // カレンダーの日付セルを生成
            const current = new Date(startDate);
            while (current <= endDate) {
                const dayDiv = document.createElement('div');
                dayDiv.className = 'mini-calendar-day';
                dayDiv.textContent = current.getDate();
                
                // 今月以外の日付
                if (current.getMonth() !== month) {
                    dayDiv.classList.add('other-month');
                }
                
                // 今日の日付
                const today = new Date();
                if (current.toDateString() === today.toDateString()) {
                    dayDiv.classList.add('today');
                }
                
                // クリックされた日付をハイライト
                if (clickedDate && 
                    current.getFullYear() === clickedDate.getFullYear() && 
                    current.getMonth() === clickedDate.getMonth() && 
                    current.getDate() === clickedDate.getDate()) {
                    dayDiv.classList.add('clicked-day');
                }
                
                // クリックイベント - 安全な日付オブジェクトを作成
                const clickDate = new Date(current.getFullYear(), current.getMonth(), current.getDate(), 12, 0, 0, 0);
                dayDiv.addEventListener('click', () => {
                    selectWeekFromDate(clickDate);
                });
                
                daysContainer.appendChild(dayDiv);
                current.setDate(current.getDate() + 1);
            }
        }

        function selectWeekFromDate(date) {
            console.log('🔍 Original clicked date:', date);
            console.log('🔍 Date details:', {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                date: date.getDate(),
                dayOfWeek: date.getDay(),
                toString: date.toString()
            });
            
            // 日付を安全に処理 - タイムゾーンの影響を避ける
            const safeDate = new Date(
                date.getFullYear(),
                date.getMonth(),
                date.getDate(),
                12, 0, 0, 0  // 正午に設定してタイムゾーンの問題を回避
            );
            
            console.log('📅 Safe date for calculation:', safeDate);
            
            // 指定された日付が含まれる週の開始日（日曜日）を計算
            const dayOfWeek = safeDate.getDay();
            const targetDate = safeDate.getDate() - dayOfWeek;
            
            console.log('Target date calculation:', safeDate.getDate(), '-', dayOfWeek, '=', targetDate);
            
            // 週の開始日を安全に作成
            const weekStart = new Date(
                safeDate.getFullYear(),
                safeDate.getMonth(),
                targetDate,
                12, 0, 0, 0
            );
            
            console.log('📅 Calculated week start:', weekStart);
            console.log('🔍 Week start details:', {
                year: weekStart.getFullYear(),
                month: weekStart.getMonth() + 1,
                date: weekStart.getDate()
            });
            
            // クリックされた日付を保存
            clickedDate = safeDate;
            
            // 週を更新
            currentWeekStart = weekStart;
            
            // シフト設定と予約データを読み込み、表示を更新
            Promise.all([
                loadShiftSettingsFromBackend(),
                loadReservationsFromBackend()
            ]).then(() => {
                renderWeekView();
            });
            
            // ミニカレンダーを閉じる
            document.getElementById('miniCalendar').classList.remove('show');
            
            // ミニカレンダーを再描画（選択状態を更新）
            renderMiniCalendar();
        }

        function previousMiniCalendarMonth() {
            const currentDate = miniCalendarMonth;
            const prevMonth = new Date(
                currentDate.getFullYear(),
                currentDate.getMonth() - 1,
                15, // 月の中旬に設定
                12, 0, 0, 0
            );
            
            console.log('⬅️ Moving to previous month:', prevMonth);
            miniCalendarMonth = prevMonth;
            renderMiniCalendar();
        }

        function nextMiniCalendarMonth() {
            const currentDate = miniCalendarMonth;
            const nextMonth = new Date(
                currentDate.getFullYear(),
                currentDate.getMonth() + 1,
                15, // 月の中旬に設定
                12, 0, 0, 0
            );
            
            console.log('➡️ Moving to next month:', nextMonth);
            miniCalendarMonth = nextMonth;
            renderMiniCalendar();
        }

        function previousMiniCalendarYear() {
            const currentDate = miniCalendarMonth;
            const prevYear = new Date(
                currentDate.getFullYear() - 1,
                currentDate.getMonth(),
                15, // 月の中旬に設定
                12, 0, 0, 0
            );
            
            console.log('⬅️⬅️ Moving to previous year:', prevYear);
            miniCalendarMonth = prevYear;
            renderMiniCalendar();
        }

        function nextMiniCalendarYear() {
            const currentDate = miniCalendarMonth;
            const nextYear = new Date(
                currentDate.getFullYear() + 1,
                currentDate.getMonth(),
                15, // 月の中旬に設定
                12, 0, 0, 0
            );
            
            console.log('➡️➡️ Moving to next year:', nextYear);
            miniCalendarMonth = nextYear;
            renderMiniCalendar();
        }

        // 予約作成モーダルを開く
        function openBookingModal(date, time) {
            document.getElementById('bookingDate').value = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${time}`;
            document.getElementById('bookingTime').value = time;
            document.getElementById('bookingDuration').value = ''; // コース選択をリセット
            document.getElementById('customerName').value = '';
            document.getElementById('customerPhone').value = '';
            document.getElementById('customerEmail').value = '';
            document.getElementById('bookingNote').value = '';
            document.getElementById('bookingStatus').value = 'tentative';
            document.getElementById('bookingModal').style.display = 'block';
        }

        // 予約作成モーダルを閉じる
        function closeBookingModal() {
            document.getElementById('bookingModal').style.display = 'none';
            // 編集モードフラグをリセット
            isEditingReservation = false;
            currentReservation = null;
            reservationToEdit = null;
        }

        // 予約を作成・更新
        function createBooking() {
            const dateTime = document.getElementById('bookingDate').value;
            const duration = document.getElementById('bookingDuration').value;
            const customerName = document.getElementById('customerName').value;
            const customerPhone = document.getElementById('customerPhone').value;
            const customerEmail = document.getElementById('customerEmail').value;
            const bookingNote = document.getElementById('bookingNote').value;
            const bookingStatus = document.getElementById('bookingStatus').value;

            console.log('🔄 Creating/Updating booking, isEditing:', isEditingReservation);

            if (!dateTime || !duration || !customerName || !customerPhone) {
                showMessage('予約日時、コース、お客様名、電話番号は必須です。', 'error');
                return;
            }

            // 営業時間内に収まるかチェック
            const [dateStr, timeStr] = dateTime.split(' ');
            const reservationDate = new Date(dateStr);
            const dayOfWeek = reservationDate.getDay();
            const newDuration = parseInt(duration);
            const defaultInterval = 10; // 新規予約のデフォルト間隔
            
            const validation = validateReservationTimeWithinBusinessHours({
                time: timeStr,
                start_time: dateTime,
                duration: newDuration
            }, newDuration, defaultInterval);
            
            if (!validation.valid) {
                showMessage(validation.message, 'error');
                return;
            }
            
            // 重複チェック
            const overlapValidation = validateReservationOverlap({
                time: timeStr,
                start_time: dateTime,
                duration: newDuration
            }, newDuration, defaultInterval);
            
            if (!overlapValidation.valid) {
                showMessage(overlapValidation.message, 'error');
                return;
            }

            // バックエンドに送信するデータを準備
            const bookingData = {
                reservation: {
                    start_time: dateTime,
                    course: `${duration}分`,
                    name: customerName,
                    note: bookingNote,
                    status: bookingStatus,
                    user_attributes: {
                        name: customerName,
                        phone_number: customerPhone,
                        email: customerEmail
                    }
                }
            };

            // CSRFトークンを取得
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            console.log('CSRF Token:', csrfToken);
            console.log('Sending booking data:', bookingData);

            // クライアントサイドで重複チェック
            if (!isEditingReservation && checkForOverlap(dateTime, duration)) {
                showMessage('この時間帯には既に予約があります。別の時間を選択してください。', 'error');
                return;
            }

            // バックエンドに送信（編集モードの場合は更新、新規の場合は作成）
            const url = isEditingReservation ? 
                `/admin/reservations/${reservationToEdit.id}/update_booking` : 
                '/admin/reservations/create_booking';
            const method = isEditingReservation ? 'PATCH' : 'POST';
            
            fetch(url, {
                method: method,
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken
    },
                body: JSON.stringify(bookingData)
  })
  .then(response => {
                console.log('Response status:', response.status);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
                    // バックエンドから返された予約データを使用
                    const reservationData = data.reservation;
                    
                    if (isEditingReservation) {
                        // 編集モード：既存の予約を更新
                        const updatedReservation = {
                            id: reservationData.id,
                            userId: reservationData.user_id || reservationData.user?.id,
                            time: reservationData.start_time.split('T')[1].substring(0, 5), // HH:MM形式に変換
                            duration: extractDurationFromCourse(reservationData.course),
                            customer: reservationData.name || reservationData.user?.name || '未設定',
                            phone: reservationData.user?.phone_number || '',
                            email: reservationData.user?.email || '',
                            note: reservationData.note || '',
                            status: reservationData.status,
                            createdAt: reservationData.created_at,
                            updatedAt: reservationData.updated_at,
                            effective_interval_minutes: reservationData.effective_interval_minutes ?? 10
                        };
                        
                        // 既存の予約を更新
                        // 古い日付キーを特定（reservationsオブジェクトから該当する日付キーを探す）
                        let oldDateKey = null;
                        for (const dateKey of Object.keys(reservations)) {
                            const dayReservations = reservations[dateKey];
                            const foundReservation = dayReservations.find(r => r.id === reservationToEdit.id);
                            if (foundReservation) {
                                oldDateKey = dateKey;
                                break;
                            }
                        }
                        
                        const newDateKey = formatDateKey(new Date(reservationData.start_time));
                        
                        // 古い日付から削除
                        if (oldDateKey && reservations[oldDateKey]) {
                            reservations[oldDateKey] = reservations[oldDateKey].filter(r => r.id !== reservationToEdit.id);
                            if (reservations[oldDateKey].length === 0) {
                                delete reservations[oldDateKey];
                            }
                        }
                        
                        // 新しい日付に追加
                        if (!reservations[newDateKey]) {
                            reservations[newDateKey] = [];
                        }
                        reservations[newDateKey].push(updatedReservation);
                        
                        
                        
                        // 編集モードフラグをリセット
                        isEditingReservation = false;
                        currentReservation = null;
                        reservationToEdit = null;
                        
                        showMessage('予約が更新されました。', 'success');
                    } else {
                        // 新規作成モード：新しい予約を追加
                        const reservation = {
                            id: reservationData.id,
                            userId: reservationData.user_id || reservationData.user?.id,
                            time: reservationData.start_time.split('T')[1].substring(0, 5), // HH:MM形式に変換
                            duration: extractDurationFromCourse(reservationData.course),
                            customer: reservationData.name || reservationData.user?.name || '未設定',
                            phone: reservationData.user?.phone_number || '',
                            email: reservationData.user?.email || '',
                            note: reservationData.note || '',
                            status: reservationData.status,
                            createdAt: reservationData.created_at,
                            updatedAt: reservationData.updated_at,
                            effective_interval_minutes: reservationData.effective_interval_minutes ?? 10
                        };

                        const dateKey = formatDateKey(new Date(reservationData.start_time));
                        if (!reservations[dateKey]) {
                            reservations[dateKey] = [];
                        }
                        reservations[dateKey].push(reservation);

                        
                        
                        showMessage('予約が作成されました。', 'success');
                    }

                    // カレンダーを再描画
                    generateTimeSlots();

                    closeBookingModal();
    } else {
                    showMessage(`予約の作成に失敗しました: ${data.message}`, 'error');
    }
  })
  .catch(error => {
                console.error('Error creating booking:', error);
                showMessage('予約の作成中にエラーが発生しました。', 'error');
            });
        }

        // 予約詳細モーダルを開く
        function openReservationDetailModal(reservation) {

            // 最新の予約データを取得
            let latestReservation = null;
            for (const dateKey of Object.keys(reservations)) {
                const dayReservations = reservations[dateKey];
                const foundReservation = dayReservations.find(r => r.id === reservation.id);
                if (foundReservation) {
                    latestReservation = foundReservation;
                    break;
                }
            }
            
            // 最新のデータが見つからない場合は元のデータを使用
            if (!latestReservation) {
                latestReservation = reservation;
            }
            
            console.log('🔍 Opening modal with reservation data:', {
                original: {
                    time: reservation.time,
                    date: reservation.date,
                    dateKey: reservation.dateKey,
                    start_time: reservation.start_time,
                    createdAt: reservation.createdAt,
                    updatedAt: reservation.updatedAt
                },
                latest: {
                    time: latestReservation.time,
                    createdAt: latestReservation.createdAt,
                    updatedAt: latestReservation.updatedAt,
                    date: latestReservation.date,
                    dateKey: latestReservation.dateKey,
                    start_time: latestReservation.start_time,
                    fullReservationObject: latestReservation
                }
            });
            
            // 予約データの妥当性チェック
            if (!validateReservationData(latestReservation)) {
                showMessage('予約データが無効です', 'error');
                return;
            }
            
            // 現在の予約を保存（最新のデータを使用）
            currentReservation = latestReservation;
            
            // 予約の実際の日付を特定
            let actualDate = '';
            for (const dateKey of Object.keys(reservations)) {
                const dayReservations = reservations[dateKey];
                const foundReservation = dayReservations.find(r => r.id === latestReservation.id);
                if (foundReservation) {
                    const [year, month, day] = dateKey.split('-').map(Number);
                    const date = new Date(year, month - 1, day);
                    actualDate = date.toLocaleDateString('ja-JP', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric',
                        weekday: 'long'
                    });
                    break;
                }
            }
            
            // ステータスに応じた色とアイコンを設定
            const statusConfig = {
                'tentative': { color: 'warning', icon: '⏳', text: '仮予約' },
                'confirmed': { color: 'success', icon: '✓', text: '確認済み' },
                'completed': { color: 'info', icon: '✅', text: '完了' }
            };
            
            const status = statusConfig[latestReservation.status] || { color: 'secondary', icon: '❓', text: latestReservation.status };
            
            // Create customer name HTML
            const customerNameHTML = latestReservation.userId ? 
                `<a href="/admin/users/${latestReservation.userId}" target="_blank" class="customer-link">${latestReservation.customer}</a>` : 
                latestReservation.customer;
            
            const modalContent = document.getElementById('reservationDetailContent');
            modalContent.innerHTML = `
                <div class="reservation-detail-container">
                    <!-- 編集フォーム -->
                    <form id="reservationEditForm" onsubmit="saveReservationChanges(event)">
                    <!-- ヘッダー情報 -->
                    <div class="reservation-header">
                        <div class="header-top">
                            <div class="customer-name-header">
                                <span class="customer-name-large">${latestReservation.customer}</span>
                                    <button type="button" class="btn btn-sm btn-outline-light change-user-btn" onclick="openUserSelectionModal()">
                                        <i class="fas fa-user-edit"></i> 変更
                                    </button>
                            </div>
                            <div class="reservation-status status-${status.color}">
                                    <select id="edit-status" class="form-select status-select" onchange="updateCalendarOnStatusChange()">
                                        <option value="tentative" ${latestReservation.status === 'tentative' ? 'selected' : ''}>仮予約</option>
                                        <option value="confirmed" ${latestReservation.status === 'confirmed' ? 'selected' : ''}>確認済み</option>
                                        <option value="completed" ${latestReservation.status === 'completed' ? 'selected' : ''}>完了</option>
                                    </select>
                            </div>
                        </div>
                        <div class="header-bottom">
                            <div class="header-detail-item">
                                <span class="header-label">予約日時</span>
                                <span class="header-value">${actualDate || '日付不明'} ${latestReservation.time}</span>
                            </div>
                            <div class="header-detail-item">
                                <span class="header-label">コース</span>
                                    <select id="edit-course" class="form-select course-select" onchange="updateCalendarOnCourseChange()">
                                        <option value="40分" ${latestReservation.duration === 40 ? 'selected' : ''}>40分</option>
                                        <option value="60分" ${latestReservation.duration === 60 ? 'selected' : ''}>60分</option>
                                        <option value="80分" ${latestReservation.duration === 80 ? 'selected' : ''}>80分</option>
                                    </select>
                                </div>
                                <div class="header-detail-item">
                                    <span class="header-label">準備時間</span>
                                    <span class="header-value">
                                        <select id="edit-interval" class="interval-select" onchange="updateIntervalOnChange()">
                                            <option value="0" ${(latestReservation.effective_interval_minutes ?? 10) === 0 ? 'selected' : ''}>0分</option>
                                            <option value="5" ${(latestReservation.effective_interval_minutes ?? 10) === 5 ? 'selected' : ''}>5分</option>
                                            <option value="10" ${(latestReservation.effective_interval_minutes ?? 10) === 10 ? 'selected' : ''}>10分</option>
                                            <option value="15" ${(latestReservation.effective_interval_minutes ?? 10) === 15 ? 'selected' : ''}>15分</option>
                                            <option value="20" ${(latestReservation.effective_interval_minutes ?? 10) === 20 ? 'selected' : ''}>20分</option>
                                            <option value="30" ${(latestReservation.effective_interval_minutes ?? 10) === 30 ? 'selected' : ''}>30分</option>
                                        </select>
                                    </span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- お客様基本情報 -->
                    <div class="customer-basic-info">
                        <div class="customer-phone">
                            ${latestReservation.phone || '電話番号未記入'}
                        </div>
                        <div class="customer-email">
                            ${latestReservation.email || 'メールアドレス未記入'}
                        </div>
                    </div>
                    
                        <!-- メモ -->
                        <div class="notes-section">
                            <div class="section-title">メモ</div>
                            <textarea id="edit-note" class="form-control" rows="3" placeholder="メモを入力してください">${latestReservation.note || ''}</textarea>
                        </div>
                    </form>
                    
                    <!-- 回数券と利用履歴を横並びで表示 -->
                    <div class="tickets-history-container">
                    <!-- 回数券 -->
                    <div class="tickets-section">
                        <div class="section-title">回数券</div>
                        <div class="tickets-content" id="tickets-content">
                            <div class="loading">読み込み中...</div>
                        </div>
                    </div>
                    
                        <!-- 利用履歴 -->
                    <div class="reservation-history-section">
                            <div class="section-title">利用履歴</div>
                        <div class="history-content" id="history-content">
                            <div class="loading">読み込み中...</div>
                        </div>
                        </div>
                    </div>
                    
                    <!-- システム情報 -->
                    <div class="system-info-section">
                        <div class="detail-item">
                            <span class="detail-label">作成日時</span>
                            <span class="detail-value">${new Date(latestReservation.createdAt).toLocaleString('ja-JP')}</span>
                        </div>
                        ${(function() {
                            console.log('🔍 Checking timestamps for 変更日時:', {
                                createdAt: latestReservation.createdAt,
                                updatedAt: latestReservation.updatedAt,
                                created_at: latestReservation.created_at,
                                updated_at: latestReservation.updated_at,
                                createdTime: new Date(latestReservation.createdAt).getTime(),
                                updatedTime: latestReservation.updatedAt ? new Date(latestReservation.updatedAt).getTime() : 'null',
                                isDifferent: latestReservation.updatedAt && new Date(latestReservation.updatedAt).getTime() !== new Date(latestReservation.createdAt).getTime(),
                                allFields: Object.keys(latestReservation)
                            });
                            
                            // Check multiple possible timestamp field combinations
                            const createdTimestamp = latestReservation.createdAt || latestReservation.created_at;
                            const updatedTimestamp = latestReservation.updatedAt || latestReservation.updated_at;
                            
                            console.log('🔍 Final timestamp check:', {
                                createdTimestamp,
                                updatedTimestamp,
                                hasDifferentTimestamps: updatedTimestamp && createdTimestamp && new Date(updatedTimestamp).getTime() !== new Date(createdTimestamp).getTime()
                            });
                            
                            if (updatedTimestamp && createdTimestamp && new Date(updatedTimestamp).getTime() !== new Date(createdTimestamp).getTime()) {
                                return `
                        <div class="detail-item">
                            <span class="detail-label">変更日時</span>
                            <span class="detail-value">${new Date(updatedTimestamp).toLocaleString('ja-JP')}</span>
                        </div>`;
                            } else {
                                return '';
                            }
                        })()}
                    </div>
                </div>
            `;
            document.getElementById('reservationDetailModal').style.display = 'block';
            
            // Add click event listener to customer link
            setTimeout(() => {
                const customerLink = document.querySelector('.customer-link');
                if (customerLink) {
        
                    customerLink.addEventListener('click', function(e) {
            
                        e.preventDefault();
                        window.open(this.href, '_blank');
                    });
                } else {
                    console.log('❌ Customer link not found');
                }
            }, 100);
            
            // チケットと予約履歴を読み込み（ユーザーIDベース）
            if (latestReservation.userId) {
                loadTicketsAndHistoryForUser(latestReservation.userId);
            } else {
            loadTicketsAndHistory(latestReservation);
            }
            
            // ユーザーリストは検索時に動的に読み込み
        }

        // 予約詳細モーダルを閉じる
        function closeReservationDetailModal() {
            document.getElementById('reservationDetailModal').style.display = 'none';
            currentReservation = null; // 現在の予約をリセット
        }

        // モーダル外クリックで閉じる機能
        function setupModalClickOutside() {
            const modal = document.getElementById('reservationDetailModal');
            if (modal) {
                modal.addEventListener('click', function(event) {
                    // モーダル背景（.modal）をクリックした場合のみ閉じる
                    if (event.target === modal) {
                        closeReservationDetailModal();
                    }
                });
            }
        }

        // チケットと利用履歴を読み込み
        function loadTicketsAndHistory(reservation) {
            // チケット情報を読み込み
            loadTickets(reservation);
            // 利用履歴を読み込み
            loadReservationHistory(reservation);
        }

        // ユーザーIDでチケットと利用履歴を読み込み
        function loadTicketsAndHistoryForUser(userId) {
            // チケット情報を読み込み
            loadTicketsForUser(userId);
            // 利用履歴を読み込み
            loadReservationHistoryForUser(userId);
        }

        // チケット情報を読み込み
        function loadTickets(reservation) {

            
            const ticketsContent = document.getElementById('tickets-content');
            if (!ticketsContent) {
                console.error('❌ Tickets content element not found');
                return;
            }

            // 予約データの妥当性チェック
            if (!validateReservationData(reservation)) {
                ticketsContent.innerHTML = '<div class="no-data">予約データが無効です</div>';
                return;
            }

            // ユーザーIDがある場合はチケット情報を取得
            if (reservation.userId) {
    
    
                
                // エラーハンドリングを追加
                fetch(`/admin/reservations/${reservation.id}/tickets`, {
                    headers: {
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                })
    .then(response => {
                        console.log('📡 Response status:', response.status);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
      return response.json();
    })
                    .then(data => {
            
                        if (data.success) {
                            displayTickets(data.tickets);
                        } else {
                            console.warn('⚠️ No tickets data:', data.message);
                            ticketsContent.innerHTML = '<div class="no-data">チケット情報がありません</div>';
                        }
    })
    .catch(error => {
                        console.error('❌ Error loading tickets:', error);
                        console.error('❌ Error details:', {
                            message: error.message,
                            stack: error.stack,
                            reservationId: reservation.id,
                            userId: reservation.userId
                        });
                        ticketsContent.innerHTML = '<div class="no-data">チケット情報の読み込みに失敗しました</div>';
                    });
            } else {
                console.warn('⚠️ No user ID found for reservation');
                ticketsContent.innerHTML = '<div class="no-data">ユーザー情報がありません</div>';
            }
        }

        // ユーザーIDでチケット情報を読み込み
        function loadTicketsForUser(userId) {
            const ticketsContent = document.getElementById('tickets-content');
            if (!ticketsContent) {
                console.error('❌ Tickets content element not found');
                return;
            }

            // ユーザーIDがある場合はチケット情報を取得
            if (userId) {
                fetch(`/admin/users/${userId}/tickets.json`)
                    .then(response => {
                        console.log('📡 User tickets response status:', response.status);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(tickets => {
                        console.log('📡 User tickets data:', tickets);
                        displayUserTickets(tickets);
                    })
                    .catch(error => {
                        console.error('❌ Error loading user tickets:', error);
                        ticketsContent.innerHTML = '<div class="no-data">チケット情報の読み込みに失敗しました</div>';
                    });
            } else {
                console.warn('⚠️ No user ID provided');
                ticketsContent.innerHTML = '<div class="no-data">ユーザー情報がありません</div>';
            }
        }

        // ユーザーチケット情報を表示
        function displayUserTickets(tickets) {
            const ticketsContent = document.getElementById('tickets-content');
            if (!ticketsContent) {
                console.error('❌ Tickets content element not found in displayUserTickets');
                return;
            }

            if (!tickets || tickets.length === 0) {
                console.log('ℹ️ No user tickets to display');
                ticketsContent.innerHTML = '<div class="no-data">チケットがありません</div>';
                return;
            }

            // Sort tickets by newest first (assuming created_at or issued_at field exists)
            const sortedTickets = tickets.sort((a, b) => {
                const dateA = new Date(a.created_at || a.issued_at || a.expires_at || 0);
                const dateB = new Date(b.created_at || b.issued_at || b.expires_at || 0);
                return dateB - dateA; // Newest first
            });

            // Limit to 5 tickets like the original
            const limitedTickets = sortedTickets.slice(0, 5);

            const ticketsHtml = limitedTickets.map(ticket => {
                const isExpired = ticket.remaining === 0 || new Date(ticket.expires_at) < new Date();
                const expiryDate = ticket.expires_at ? new Date(ticket.expires_at).toLocaleDateString('ja-JP') : '無期限';
                
                return `
                    <div class="ticket-item ${isExpired ? 'expired' : ''}">
                        <div class="ticket-checkbox">□</div>
                        <div class="ticket-info">
                            <div class="ticket-name">${ticket.name}</div>
                            <div class="ticket-details">残${ticket.remaining}枚 / 有効期限:${expiryDate}</div>
                        </div>
                    </div>
                `;
            }).join('');

            ticketsContent.innerHTML = ticketsHtml;
        }

        // チケット情報を表示
        function displayTickets(tickets) {

            
            const ticketsContent = document.getElementById('tickets-content');
            if (!ticketsContent) {
                console.error('❌ Tickets content element not found in displayTickets');
                return;
            }

            if (!tickets || tickets.length === 0) {
                console.log('ℹ️ No tickets to display');
                ticketsContent.innerHTML = '<div class="no-data">チケットがありません</div>';
                return;
            }


            
            const ticketsHtml = tickets.map(ticket => {
                const isExpired = ticket.remaining_count === 0 || new Date(ticket.expiry_date) < new Date();
                const expiryDate = new Date(ticket.expiry_date).toLocaleDateString('ja-JP');
                

                
                return `
                    <div class="ticket-item ${isExpired ? 'expired' : ''}">
                        <div class="ticket-checkbox">□</div>
                        <div class="ticket-info">
                            <div class="ticket-name">${ticket.ticket_template_name}</div>
                            <div class="ticket-details">残${ticket.remaining_count}${ticket.unit_type} / 有効期限:${expiryDate}</div>
          </div>
        </div>
      `;
            }).join('');


            ticketsContent.innerHTML = ticketsHtml;
        }

        // ユーザーIDで利用履歴を読み込み
        function loadReservationHistoryForUser(userId) {
            const historyContent = document.getElementById('history-content');
            if (!historyContent) return;

            // ユーザーIDがある場合は利用履歴を取得
            if (userId) {
                fetch(`/admin/users/${userId}/history.json`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('📡 User history data:', data);
                        if (data.success) {
                            displayReservationHistory(data.usages);
                        } else {
                            historyContent.innerHTML = '<div class="no-data">利用履歴がありません</div>';
                        }
                    })
                    .catch(error => {
                        console.error('❌ Error loading user history:', error);
                        historyContent.innerHTML = '<div class="no-data">利用履歴の読み込みに失敗しました</div>';
                    });
            } else {
                historyContent.innerHTML = '<div class="no-data">ユーザー情報がありません</div>';
            }
        }

        // 利用履歴を読み込み
        function loadReservationHistory(reservation) {

            
            const historyContent = document.getElementById('history-content');
            if (!historyContent) return;

            // 予約データの妥当性チェック
            if (!validateReservationData(reservation)) {
                historyContent.innerHTML = '<div class="no-data">予約データが無効です</div>';
                return;
            }

            // ユーザーIDがある場合は利用履歴を取得
            if (reservation.userId) {
                fetch(`/admin/reservations/${reservation.id}/history`, {
                    headers: {
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            displayReservationHistory(data.usages);
                        } else {
                            historyContent.innerHTML = '<div class="no-data">利用履歴がありません</div>';
                        }
                    })
                    .catch(error => {
                        console.error('❌ Error loading usage history:', error);
                        console.error('❌ Error details:', {
                            message: error.message,
                            stack: error.stack,
                            reservationId: reservation.id,
                            userId: reservation.userId
                        });
                        historyContent.innerHTML = '<div class="no-data">利用履歴の読み込みに失敗しました</div>';
                    });
            } else {
                historyContent.innerHTML = '<div class="no-data">ユーザー情報がありません</div>';
            }
        }

        // 利用履歴を表示
        function displayReservationHistory(usages) {
            const historyContent = document.getElementById('history-content');
            if (!historyContent) return;

            if (!usages || usages.length === 0) {
                historyContent.innerHTML = '<div class="no-data">利用履歴がありません</div>';
                return;
            }

            const historyHtml = usages.map(usage => {
                // Backend returns date and time as separate fields
                const displayDate = usage.date || 'Unknown Date';
                const displayTime = usage.time || 'Unknown Time';
                const displayName = usage.course || usage.ticket_name || 'Unknown';
                const typeIcon = usage.type === 'reservation' ? '📅' : '🎫';
                const typeText = usage.type === 'reservation' ? '予約' : 'チケット使用';
                
                return `
                    <div class="history-item-compact">
                        <span class="history-icon-small">${typeIcon}</span>
                        <span class="history-content-compact">
                            <strong>${displayName}</strong> - ${displayDate} ${displayTime} (${typeText})
                        </span>
                    </div>
                `;
            }).join('');

            historyContent.innerHTML = historyHtml;
        }



        // ステータスアイコンを取得
        function getStatusIcon(status) {
            const statusIcons = {
                'confirmed': '✅',
                'tentative': '⏳',
                'cancelled': '❌',
                'completed': '✅',
                'no_show': '⚠️'
            };
            return statusIcons[status] || '❓';
        }



        // 予約を編集
        function editReservation() {
            if (!currentReservation) {
                showMessage('編集する予約が見つかりませんでした。', 'error');
                return;
            }
            
            console.log('✏️ Editing reservation:', currentReservation);
            
            // 編集モードフラグを設定
            isEditingReservation = true;
            
            // 予約データを保存（モーダルを閉じる前に）
            reservationToEdit = { ...currentReservation };
            
            // 予約の実際の日付を特定（reservationsオブジェクトから該当する日付キーを探す）
            let actualReservationDate = null;
            let foundDateKey = null;
            
            // すべての日付キーをチェックして該当する予約を探す
            for (const dateKey of Object.keys(reservations)) {
                const dayReservations = reservations[dateKey];
                const foundReservation = dayReservations.find(r => r.id === currentReservation.id);
                
                if (foundReservation) {
                    foundDateKey = dateKey;
                    // 日付キーから実際の日付を計算
                    const [year, month, day] = dateKey.split('-').map(Number);
                    const [hours, minutes] = currentReservation.time.split(':').map(Number);
                    actualReservationDate = new Date(year, month - 1, day, hours, minutes, 0, 0);
                    break;
                }
            }
            
            // 見つからない場合はcreatedAtから計算（フォールバック）
            if (!actualReservationDate) {
                console.warn('⚠️ Could not find reservation in date keys, using createdAt as fallback');
                actualReservationDate = new Date(reservationToEdit.createdAt);
                const [hours, minutes] = reservationToEdit.time.split(':').map(Number);
                actualReservationDate.setHours(hours, minutes, 0, 0);
            }
            
            console.log('📅 Actual reservation date:', actualReservationDate, 'from date key:', foundDateKey);
            
            // 予約詳細モーダルを閉じる
            closeReservationDetailModal();
            
            // 予約編集モーダルを開く
            openBookingModal(actualReservationDate, reservationToEdit.time);
            
            // フォームフィールドを既存の予約データで埋める（モーダルが開いた後に実行）
            setTimeout(() => {
                const customerNameField = document.getElementById('customerName');
                const customerPhoneField = document.getElementById('customerPhone');
                const customerEmailField = document.getElementById('customerEmail');
                const bookingDurationField = document.getElementById('bookingDuration');
                const bookingNoteField = document.getElementById('bookingNote');
                const bookingStatusField = document.getElementById('bookingStatus');
                
                if (customerNameField) customerNameField.value = reservationToEdit.customer;
                if (customerPhoneField) customerPhoneField.value = reservationToEdit.phone;
                if (customerEmailField) customerEmailField.value = reservationToEdit.email;
                if (bookingDurationField) bookingDurationField.value = reservationToEdit.duration;
                if (bookingNoteField) bookingNoteField.value = reservationToEdit.note;
                if (bookingStatusField) bookingStatusField.value = reservationToEdit.status;
            }, 200);
            
            showMessage('予約を編集できます。', 'info');
        }

        // 予約を削除
        function deleteReservation() {
            if (!currentReservation) {
                showMessage('削除する予約が見つかりませんでした。', 'error');
    return;
  }
  
            const confirmed = confirm(`この予約を完全に削除しますか？\n\nお客様: ${currentReservation.customer}\n日時: ${currentReservation.time}\nコース: ${currentReservation.duration}分\n\nこの操作は取り消せません。`);
            
            if (!confirmed) {
                return;
            }
            
            console.log('🗑️ Deleting reservation:', currentReservation);
            
            // 視覚的なフィードバック: 削除アニメーションを開始
            const reservationBlocks = document.querySelectorAll('.reservation-block');
            reservationBlocks.forEach(block => {
                if (block.textContent.includes(currentReservation.customer) && 
                    block.textContent.includes(currentReservation.time)) {
                    block.classList.add('deleting');
                }
            });
            
            // バックエンドに削除リクエストを送信
            fetch('/admin/reservations/delete_reservation', {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
    },
                body: JSON.stringify({
                    reservation_id: currentReservation.id
  })
  })
            .then(response => response.json())
  .then(data => {
    if (data.success) {
                    console.log('✅ Reservation deleted successfully');
                    
                    // ローカルデータから予約を削除
                    // 予約の実際の日付を特定するために、すべての日付キーをチェック
                    console.log('🗑️ Searching for reservation ID:', currentReservation.id, 'in all date keys');
                    console.log('🗑️ Available date keys:', Object.keys(reservations));
                    
                    let foundDateKey = null;
                    let foundReservation = null;
                    
                    // すべての日付キーをチェックして該当する予約を探す
                    for (const dateKey of Object.keys(reservations)) {
                        const dayReservations = reservations[dateKey];
                        const matchingReservation = dayReservations.find(r => r.id === currentReservation.id);
                        
                        if (matchingReservation) {
                            foundDateKey = dateKey;
                            foundReservation = matchingReservation;
                            console.log(`🗑️ Found reservation in date key: ${dateKey}`);
                            break;
                        }
                    }
                    
                    if (foundDateKey && foundReservation) {
                        const beforeCount = reservations[foundDateKey].length;
                        reservations[foundDateKey] = reservations[foundDateKey].filter(r => r.id !== currentReservation.id);
                        const afterCount = reservations[foundDateKey].length;
                        
                        console.log(`🗑️ Removed reservation: ${beforeCount} → ${afterCount} reservations for ${foundDateKey}`);
                        
                        if (reservations[foundDateKey].length === 0) {
                            delete reservations[foundDateKey];
                            console.log(`🗑️ Deleted empty date key: ${foundDateKey}`);
                        }
  } else {
                        console.warn(`⚠️ Reservation ID ${currentReservation.id} not found in any date key`);
                        console.warn(`⚠️ Available reservations:`, reservations);
                    }
                    
                    // カレンダーを再描画
                    generateTimeSlots();
      
      // モーダルを閉じる
                    closeReservationDetailModal();
                    
                    // 成功メッセージを表示
                    showMessage('予約が削除されました。', 'success');
                    
                    // デバッグ: 削除後の予約データを確認
                    console.log('✅ After deletion - reservations data:', reservations);
    } else {
                    console.error('❌ Failed to delete reservation:', data.message);
                    showMessage(`予約の削除に失敗しました: ${data.message}`, 'error');
    }
  })
  .catch(error => {
                console.error('❌ Error deleting reservation:', error);
                showMessage('予約の削除中にエラーが発生しました。', 'error');
            });
        }

        // 予約をキャンセル（削除）
        function cancelReservation() {
            if (!currentReservation) {
                showMessage('キャンセルする予約が見つかりませんでした。', 'error');
                return;
            }
            
            const confirmed = confirm(`この予約を完全に削除しますか？\n\nお客様: ${currentReservation.customer}\n日時: ${currentReservation.time}\nコース: ${currentReservation.duration}分\n\nこの操作は取り消せません。`);
            
            if (!confirmed) {
    return;
  }
  

            
            // バックエンドに削除リクエストを送信
            fetch('/admin/reservations/delete_reservation', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                },
                body: JSON.stringify({ reservation_id: currentReservation.id })
            })
            .then(response => response.json())
  .then(data => {
    if (data.success) {

                    

                    
                    // キャンセル表示エリアに追加（削除前に予約データと日付を保存）
                    const reservationToCancel = { ...currentReservation };
                    
                    // 予約の実際の日付を特定（dateKeyから抽出）- 削除前に実行
                    let actualReservationDate = null;
                    let foundDateKey = null;
                    
                    // すべての日付キーをチェックして該当する予約を探す
                    for (const dateKey of Object.keys(reservations)) {
                        const dayReservations = reservations[dateKey];
                        const foundReservation = dayReservations.find(r => r.id === reservationToCancel.id);
                        
                        if (foundReservation) {
                            foundDateKey = dateKey;
                            const [year, month, day] = dateKey.split('-').map(Number);
                            actualReservationDate = new Date(year, month - 1, day);
                            break;
                        }
                    }
                    
                    // 見つからない場合はcreatedAtから計算
                    if (!actualReservationDate) {
                        actualReservationDate = new Date(reservationToCancel.createdAt);
                    }
                    
                    // ローカルデータから予約を削除
                    if (foundDateKey) {
                        const beforeCount = reservations[foundDateKey].length;
                        reservations[foundDateKey] = reservations[foundDateKey].filter(r => r.id !== reservationToCancel.id);
                        const afterCount = reservations[foundDateKey].length;
                        
                        if (reservations[foundDateKey].length === 0) {
                            delete reservations[foundDateKey];
                        }
                    }
                    
                    addToCancellationDisplay({
                        ...reservationToCancel,
                        start_time: actualReservationDate.toISOString()
                    });
                    
                    // カレンダーを再描画
                    generateTimeSlots();
                    
                    // キャンセル表示を更新（DOM操作後に確実に更新）
                    setTimeout(() => {
                        updateCancellationDisplay();
                    }, 50);
                    
                    // モーダルを閉じる
                    closeReservationDetailModal();
                    
                    showMessage('予約がキャンセル（削除）されました。', 'success');
                } else {
                    console.error('❌ Failed to cancel reservation:', data.message);
                    showMessage(`予約のキャンセルに失敗しました: ${data.message}`, 'error');
    }
  })
  .catch(error => {
                console.error('❌ Error cancelling reservation:', error);
                showMessage('予約のキャンセル中にエラーが発生しました。', 'error');
            });
        }

        // コースから時間を抽出する関数
        function extractDurationFromCourse(courseString) {
            if (!courseString) return 60;
            
            const match = courseString.match(/(\d+)分/);
            return match ? parseInt(match[1]) : 60;
        }

        // 重複チェック関数
        function checkForOverlap(dateTime, duration) {
            const startTime = new Date(dateTime);
            const endTime = new Date(startTime.getTime() + parseInt(duration) * 60 * 1000);
            const dateKey = formatDateKey(startTime);
            
            // 指定日の予約を取得
            const dayReservations = reservations[dateKey] || [];
            
            // 重複チェック（インターバル時間も含む）
            for (const reservation of dayReservations) {
                const reservationStart = new Date(`${dateKey}T${reservation.time}`);
                const reservationEnd = new Date(reservationStart.getTime() + reservation.duration * 60 * 1000);
                
                // インターバル時間を取得（effective_interval_minutesを使用）
                const intervalMinutes = reservation.effective_interval_minutes ?? 10;
                const reservationEndWithInterval = new Date(reservationEnd.getTime() + intervalMinutes * 60 * 1000);
                
                // 現在の予約のインターバル時間（デフォルト10分）
                const currentIntervalMinutes = 10; // デフォルト10分
                const currentEndWithInterval = new Date(endTime.getTime() + currentIntervalMinutes * 60 * 1000);
                
                // 重複判定（インターバル時間も含む）
                if (startTime < reservationEndWithInterval && currentEndWithInterval > reservationStart) {
                    return true; // 重複あり
                }
            }
            
            return false; // 重複なし
        }

        // 予約可能時間をハイライトする関数
        function highlightAvailableSlots() {
            const dateTime = document.getElementById('bookingDate')?.value;
            const duration = document.getElementById('bookingDuration')?.value;
            
            if (!dateTime || !duration) return;
            
            const startTime = new Date(dateTime);
            const endTime = new Date(startTime.getTime() + parseInt(duration) * 60 * 1000);
            const dateKey = formatDateKey(startTime);
            
            // 既存のハイライトをクリア
            document.querySelectorAll('.time-slot').forEach(slot => {
                slot.classList.remove('overlap-warning', 'available-slot');
            });
            
            // 指定日の予約を取得
            const dayReservations = reservations[dateKey] || [];
            
            // 各時間スロットをチェック
            document.querySelectorAll('.time-slot').forEach(slot => {
                const slotTime = slot.getAttribute('data-time');
                if (!slotTime) return;
                
                const slotStart = new Date(`${dateKey}T${slotTime}`);
                const slotEnd = new Date(slotStart.getTime() + parseInt(duration) * 60 * 1000);
                
                // 重複チェック（インターバル時間も含む）
                let hasOverlap = false;
                for (const reservation of dayReservations) {
                    const reservationStart = new Date(`${dateKey}T${reservation.time}`);
                    const reservationEnd = new Date(reservationStart.getTime() + reservation.duration * 60 * 1000);
                    
                    // インターバル時間を取得（effective_interval_minutesを使用）
                    const intervalMinutes = reservation.effective_interval_minutes ?? 10;
                    const reservationEndWithInterval = new Date(reservationEnd.getTime() + intervalMinutes * 60 * 1000);
                    
                    // 現在のスロットのインターバル時間（デフォルト10分）
                    const currentIntervalMinutes = 10; // デフォルト10分
                    const slotEndWithInterval = new Date(slotEnd.getTime() + currentIntervalMinutes * 60 * 1000);
                    
                    if (slotStart < reservationEndWithInterval && slotEndWithInterval > reservationStart) {
                        hasOverlap = true;
                        break;
                    }
                }
                
                if (hasOverlap) {
                    slot.classList.add('overlap-warning');
                } else {
                    slot.classList.add('available-slot');
                }
            });
        }

        // ドラッグ&ドロップ機能
        let isDragging = false;
        let draggedReservationData = null;

        function handleDragStart(e) {
            console.log('🎯 handleDragStart called for target:', e.target);
            isDragging = true;
            
            // The target should be the reservation block itself
            const reservationBlock = e.target;
            
            if (!reservationBlock || !reservationBlock.classList.contains('reservation-block')) {
                console.error('❌ Target is not a reservation block');
                return;
            }
            
            const reservationId = reservationBlock.dataset.reservationId;
            
            if (!reservationId) {
                console.error('❌ Reservation ID not found');
                return;
            }
            
            console.log('🎯 Drag started for reservation:', reservationId, 'from block:', reservationBlock);
            
            // Store the original reservation data for better debugging
            const reservationData = JSON.parse(reservationBlock.dataset.reservationData);
            draggedReservationData = reservationData; // Store globally
            
            console.log('🎯 Original reservation data:', {
                id: reservationData.id,
                customer: reservationData.customer,
                time: reservationData.time,
                date: reservationBlock.dataset.originalDateKey
            });
            
            e.dataTransfer.setData('text/plain', reservationId);
            reservationBlock.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
            
            // Use the original block as the drag image so it follows the cursor
            e.dataTransfer.setDragImage(reservationBlock, 50, 25);
            
            // Prevent other drag events from firing
            e.stopPropagation();
        }

        function handleDragEnd(e) {
            // The target should be the reservation block itself
            const reservationBlock = e.target;
            
            if (reservationBlock && reservationBlock.classList.contains('reservation-block')) {
                reservationBlock.classList.remove('dragging');
            }
            
            document.querySelectorAll('.schedule-cell').forEach(cell => {
                cell.classList.remove('drag-over');
                cell.classList.remove('drag-over-invalid');
            });
            
                            // 少し遅延してからフラグをリセット（誤クリックを防ぐ）
                setTimeout(() => {
                    isDragging = false;
                    draggedReservationData = null; // Clear global data
                }, 100);
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            
            const cell = e.target.closest('.schedule-cell');
            if (cell) {
                // Clear all previous drag-over states
                document.querySelectorAll('.schedule-cell').forEach(c => {
                    c.classList.remove('drag-over');
                    c.classList.remove('drag-over-invalid');
                });
                
                // Get the reservation data from global variable
                if (draggedReservationData) {
                    const reservationData = draggedReservationData;
                    const duration = reservationData.duration || 60;
                    const interval = reservationData.effective_interval_minutes ?? 10;
                    const totalDuration = duration + interval;
                    
                    // Calculate how many cells this reservation would occupy (10-minute slots)
                    const cellsToOccupy = Math.ceil(totalDuration / 10);
                    
                    // Check if all required cells are within business hours
                    let currentCell = cell;
                    let allCellsValid = true;
                    let cellsToCheck = [];
                    
                    // First, collect all cells that would be occupied
                    for (let i = 0; i < cellsToOccupy && currentCell; i++) {
                        cellsToCheck.push(currentCell);
                        
                        // Move to the next row (next time slot) in the same day column
                        const currentRow = currentCell.parentElement;
                        const nextRow = currentRow.nextElementSibling;
                        if (nextRow) {
                            const nextCell = nextRow.querySelector(`[data-day="${currentCell.dataset.day}"]`);
                            if (nextCell && nextCell.classList.contains('schedule-cell')) {
                                currentCell = nextCell;
                            } else {
                                break; // No more cells in this day column
                            }
                        } else {
                            break; // No more rows
                        }
                    }
                    
                    // Check if all cells are within business hours
                    for (let checkCell of cellsToCheck) {
                        const dayOfWeek = parseInt(checkCell.dataset.day);
                        const timeStr = checkCell.dataset.time;
                        
                        if (!isBusinessHour(dayOfWeek, timeStr)) {
                            allCellsValid = false;
                            break;
                        }
                    }
                    
                    // Only highlight if all cells are valid
                    if (allCellsValid) {
                        for (let checkCell of cellsToCheck) {
                            checkCell.classList.add('drag-over');
                        }
                    } else {
                        // Show invalid drop effect and visual feedback
                        e.dataTransfer.dropEffect = 'none';
                        for (let checkCell of cellsToCheck) {
                            checkCell.classList.add('drag-over-invalid');
                        }
                    }
                } else {
                    // If no dragged data, check if current cell is within business hours
                    const dayOfWeek = parseInt(cell.dataset.day);
                    const timeStr = cell.dataset.time;
                    
                    if (isBusinessHour(dayOfWeek, timeStr)) {
                        cell.classList.add('drag-over');
                    } else {
                        e.dataTransfer.dropEffect = 'none';
                    }
                }
            }
        }

        function handleDragEnter(e) {
            e.preventDefault();
            if (e.target.classList.contains('schedule-cell')) {
                e.target.classList.add('drag-over');
            }
        }

        function handleDragLeave(e) {
            if (e.target.classList.contains('schedule-cell')) {
                e.target.classList.remove('drag-over');
            }
        }

        function handleDrop(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // ドラッグオーバー状態をクリア
            document.querySelectorAll('.schedule-cell').forEach(cell => {
                cell.classList.remove('drag-over');
                cell.classList.remove('drag-over-invalid');
            });
            
            const cell = e.target.closest('.schedule-cell');
            if (!cell) return;
            
            const reservationId = e.dataTransfer.getData('text/plain');
            console.log('🎯 Drop detected for reservation:', reservationId, 'at cell:', cell.dataset.day, cell.dataset.time);
            
            if (!reservationId || reservationId.trim() === '') {
                console.log('❌ Empty reservation ID, ignoring drop');
                return;
            }
            
            const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
            
            if (!reservationBlock) {
                console.log('❌ Reservation block not found for ID:', reservationId);
                return;
            }
            
            const reservationData = JSON.parse(reservationBlock.dataset.reservationData);
            const newDay = parseInt(cell.dataset.day);
            const newTime = cell.dataset.time;
            
            // Check if the target time slot is within business hours
            if (!isBusinessHour(newDay, newTime)) {
                showMessage('営業時間外のため、この時間に予約を移動できません。', 'error');
                return;
            }
            
            // Check if all required time slots for the reservation are within business hours
            const duration = reservationData.duration || 60;
            const interval = reservationData.effective_interval_minutes ?? 10;
            const totalDuration = duration + interval;
            const cellsToOccupy = Math.ceil(totalDuration / 10);
            
            let currentCell = cell;
            let allSlotsValid = true;
            
            for (let i = 0; i < cellsToOccupy && currentCell; i++) {
                const dayOfWeek = parseInt(currentCell.dataset.day);
                const timeStr = currentCell.dataset.time;
                
                if (!isBusinessHour(dayOfWeek, timeStr)) {
                    allSlotsValid = false;
                    break;
                }
                
                // Move to the next row (next time slot) in the same day column
                const currentRow = currentCell.parentElement;
                const nextRow = currentRow.nextElementSibling;
                if (nextRow) {
                    const nextCell = nextRow.querySelector(`[data-day="${currentCell.dataset.day}"]`);
                    if (nextCell && nextCell.classList.contains('schedule-cell')) {
                        currentCell = nextCell;
                    } else {
                        break; // No more cells in this day column
                    }
                } else {
                    break; // No more rows
                }
            }
            
            if (!allSlotsValid) {
                showMessage('予約時間が営業時間外に及ぶため、この位置に移動できません。', 'error');
                return;
            }
            
            // 新しい日付を計算
            const newDate = new Date(currentWeekStart);
            newDate.setDate(newDate.getDate() + newDay);
            const newDateKey = formatDateKey(newDate);
            
            // 重複チェック
            console.log('🔍 Checking for overlap:', {
                reservationId: reservationData.id,
                from: `${reservationBlock.dataset.originalDateKey} ${reservationBlock.dataset.originalTimeStr}`,
                to: `${newDateKey} ${newTime}`,
                duration: reservationData.duration,
                interval: reservationData.effective_interval_minutes ?? 10
            });
            
            // 同じ場所にドロップした場合は何もしない
            if (reservationBlock.dataset.originalDateKey === newDateKey && 
                reservationBlock.dataset.originalTimeStr === newTime) {
                console.log('⏭️ Dropped in same location, ignoring');
                return;
            }
            
            if (checkForOverlapOnDrop(newDateKey, newTime, reservationData)) {
                showMessage('この時間帯には既に予約があります。別の時間を選択してください。', 'error');
                return;
            }
            
            console.log('✅ Proceeding with reservation update');
            
            // Prevent multiple updates for the same reservation
            if (reservationBlock.dataset.updating === 'true') {
                console.log('⏭️ Reservation already being updated, skipping');
                return;
            }
            
            reservationBlock.dataset.updating = 'true';
            updateReservationTime(reservationData.id, newDateKey, newTime);
        }

        // ドロップ時の重複チェック
        function checkForOverlapOnDrop(dateKey, timeStr, reservationData) {
            const startTime = new Date(`${dateKey}T${timeStr}`);
            const endTime = new Date(startTime.getTime() + reservationData.duration * 60 * 1000);
            
            // 指定日の予約を取得（自分以外）
            const dayReservations = reservations[dateKey] || [];
            
            console.log('🔍 Checking overlaps for:', {
                dateKey: dateKey,
                timeStr: timeStr,
                reservationId: reservationData.id,
                duration: reservationData.duration,
                dayReservations: dayReservations.length
            });
            
            // 重複チェック（インターバル時間も含む）
            for (const reservation of dayReservations) {
                if (reservation.id === reservationData.id) {
                    console.log('⏭️ Skipping self:', reservation.id);
                    continue; // 自分は除外
                }
                
                const reservationStart = new Date(`${dateKey}T${reservation.time}`);
                const reservationEnd = new Date(reservationStart.getTime() + reservation.duration * 60 * 1000);
                
                // インターバル時間を取得（effective_interval_minutesを使用）
                const intervalMinutes = reservation.effective_interval_minutes ?? 10;
                const reservationEndWithInterval = new Date(reservationEnd.getTime() + intervalMinutes * 60 * 1000);
                
                // 現在の予約のインターバル時間
                const currentIntervalMinutes = reservationData.effective_interval_minutes ?? 10;
                const currentEndWithInterval = new Date(endTime.getTime() + currentIntervalMinutes * 60 * 1000);
                
                console.log('🔍 Comparing with reservation:', {
                    existingId: reservation.id,
                    existingTime: `${reservation.time} - ${new Date(reservationEndWithInterval).toTimeString().slice(0, 5)}`,
                    newTime: `${timeStr} - ${new Date(currentEndWithInterval).toTimeString().slice(0, 5)}`,
                    existingInterval: intervalMinutes,
                    newInterval: currentIntervalMinutes
                });
                
                // 重複判定（インターバル時間も含む）
                if (startTime < reservationEndWithInterval && currentEndWithInterval > reservationStart) {
                    console.log('🚫 Overlap detected:', {
                        newReservation: `${timeStr} - ${new Date(currentEndWithInterval).toTimeString().slice(0, 5)}`,
                        existingReservation: `${reservation.time} - ${new Date(reservationEndWithInterval).toTimeString().slice(0, 5)}`,
                        date: dateKey
                    });
                    return true; // 重複あり
                }
            }
            
            console.log('✅ No overlaps detected');
            return false; // 重複なし
        }

        // 予約時間を更新する関数
        function updateReservationTime(reservationId, newDateKey, newTime) {
            // 元の予約データを取得
            const originalDateKey = document.querySelector(`[data-reservation-id="${reservationId}"]`)?.dataset.originalDateKey;
            const originalTimeStr = document.querySelector(`[data-reservation-id="${reservationId}"]`)?.dataset.originalTimeStr;
            
            if (!originalDateKey || !originalTimeStr) {
                showMessage('予約データの取得に失敗しました。', 'error');
                return;
            }
            
            // 新しい開始時間をISO形式で作成
            const newStartTime = `${newDateKey}T${newTime}`;
            
            // バックエンドに更新リクエストを送信
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            
            // 予約データを取得してコース情報も含める
            const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
            const reservationData = reservationBlock ? JSON.parse(reservationBlock.dataset.reservationData) : null;
            
            fetch(`/admin/reservations/${reservationId}/update_booking`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify({
                    reservation: {
                        start_time: newStartTime,
                        course: reservationData ? `${reservationData.duration}分` : undefined
                    }
                })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.message || 'Unknown error'}`);
                    }).catch(() => {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // ローカルデータを更新
                    updateLocalReservationData(reservationId, newDateKey, newTime);
                    
                    // updatedAtフィールドを更新
                    if (data.reservation && data.reservation.updated_at) {
                        // グローバルreservationsオブジェクトのupdatedAtを更新
                        const reservationIndex = reservations[newDateKey].findIndex(r => r.id === parseInt(reservationId));
                        if (reservationIndex !== -1) {
                            reservations[newDateKey][reservationIndex].updatedAt = data.reservation.updated_at;
                        }
                        
                        // 現在開いているモーダルの変更日時を即座に更新
                        if (currentReservation && currentReservation.id === parseInt(reservationId)) {
                            console.log('🔄 Updating currentReservation after drag-and-drop:', {
                                before: {
                                    time: currentReservation.time,
                                    date: currentReservation.date,
                                    dateKey: currentReservation.dateKey,
                                    start_time: currentReservation.start_time
                                }
                            });
                            
                            currentReservation.updatedAt = data.reservation.updated_at;
                            // 日付と時間も更新
                            currentReservation.time = newTime;
                            currentReservation.date = newDateKey;
                            currentReservation.dateKey = newDateKey;
                            // start_timeも更新
                            const [hours, minutes] = newTime.split(':');
                            const newStartTime = new Date(`${newDateKey}T${hours}:${minutes}:00+09:00`);
                            currentReservation.start_time = newStartTime.toISOString();
                            
                            console.log('🔄 Updated currentReservation after drag-and-drop:', {
                                after: {
                                    time: currentReservation.time,
                                    date: currentReservation.date,
                                    dateKey: currentReservation.dateKey,
                                    start_time: currentReservation.start_time
                                }
                            });
                            
                            updateModalUpdatedAt(data.reservation.updated_at);
                        } else {
                            console.log('❌ currentReservation not found or ID mismatch:', {
                                currentReservation: currentReservation ? currentReservation.id : 'null',
                                reservationId: reservationId
                            });
                            
                            // モーダルが開いている場合は、最新のデータでcurrentReservationを更新
                            const modal = document.getElementById('reservationDetailModal');
                            console.log('🔍 Modal display status:', modal ? modal.style.display : 'modal not found');
                            
                            if (modal && modal.style.display === 'block') {
                                console.log('🔍 Modal is open, updating currentReservation...');
                                // 最新の予約データを取得してcurrentReservationを更新
                                for (const dateKey of Object.keys(reservations)) {
                                    const dayReservations = reservations[dateKey];
                                    const foundReservation = dayReservations.find(r => r.id === parseInt(reservationId));
                                    if (foundReservation) {
                                        currentReservation = foundReservation;
                                        console.log('🔄 Updated currentReservation from reservations data:', {
                                            time: currentReservation.time,
                                            date: currentReservation.date,
                                            dateKey: currentReservation.dateKey,
                                            start_time: currentReservation.start_time
                                        });
                                        break;
                                    }
                                }
                            } else {
                                console.log('🔍 Modal is not open, skipping currentReservation update');
                            }
                        }
                    }
                    
                    // カレンダーを再描画
                    console.log('🔄 Regenerating calendar after reservation move');
                    generateTimeSlots();
                    
                    showMessage('予約時間が更新されました。', 'success');
                } else {
                    showMessage(`予約の更新に失敗しました: ${data.message}`, 'error');
                }
                
                // Reset updating flag
                const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
                if (reservationBlock) {
                    reservationBlock.dataset.updating = 'false';
                }
            })
            .catch(error => {
                console.error('Error updating reservation:', error);
                showMessage('予約の更新中にエラーが発生しました。', 'error');
                
                // Reset updating flag on error
                const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
                if (reservationBlock) {
                    reservationBlock.dataset.updating = 'false';
                }
            });
        }

        // ローカル予約データを更新
        function updateLocalReservationData(reservationId, newDateKey, newTime) {
            console.log('🔄 Updating local reservation data:', {
                reservationId: reservationId,
                newDateKey: newDateKey,
                newTime: newTime
            });
            
            // 元の予約データを取得
            let originalReservationData = null;
            let originalDateKey = null;
            
            // 元の予約を見つけて削除
            for (const dateKey of Object.keys(reservations)) {
                const reservationIndex = reservations[dateKey].findIndex(r => r.id === parseInt(reservationId));
                if (reservationIndex !== -1) {
                    originalReservationData = { ...reservations[dateKey][reservationIndex] };
                    originalDateKey = dateKey;
                    reservations[dateKey].splice(reservationIndex, 1);
                    
                    // 空の配列の場合は日付キーを削除
                    if (reservations[dateKey].length === 0) {
                        delete reservations[dateKey];
                    }
                    break;
                }
            }
            
            if (!originalReservationData) {
                console.error('❌ Original reservation data not found for ID:', reservationId);
                return;
            }
            
            // 新しい場所に予約を追加
            if (!reservations[newDateKey]) {
                reservations[newDateKey] = [];
            }
            
            // 予約データを更新
            const updatedReservationData = {
                ...originalReservationData,
                time: newTime,
                date: newDateKey,
                dateKey: newDateKey,
                // start_timeも更新
                start_time: new Date(`${newDateKey}T${newTime}:00+09:00`).toISOString()
            };
            
            reservations[newDateKey].push(updatedReservationData);
            
            // DOM要素のデータ属性も更新
            const reservationBlock = document.querySelector(`[data-reservation-id="${reservationId}"]`);
            if (reservationBlock) {
                reservationBlock.dataset.originalDateKey = newDateKey;
                reservationBlock.dataset.originalTimeStr = newTime;
                reservationBlock.dataset.reservationData = JSON.stringify(updatedReservationData);
            }
            
            console.log('✅ Local reservation data updated:', {
                from: originalDateKey,
                to: newDateKey,
                reservationId: reservationId
            });
        }

        // 予約データの妥当性をチェックする関数
        function validateReservationData(reservation) {
            if (!reservation) {
                console.error('❌ Reservation is null or undefined');
                return false;
            }
            
            if (!reservation.id || reservation.id === 'null' || reservation.id === null) {
                console.error('❌ Invalid reservation ID:', reservation.id);
                return false;
            }
            
            if (!reservation.userId || reservation.userId === 'null' || reservation.userId === null) {
                console.warn('⚠️ No user ID for reservation:', reservation.id);
                // Don't return false - allow modal to open without userId
            }
            

            
            return true;
        }

                // ユーザー検索機能
        function setupUserSearch() {
            const customerNameInput = document.getElementById('customerName');
            const searchResults = document.getElementById('userSearchResults');
            
            if (!customerNameInput || !searchResults) return;
            
            // 入力イベント
            customerNameInput.addEventListener('input', function() {
                const query = this.value.trim();
                
                // デバウンス処理
                if (searchTimeout) {
                    clearTimeout(searchTimeout);
                }
                
                if (query.length < 2) {
                    hideUserSearchResults();
                    return;
                }
                
                searchTimeout = setTimeout(() => {
                    searchUsers(query);
                }, 300);
            });
            
            // フォーカスアウト時に結果を隠す
            customerNameInput.addEventListener('blur', function() {
                setTimeout(() => {
                    hideUserSearchResults();
                }, 200);
            });
            
            // フォーカス時に結果を表示（入力がある場合）
            customerNameInput.addEventListener('focus', function() {
                const query = this.value.trim();
                if (query.length >= 2) {
                    searchUsers(query);
                }
            });
        }
        
        function searchUsers(query) {

            
            fetch(`/admin/reservations/search_users?query=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayUserSearchResults(data.users);
    } else {
                        console.error('❌ User search failed:', data.message);
                        hideUserSearchResults();
    }
  })
  .catch(error => {
                    console.error('❌ Error searching users:', error);
                    hideUserSearchResults();
                });
        }
        
        function displayUserSearchResults(users) {
            const searchResults = document.getElementById('userSearchResults');
            if (!searchResults) return;
            
            if (users.length === 0) {
                searchResults.innerHTML = '<div class="user-search-item">該当するユーザーが見つかりません</div>';
                searchResults.style.display = 'block';
                return;
            }
            
            const resultsHtml = users.map(user => `
                <div class="user-search-item" onclick="selectUser(${user.id}, '${user.name}', '${user.phone_number}', '${user.email}')">
                    <div class="user-name">${user.name}</div>
                    <div class="user-details">
                        📞 ${user.phone_number || '未設定'} | 📧 ${user.email || '未設定'}
                        ${user.active_tickets > 0 ? `<span class="user-tickets"> | 🎫 残${user.active_tickets}枚</span>` : ''}
                        ${user.last_visit !== 'なし' ? ` | 📅 最終来店: ${user.last_visit}` : ''}
                    </div>
                </div>
            `).join('');
            
            searchResults.innerHTML = resultsHtml;
            searchResults.style.display = 'block';
        }
        
        function selectUser(userId, name, phone, email) {

            
            // フォームフィールドを更新
            document.getElementById('customerName').value = name;
            document.getElementById('customerPhone').value = phone;
            document.getElementById('customerEmail').value = email;
            
            // 検索結果を隠す
            hideUserSearchResults();
            
            // 成功メッセージ
            showMessage(`既存ユーザー「${name}」を選択しました`, 'success');
        }
        
        function hideUserSearchResults() {
            console.log('🔍 hideUserSearchResults called');
            const searchResults = document.getElementById('userSelectionSearchResults');
            if (searchResults) {
                searchResults.style.display = 'none';
                searchResults.innerHTML = ''; // Also clear the content
                console.log('🔍 Search results hidden and cleared');
            } else {
                console.log('🔍 Search results element not found for hiding');
            }
        }

        // キャンセル表示エリアに予約を追加
        function addToCancellationDisplay(reservation) {
            if (!reservation) {
                console.error('❌ Reservation is null or undefined');
                return;
            }
            
            // 予約の実際の日付を特定
            let actualReservationDate = null;
            
            // start_timeが利用可能な場合はそれを使用（最優先）
            if (reservation.start_time) {
                actualReservationDate = new Date(reservation.start_time);
            } else {
                // reservationsオブジェクトから検索
                for (const dateKey of Object.keys(reservations)) {
                    const dayReservations = reservations[dateKey];
                    const foundReservation = dayReservations.find(r => r.id === reservation.id);
                    if (foundReservation) {
                        const [year, month, day] = dateKey.split('-').map(Number);
                        actualReservationDate = new Date(year, month - 1, day);
                        break;
                    }
                }
                
                // 見つからない場合はcreatedAtから計算
                if (!actualReservationDate) {
                    actualReservationDate = new Date(reservation.createdAt);
                }
            }
            
            const cancellationData = {
                id: reservation.id,
                customer: reservation.customer,
                time: reservation.time,
                duration: reservation.duration,
                date: actualReservationDate.toLocaleDateString('ja-JP'),
                cancelledAt: new Date().toLocaleString('ja-JP')
            };
            
            cancelledReservations.unshift(cancellationData); // 最新を先頭に追加
  
  // ローカルストレージに保存
            saveCancelledReservations();
            

            
            // 即座に更新を試行（次のフレームで実行）
            requestAnimationFrame(() => {
                updateCancellationDisplayImmediately();
            });
        }

        // キャンセル表示エリアを更新（即座に実行）
        // 現在の週のキャンセル履歴をフィルタリング
        function getCurrentWeekCancellations() {
            const weekStart = new Date(currentWeekStart);
            const weekEnd = new Date(currentWeekStart);
            weekEnd.setDate(weekEnd.getDate() + 6);
            
            return cancelledReservations.filter(reservation => {
                const reservationDate = new Date(reservation.date);
                return reservationDate >= weekStart && reservationDate <= weekEnd;
            });
        }

        function updateCancellationDisplayImmediately() {
            const btn = document.getElementById('showCancellationsBtn');
            const countSpan = document.getElementById('cancellation-count');
            const display = document.getElementById('cancellation-display');
            const list = document.getElementById('cancellation-list');
            
            // 現在の週のキャンセル履歴を取得
            const currentWeekCancellations = getCurrentWeekCancellations();
            
            console.log('🔄 Attempting to update cancellation display, total count:', cancelledReservations.length, 'current week:', currentWeekCancellations.length);
            console.log('🔍 Elements found:', { btn: !!btn, countSpan: !!countSpan, display: !!display, list: !!list });
            
            // ボタンが存在する場合は即座に更新（spanがなくてもボタンテキストを直接更新）
            if (btn) {
                console.log('🔄 Updating cancellation display immediately, current week count:', currentWeekCancellations.length);
                
                // ボタンの状態を更新（spanがなくても直接テキストを更新）
                if (currentWeekCancellations.length === 0) {
                    btn.disabled = false;
                    btn.textContent = `❌ キャンセル履歴 (0)`;
                    if (display) {
                        display.style.display = 'none';
                    }
                    console.log('✅ Updated cancellation display for 0 cancellations in current week');
    } else {
                    btn.disabled = false;
                    btn.textContent = `❌ キャンセル履歴 (${currentWeekCancellations.length})`;
                    console.log('✅ Updated cancellation display for', currentWeekCancellations.length, 'cancellations in current week');
                }
                
                // spanが存在する場合はそれも更新
                if (countSpan) {
                    countSpan.textContent = currentWeekCancellations.length;
                }
                
                // リストを更新（表示されている場合のみ）
                if (display && display.style.display === 'block' && list) {
                    const listHtml = currentWeekCancellations.map(reservation => `
                        <div class="cancellation-item">
                            <div class="cancellation-info">
                                <div class="cancellation-customer">${reservation.customer}</div>
                                <div class="cancellation-details">
                                    📅 ${reservation.date} <span class="cancellation-time">${reservation.time}</span> | 
                                    ⏱️ ${reservation.duration}分 | 
                                    🗑️ ${reservation.cancelledAt}
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                    list.innerHTML = listHtml;
                }
            } else {
                if (!domReady) {
                    console.log('⚠️ DOM not ready yet, will update when ready');
                    // DOMが準備できていない場合は後で更新
                    setTimeout(() => {
                        updateCancellationDisplayImmediately();
                    }, 200);
                } else {
                    console.log('⚠️ Cancellation button not found, will update later');
                    // 要素が準備できていない場合は後で更新（より長い間隔で）
                    setTimeout(() => {
                        updateCancellationDisplayImmediately();
                    }, 100);
                }
            }
        }

        // キャンセル表示エリアを更新（待機版）
        function updateCancellationDisplay() {
            // 即座に更新を試行
            updateCancellationDisplayImmediately();
        }

        // キャンセル表示エリアの表示/非表示を切り替え
        function toggleCancellationDisplay() {
            const display = document.getElementById('cancellation-display');
            const btn = document.getElementById('showCancellationsBtn');
            const list = document.getElementById('cancellation-list');
            
            // 要素が存在しない場合は早期リターン
            if (!display || !btn || !list) {
                console.error('❌ Cancellation display elements not found');
                showMessage('キャンセル表示エリアが見つかりませんでした。', 'error');
                return;
            }
            
            if (display.style.display === 'none') {
                // 表示する
                display.style.display = 'block';
                btn.classList.add('active');
                
                // 現在の週のキャンセル履歴を取得してリストを更新
                const currentWeekCancellations = getCurrentWeekCancellations();
                const listHtml = currentWeekCancellations.map(reservation => `
                    <div class="cancellation-item">
                        <div class="cancellation-info">
                            <div class="cancellation-customer">${reservation.customer}</div>
                            <div class="cancellation-details">
                                📅 ${reservation.date} <span class="cancellation-time">${reservation.time}</span> | 
                                ⏱️ ${reservation.duration}分 | 
                                🗑️ ${reservation.cancelledAt}
                            </div>
                        </div>
                    </div>
                `).join('');
                
                list.innerHTML = listHtml;
                
                showMessage('キャンセル履歴を表示しました。', 'info');
            } else {
                // 非表示にする
                display.style.display = 'none';
                btn.classList.remove('active');
                showMessage('キャンセル履歴を非表示にしました。', 'info');
            }
        }

        // キャンセル表示エリアをクリア
        function clearCancellationDisplay() {
            console.log('🗑️ Clearing cancellation display...');
            
            // データをクリア
            cancelledReservations = [];
            
            // ローカルストレージからも削除
            localStorage.removeItem('cancelledReservations');
            
            // 要素を取得
            const display = document.getElementById('cancellation-display');
            const btn = document.getElementById('showCancellationsBtn');
            const countSpan = document.getElementById('cancellation-count');
            const list = document.getElementById('cancellation-list');
            
            // 要素が存在する場合のみ操作
            if (btn && countSpan) {
                // カウントを更新
                countSpan.textContent = '0';
                btn.textContent = '❌ キャンセル履歴 (0)';
                btn.disabled = false;
            }
            
            if (display) {
                display.style.display = 'none';
            }
            
            if (btn) {
                btn.classList.remove('active');
            }
            
            if (list) {
                list.innerHTML = '';
            }
            
            console.log('✅ Cancellation display cleared successfully');
            
            // 即座に更新
            updateCancellationDisplayImmediately();
            
            showMessage('キャンセル履歴をクリアしました。', 'info');
        }
        
        // キャンセル表示の初期化（即座に実行）
        function initializeCancellationDisplay() {
            console.log('🚀 Starting cancellation display initialization...');
            loadCancelledReservations();
            
            // 即座に更新を試行
            setTimeout(() => {
                updateCancellationDisplayImmediately();
                cancellationDisplayReady = true;
                console.log('✅ Cancellation display initialized successfully');
            }, 100);
        }
        
        // 初期化実行
        init();
        
        // DOMが完全に読み込まれてからキャンセル表示を初期化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                domReady = true;
                setTimeout(() => {
                    initializeCancellationDisplay();
                }, 100);
            });
        } else {
            // DOMが既に読み込まれている場合
            domReady = true;
            setTimeout(() => {
                initializeCancellationDisplay();
            }, 100);
        }
        
        // ユーザー検索機能を初期化
        document.addEventListener('DOMContentLoaded', function() {
            setupUserSearch();
        });
</script> 
</body>
</html> 