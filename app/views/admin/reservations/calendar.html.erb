<% content_for :title, "予約カレンダー - Mobilis" %>

<div class="calendar-container">
  <div class="calendar-header">
<div class="container-fluid">
      <div class="calendar-toolbar">
                <!-- 小さな月カレンダーをタイトルの左側に配置 -->
        <div class="calendar-mini-calendar">
          <div id="monthCalendar" style="width: 200px; height: 100px;"></div>
        </div>
        
        <div class="calendar-title">
          <i class="fas fa-calendar-alt me-2"></i>予約カレンダー
        </div>
        
        <div class="calendar-actions">
          <div class="d-flex flex-column gap-2">
            <a href="<%= admin_reservations_path %>" class="btn btn-primary btn-lg" style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); border: none; box-shadow: 0 4px 8px rgba(0,0,0,0.15); font-weight: 600;">
              <i class="fas fa-list me-2"></i>📋 今日の予約一覧
            </a>
            <button id="newReservationBtn" class="btn btn-success">
              <i class="fas fa-plus me-1"></i>新規予約
            </button>
            <button class="btn btn-outline-danger btn-sm" onclick="openCancelledHistoryModal()">
              <i class="fas fa-times-circle me-1"></i>キャンセル履歴
            </button>
          </div>
        </div>
    </div>
    </div>
  </div>
  
  <div class="container-fluid">
    <div id="calendar"></div>
  </div>
</div>

<!-- 予約モーダル -->
<div class="modal fade" id="reservationModal" tabindex="-1" aria-labelledby="reservationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reservationModalLabel">
          <i class="fas fa-calendar-plus me-2"></i>予約作成・編集
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="reservationForm">
          <!-- 隠しフィールド -->
          <input type="hidden" id="currentReservationId" value="">
          <input type="hidden" id="selectedUserId" value="">
          
          <!-- 顧客選択・検索 -->
          <div class="row mb-3">
            <div class="col-12">
              <label for="customerSearch" class="form-label">顧客検索・選択 *</label>
              <div class="position-relative">
                                 <input type="text" class="form-control" id="customerSearch" 
                        placeholder="顧客名、フリガナ、電話番号で検索...">
                <div id="customerSearchResults" class="position-absolute w-100 bg-white border rounded shadow-sm" 
                     style="z-index: 1050; max-height: 200px; overflow-y: auto; display: none;">
                  <!-- 検索結果がここに表示 -->
            </div>
              </div>
          </div>
        </div>
        
          <!-- 選択された顧客情報の表示 -->
          <div id="selectedCustomerInfo" class="row mb-3" style="display: none;">
            <div class="col-12">
              <div class="alert alert-info">
                <div class="d-flex justify-content-between align-items-start">
                  <div>
                    <h6 class="alert-heading mb-1">
                      <i class="fas fa-user me-1"></i>
                      <span id="selectedCustomerName"></span>
                    </h6>
                    <small class="text-muted">
                      <span id="selectedCustomerDetails"></span>
                    </small>
                  </div>
                  <button type="button" class="btn btn-sm btn-outline-secondary" id="clearCustomerBtn">
                    <i class="fas fa-times"></i> 変更
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- 新規顧客登録フォーム（既存顧客が見つからない場合） -->
          <div id="newCustomerForm" class="row mb-3" style="display: none;">
            <div class="col-12">
              <div class="alert alert-warning">
                <h6 class="alert-heading">
                  <i class="fas fa-user-plus me-1"></i>新規顧客として登録
                </h6>
                <p class="mb-2">該当する顧客が見つかりませんでした。新規顧客として登録します。</p>
              </div>
            </div>
            
            <div class="col-md-6">
              <label for="newCustomerName" class="form-label">顧客名 *</label>
              <input type="text" class="form-control" id="newCustomerName" required>
            </div>
            <div class="col-md-6">
              <label for="newCustomerPhone" class="form-label">電話番号</label>
              <input type="tel" class="form-control" id="newCustomerPhone">
            </div>
            
            <div class="col-md-6 mt-2">
              <label for="newCustomerKana" class="form-label">フリガナ</label>
              <input type="text" class="form-control" id="newCustomerKana">
            </div>
            <div class="col-md-6 mt-2">
              <label for="newCustomerEmail" class="form-label">メールアドレス</label>
              <input type="email" class="form-control" id="newCustomerEmail">
            </div>
          </div>
          
          <!-- 予約情報（既存のまま） -->
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="reservationDate" class="form-label">日付 *</label>
              <input type="date" class="form-control" id="reservationDate" required>
            </div>
            <div class="col-md-6">
              <label for="reservationTime" class="form-label">時間 *</label>
              <input type="time" class="form-control" id="reservationTime" min="10:00" max="21:00" required>
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="reservationCourse" class="form-label">コース *</label>
              <select class="form-select" id="reservationCourse" required>
                <option value="">コースを選択</option>
                <option value="40分コース">40分コース (¥8,000)</option>
                <option value="60分コース">60分コース (¥12,000)</option>
                <option value="80分コース">80分コース (¥16,000)</option>
              </select>
            </div>
            <div class="col-md-6">
              <label for="reservationStatus" class="form-label">ステータス</label>
              <select class="form-select" id="reservationStatus">
                <option value="tentative">仮予約</option>
                <option value="confirmed" selected>確定</option>
                <option value="cancelled">キャンセル</option>
                <option value="completed">完了</option>
                <option value="no_show">無断キャンセル</option>
              </select>
            </div>
          </div>
          
          <!-- インターバル設定 -->
          <div class="row mb-3">
            <div class="col-md-6">
              <label for="reservationInterval" class="form-label">整理時間（インターバル）</label>
              <select class="form-select" id="reservationInterval">
                <option value="">システム設定を使用</option>
                <option value="0">0分（整理時間なし）</option>
                <option value="5">5分</option>
                <option value="10">10分</option>
                <option value="15">15分</option>
                <option value="20">20分</option>
                <option value="30">30分</option>
                <option value="45">45分</option>
                <option value="60">60分</option>
              </select>
              <small class="text-muted">個別に整理時間を設定できます</small>
            </div>
            <div class="col-md-6">
              <label class="form-label">現在の設定</label>
              <div id="currentIntervalInfo" class="form-control-plaintext">
                <span class="badge bg-primary">システム設定: 15分</span>
              </div>
            </div>
          </div>
          
          <!-- キャンセル理由（キャンセルステータスの時のみ表示） -->
          <div class="row mb-3" id="cancellationReasonRow" style="display: none;">
            <div class="col-12">
              <label for="cancellationReason" class="form-label">キャンセル理由 <span class="text-danger">*</span></label>
              <textarea class="form-control" id="cancellationReason" rows="2" placeholder="キャンセルの理由を入力してください"></textarea>
            </div>
          </div>
          
          <!-- チケット情報 -->
          <div class="row mb-3">
            <div class="col-12">
              <label class="form-label">チケット情報</label>
              <div id="ticketInfo" class="border rounded p-3 bg-light">
                <div class="text-muted">
                  <i class="fas fa-info-circle me-1"></i>
                  顧客を選択するとチケット情報が表示されます
                </div>
              </div>
            </div>
          </div>
          
          <!-- メモ -->
          <div class="row mb-3">
            <div class="col-12">
              <label for="reservationMemo" class="form-label">メモ・注意事項</label>
              <textarea class="form-control" id="reservationMemo" rows="3" placeholder="予約に関するメモや注意事項を入力してください"></textarea>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1"></i>キャンセル
        </button>
        <button type="button" class="btn btn-danger" id="deleteReservationBtn" style="display: none;">
            <i class="fas fa-trash me-1"></i>削除
          </button>
        <button type="button" class="btn btn-primary" id="saveReservationBtn">
            <i class="fas fa-save me-1"></i>保存
          </button>
      </div>
    </div>
  </div>
</div>

<!-- 顧客履歴モーダル -->
<div class="modal fade" id="customerHistoryModal" tabindex="-1" aria-labelledby="customerHistoryModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="customerHistoryModalLabel">
          <i class="fas fa-history me-2"></i>顧客履歴
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="customerHistoryContent">
          <!-- 顧客履歴がここに表示されます -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- キャンセル履歴モーダル -->
<div class="modal fade" id="cancelledHistoryModal" tabindex="-1" aria-labelledby="cancelledHistoryModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="cancelledHistoryModalLabel">
          <i class="fas fa-times-circle text-danger me-2"></i>キャンセル統計・履歴
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row mb-4">
          <div class="col-md-4">
            <div class="card border-danger">
              <div class="card-body text-center">
                <h3 class="text-danger mb-0" id="modalCancelledCount">0</h3>
                <small class="text-muted">今月のキャンセル数</small>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card border-warning">
              <div class="card-body text-center">
                <h3 class="text-warning mb-0" id="modalCancelledRate">0%</h3>
                <small class="text-muted">キャンセル率</small>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card border-info">
              <div class="card-body text-center">
                <h3 class="text-info mb-0" id="modalTotalReservations">0</h3>
                <small class="text-muted">今月の総予約数</small>
              </div>
            </div>
          </div>
        </div>
        <div id="modalCancelledHistory">
          <div class="text-muted text-center py-3">
            <i class="fas fa-info-circle me-1"></i>
            キャンセル履歴がありません
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1"></i>閉じる
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* ==============================================
   カレンダーページ全体のレイアウト
   ============================================== */
body {
  background: #ffffff;
  min-height: 100vh;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.calendar-container {
  padding: 0;
  margin: 0;
  position: relative;
}

.calendar-header {
  background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
  border-bottom: 3px solid #e9ecef;
  padding: 20px 0;
  box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}

/* ヘッダー内のミニカレンダーのスタイル */
.calendar-mini-calendar {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 15px;
}

.calendar-mini-calendar .fc {
  font-size: 0.8rem !important;
  border: 1px solid #e2e8f0 !important;
  border-radius: 8px !important;
  overflow: hidden !important;
}

.calendar-mini-calendar .fc-daygrid-day {
  cursor: pointer;
  transition: background-color 0.2s ease;
  padding: 0px !important;
  border: none !important;
  min-height: 5px !important;
}

.calendar-mini-calendar .fc-daygrid-day:hover {
  background-color: #f8f9fa !important;
}

.calendar-mini-calendar .fc-daygrid-day.fc-day-today {
  background-color: #e3f2fd !important;
  border-radius: 4px !important;
}

.calendar-mini-calendar .fc-daygrid-day.fc-day-selected {
  background-color: #007bff !important;
  color: white !important;
  border-radius: 4px !important;
}

.calendar-mini-calendar .fc-daygrid-day.fc-day-selected:hover {
  background-color: #0056b3 !important;
}

.calendar-mini-calendar .fc-daygrid-day-number {
  font-size: 0.6rem !important;
  padding: 0px !important;
  font-weight: 500 !important;
  line-height: 1 !important;
}

.calendar-mini-calendar .fc-col-header-cell {
  padding: 0px !important;
  font-size: 0.55rem !important;
  font-weight: 600 !important;
  background-color: #f8f9fa !important;
  border-bottom: 1px solid #e2e8f0 !important;
  min-height: 5px !important;
}

.calendar-mini-calendar .fc-daygrid-day.fc-day-other {
  color: #cbd5e0 !important;
}

.calendar-toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 0;
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 30px;
}

.calendar-nav {
  display: flex;
  gap: 15px;
  align-items: center;
  flex: 1;
  margin-right: 0;
}

.calendar-nav button {
  background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
  color: white;
  border: none;
  padding: 12px 20px;
  border-radius: 12px;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  position: relative;
  overflow: hidden;
}

.calendar-nav button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.calendar-nav button:hover::before {
  left: 100%;
}

.calendar-nav button:hover {
  background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(0,0,0,0.2);
}

.calendar-title {
  font-size: 2.2rem;
  font-weight: 800;
  color: #1e293b;
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
  flex: 2;
  text-align: center;
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin: 0;
  padding: 0;
}

.calendar-actions {
  display: flex;
  gap: 15px;
  align-items: center;
  flex: 1;
  justify-content: flex-end;
  margin-left: 0;
}

.btn-new-reservation {
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
  color: white;
  border: none;
  padding: 14px 28px;
  border-radius: 12px;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  position: relative;
  overflow: hidden;
}

.btn-new-reservation::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.btn-new-reservation:hover::before {
  left: 100%;
}

.btn-new-reservation:hover {
  background: linear-gradient(135deg, #20c997 0%, #1ea085 100%);
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(0,0,0,0.2);
}

.btn-today-reservations {
  background: linear-gradient(135deg, #fd7e14 0%, #e55a00 100%);
  color: white;
  border: none;
  padding: 12px 20px;
  border-radius: 12px;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  position: relative;
  overflow: hidden;
}

.btn-today-reservations::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.btn-today-reservations:hover::before {
  left: 100%;
}

.btn-today-reservations:hover {
  background: linear-gradient(135deg, #e55a00 0%, #cc4a00 100%);
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(0,0,0,0.2);
}

.btn-cancellation-stats {
  background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
  color: white;
  border: none;
  padding: 12px 20px;
  border-radius: 12px;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  position: relative;
  overflow: hidden;
}

.btn-cancellation-stats::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.btn-cancellation-stats:hover::before {
  left: 100%;
}

.btn-cancellation-stats:hover {
  background: linear-gradient(135deg, #c82333 0%, #b02130 100%);
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(0,0,0,0.2);
}

/* ==============================================
   FullCalendarの基本スタイル
   ============================================== */
.fc {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border-radius: 20px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.12);
  border: 2px solid #e2e8f0;
  margin: 30px auto;
  max-width: 1400px;
  position: relative;
  overflow: hidden;
}

.fc::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
  pointer-events: none;
  z-index: 1;
}

.fc-view-harness {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border-radius: 18px;
  position: relative;
  z-index: 2;
}

.fc-toolbar {
  padding: 25px 30px;
  border-bottom: 2px solid #f1f5f9;
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  position: relative;
  z-index: 2;
}

.fc-toolbar::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent, #e2e8f0, transparent);
}

.fc-toolbar-title {
  font-size: 2rem;
  font-weight: 800;
  color: #1e293b;
  text-shadow: 0 2px 4px rgba(0,0,0,0.1);
  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.fc-button {
  background: linear-gradient(135deg, #007bff 0%, #0056b3 100%) !important;
  border: none !important;
  color: white !important;
  border-radius: 12px !important;
  font-weight: 600 !important;
  padding: 12px 20px !important;
  transition: all 0.3s ease !important;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
  position: relative !important;
  overflow: hidden !important;
}

.fc-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.fc-button:hover::before {
  left: 100%;
}

.fc-button:hover {
  background: linear-gradient(135deg, #0056b3 0%, #004085 100%) !important;
  transform: translateY(-3px) !important;
  box-shadow: 0 6px 20px rgba(0,0,0,0.2) !important;
}

.fc-button:focus {
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
}

.fc-button-active {
  background: linear-gradient(135deg, #0056b3 0%, #004085 100%) !important;
  box-shadow: 0 4px 12px rgba(0,0,0,0.2) !important;
}

/* ==============================================
   10分間隔スロットの高さ固定
   ============================================== */
        .fc-timegrid-slot {
    height: 30px !important;
    min-height: 30px !important;
    max-height: 30px !important;
    border-bottom: 1px solid #e2e8f0 !important;
  }

.fc-timegrid-slots table {
  height: 100% !important;
}

/* 30分ごとのメジャーライン */
.fc-timegrid-slot[data-time$=":00"] {
  border-bottom: 2px solid #cbd5e0 !important;
}

.fc-timegrid-slot[data-time$=":30"] {
  border-bottom: 1.5px solid #e2e8f0 !important;
}

/* 時間軸の調整 */
.fc-timegrid-axis-frame {
  height: 30px !important;
  min-height: 30px !important;
}
      
        .fc-timegrid-slot-label {
    font-size: 0.75rem !important;
    padding: 2px 4px !important;
    color: #4a5568 !important;
  }
  


/* ==============================================
   予約イベントの基本スタイル
   ============================================== */
.fc-timegrid-event {
  border-radius: 8px !important;
  font-size: 0.8rem !important;
  font-weight: 600 !important;
  box-shadow: 0 2px 8px rgba(0,0,0,0.15) !important;
  transition: all 0.3s ease !important;
  border: 2px solid transparent !important;
  margin: 1px !important;
  overflow: hidden !important;
  position: relative !important;
  height: auto !important;
}

.fc-timegrid-event::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
  pointer-events: none;
  z-index: 1;
}

.fc-timegrid-event:hover {
  box-shadow: 0 4px 16px rgba(0,0,0,0.25) !important;
  transform: translateX(2px) !important;
  z-index: 1000 !important;
}

/* ==============================================
   全コース対応の高さ設定（30px base）
   ============================================== */

/* 40分コース系 */
.fc-timegrid-event[data-duration="40"] {
  min-height: 120px !important;
  height: 120px !important;
}

.fc-timegrid-event[data-duration="45"] {
  min-height: 135px !important;
  height: 135px !important;
}

.fc-timegrid-event[data-duration="50"] {
  min-height: 150px !important;
  height: 150px !important;
}

.fc-timegrid-event[data-duration="55"] {
  min-height: 165px !important;
  height: 165px !important;
}

/* 60分コース系 */
.fc-timegrid-event[data-duration="60"] {
  min-height: 180px !important;
  height: 180px !important;
}

.fc-timegrid-event[data-duration="65"] {
  min-height: 195px !important;
  height: 195px !important;
}

.fc-timegrid-event[data-duration="70"] {
  min-height: 210px !important;
  height: 210px !important;
}

.fc-timegrid-event[data-duration="75"] {
  min-height: 225px !important;
  height: 225px !important;
}

.fc-timegrid-event[data-duration="80"] {
  min-height: 240px !important;
  height: 240px !important;
}

/* 80分コース系 */
.fc-timegrid-event[data-duration="85"] {
  min-height: 340px !important;
  height: 340px !important;
}

.fc-timegrid-event[data-duration="90"] {
  min-height: 360px !important;
  height: 360px !important;
}

.fc-timegrid-event[data-duration="95"] {
  min-height: 380px !important;
  height: 380px !important;
}

.fc-timegrid-event[data-duration="100"] {
  min-height: 400px !important;
  height: 400px !important;
}

/* その他のカスタム時間 */
.fc-timegrid-event[data-duration="105"] {
  min-height: 420px !important;
  height: 420px !important;
}

.fc-timegrid-event[data-duration="110"] {
  min-height: 440px !important;
  height: 440px !important;
}

.fc-timegrid-event[data-duration="120"] {
  min-height: 480px !important;
  height: 480px !important;
}

/* ==============================================
   タブ形式のイベント用スタイル
   ============================================== */
.fc-timegrid-event .event-tab-container {
  height: 100% !important;
  display: flex !important;
  flex-direction: column !important;
  width: 100% !important;
}

.fc-timegrid-event .event-tab {
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  font-weight: 600 !important;
  text-align: center !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
  transition: all 0.2s ease !important;
  border: none !important;
}

.fc-timegrid-event .event-tab.course {
  background: inherit !important;
  color: inherit !important;
  border-bottom: 1px solid rgba(255, 255, 255, 0.3) !important;
}

.fc-timegrid-event .event-tab.interval {
        color: white !important;
        font-weight: 500 !important;
}

.fc-timegrid-event .event-tab.interval.individual {
  background-color: #fd7e14 !important;
  font-weight: 600 !important;
}

.fc-timegrid-event .event-tab.interval.system {
  background-color: #6c757d !important;
}

/* ==============================================
   ステータス別の色分け
   ============================================== */
.fc-timegrid-event.confirmed {
  background: linear-gradient(135deg, #28a745 0%, #20c997 100%) !important;
  border: 2px solid #28a745 !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(40, 167, 69, 0.3) !important;
}

.fc-timegrid-event.tentative {
  background: linear-gradient(135deg, #ffc107 0%, #ffb84d 100%) !important;
        border: 2px solid #ffc107 !important;
        color: #212529 !important;
  box-shadow: 0 4px 16px rgba(255, 193, 7, 0.3) !important;
}

.fc-timegrid-event.cancelled {
  background: linear-gradient(135deg, #dc3545 0%, #c82333 100%) !important;
  border: 2px solid #dc3545 !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(220, 53, 69, 0.3) !important;
}

.fc-timegrid-event.completed {
  background: linear-gradient(135deg, #6f42c1 0%, #5a32a3 100%) !important;
  border: 2px solid #6f42c1 !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(111, 66, 193, 0.3) !important;
}

.fc-timegrid-event.no_show {
  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%) !important;
  border: 2px solid #6c757d !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(108, 117, 125, 0.3) !important;
}

.fc-timegrid-event.break {
  background: linear-gradient(135deg, #17a2b8 0%, #138496 100%) !important;
  border: 2px solid #17a2b8 !important;
  color: white !important;
  box-shadow: 0 4px 16px rgba(23, 162, 184, 0.3) !important;
}

/* ==============================================
   インターバルタイプ別の視覚的区別
   ============================================== */
.fc-timegrid-event.has-interval .event-tab.interval.individual::before {
  content: "⚙️ ";
  font-size: 0.6em;
  margin-right: 2px;
}

.fc-timegrid-event.has-interval .event-tab.interval.system::before {
  content: "🔧 ";
  font-size: 0.6em;
  margin-right: 2px;
}

/* ホバー時のインターバル情報表示 */
.fc-timegrid-event.has-interval:hover::after {
  content: attr(data-interval-info);
  position: absolute;
  top: -30px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.9);
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.7rem;
  white-space: nowrap;
  z-index: 10000;
  pointer-events: none;
}

/* ==============================================
   レスポンシブ対応
   ============================================== */
@media (max-width: 1024px) {
  .calendar-toolbar {
    gap: 20px;
    padding: 0 20px;
  }
  
  .calendar-title {
    font-size: 1.8rem;
  }
  
  .fc {
    margin: 20px auto;
    border-radius: 16px;
  }
  
  .fc-toolbar {
    padding: 20px 25px;
  }
  
  .fc-toolbar-title {
    font-size: 1.6rem;
  }
}

@media (max-width: 768px) {
  .calendar-toolbar {
    flex-direction: column;
    gap: 15px;
    padding: 0 15px;
  }
  
  .calendar-nav {
    order: 1;
  }
  
  .calendar-title {
    order: 2;
    font-size: 1.4rem;
  }
  
  .calendar-actions {
    order: 3;
  }

  .btn-new-reservation,
  .btn-today-reservations,
  .btn-cancellation-stats {
    padding: 10px 16px;
    font-size: 0.9rem;
  }

  /* モバイル用のスロット高さ (35px base) */
  .fc-timegrid-slot {
    height: 35px !important;
    min-height: 35px !important;
    max-height: 35px !important;
  }
  
  .fc-timegrid-axis-frame {
    height: 35px !important;
    min-height: 35px !important;
  }
  
  /* モバイル用の高さ調整 */
  .fc-timegrid-event[data-duration="40"] { height: 140px !important; min-height: 140px !important; }
  .fc-timegrid-event[data-duration="45"] { height: 157px !important; min-height: 157px !important; }
  .fc-timegrid-event[data-duration="50"] { height: 175px !important; min-height: 175px !important; }
  .fc-timegrid-event[data-duration="55"] { height: 192px !important; min-height: 192px !important; }
  .fc-timegrid-event[data-duration="60"] { height: 210px !important; min-height: 210px !important; }
  .fc-timegrid-event[data-duration="65"] { height: 227px !important; min-height: 227px !important; }
  .fc-timegrid-event[data-duration="70"] { height: 245px !important; min-height: 245px !important; }
  .fc-timegrid-event[data-duration="75"] { height: 262px !important; min-height: 262px !important; }
  .fc-timegrid-event[data-duration="80"] { height: 280px !important; min-height: 280px !important; }
  .fc-timegrid-event[data-duration="85"] { height: 297px !important; min-height: 297px !important; }
  .fc-timegrid-event[data-duration="90"] { height: 315px !important; min-height: 315px !important; }
  .fc-timegrid-event[data-duration="95"] { height: 332px !important; min-height: 332px !important; }
  .fc-timegrid-event[data-duration="100"] { height: 350px !important; min-height: 350px !important; }
  
  .fc-timegrid-event .event-tab {
    font-size: 0.7rem !important;
    padding: 1px 2px !important;
  }
  
  .fc {
    margin: 15px auto;
    border-radius: 12px;
  }
  
  .fc-toolbar {
    padding: 15px 20px;
  }
  
  .fc-toolbar-title {
    font-size: 1.4rem;
  }
}

@media (max-width: 480px) {
  .calendar-toolbar {
    gap: 10px;
    padding: 0 10px;
  }
  
  .calendar-title {
    font-size: 1.2rem;
  }
  
  .btn-new-reservation,
  .btn-today-reservations,
  .btn-cancellation-stats {
    padding: 8px 12px;
    font-size: 0.8rem;
  }
  
  /* 小画面用のスロット高さ (30px base) */
  .fc-timegrid-slot {
    height: 30px !important;
    min-height: 30px !important;
    max-height: 30px !important;
  }
  
  .fc-timegrid-axis-frame {
    height: 30px !important;
    min-height: 30px !important;
  }
  
  /* 小画面用の高さ調整 */
  .fc-timegrid-event[data-duration="40"] { height: 120px !important; min-height: 120px !important; }
  .fc-timegrid-event[data-duration="45"] { height: 135px !important; min-height: 135px !important; }
  .fc-timegrid-event[data-duration="50"] { height: 150px !important; min-height: 150px !important; }
  .fc-timegrid-event[data-duration="55"] { height: 165px !important; min-height: 165px !important; }
  .fc-timegrid-event[data-duration="60"] { height: 180px !important; min-height: 180px !important; }
  .fc-timegrid-event[data-duration="65"] { height: 195px !important; min-height: 195px !important; }
  .fc-timegrid-event[data-duration="70"] { height: 210px !important; min-height: 210px !important; }
  .fc-timegrid-event[data-duration="75"] { height: 225px !important; min-height: 225px !important; }
  .fc-timegrid-event[data-duration="80"] { height: 240px !important; min-height: 240px !important; }
  .fc-timegrid-event[data-duration="85"] { height: 255px !important; min-height: 255px !important; }
  .fc-timegrid-event[data-duration="90"] { height: 270px !important; min-height: 270px !important; }
  .fc-timegrid-event[data-duration="95"] { height: 285px !important; min-height: 285px !important; }
  .fc-timegrid-event[data-duration="100"] { height: 300px !important; min-height: 300px !important; }
  
  .fc-timegrid-event .event-tab {
    font-size: 0.65rem !important;
    padding: 1px !important;
  }

  .fc {
    margin: 10px auto;
    border-radius: 10px;
  }
  
  .fc-toolbar {
    padding: 12px 15px;
  }
  
  .fc-toolbar-title {
    font-size: 1.2rem;
  }
}

/* ==============================================
   動的高さ設定とアニメーション
   ============================================== */
.height-calculated {
  transition: height 0.3s ease !important;
}

/* ==============================================
   カレンダー全体のグリッド強化
   ============================================== */
.fc-timegrid-col-frame {
  border-right: 1px solid #e2e8f0 !important;
}

/* ==============================================
   営業時間外のスタイル
   ============================================== */
.fc-timegrid-slot[data-time^="09"]:before,
.fc-timegrid-slot[data-time^="21"]:before,
.fc-timegrid-slot[data-time^="22"]:before {
  content: '';
      position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, 
    transparent 30%, 
    rgba(220, 53, 69, 0.1) 35%, 
    rgba(220, 53, 69, 0.1) 40%, 
    transparent 45%
  );
  pointer-events: none;
}

/* ==============================================
   アニメーション効果
   ============================================== */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.calendar-container {
  animation: fadeInUp 0.6s ease-out;
}

.fc {
  animation: slideInUp 0.8s ease-out;
}

/* ==============================================
   デバッグ用スタイル（必要に応じて削除）
   ============================================== */
.debug-events .fc-timegrid-event {
  border: 2px dashed red !important;
}

.debug-events .fc-timegrid-event .event-tab.course {
  border: 1px solid blue !important;
  background-color: rgba(0, 0, 255, 0.1) !important;
}

.debug-events .fc-timegrid-event .event-tab.interval {
  border: 1px solid green !important;
}

/* ==============================================
   アクセシビリティとユーザビリティ
   ============================================== */
@media (prefers-contrast: high) {
  .fc-timegrid-event {
    border-width: 3px !important;
  }
  
  .fc-button {
    border: 2px solid currentColor !important;
  }
}

@media (prefers-color-scheme: dark) {
  .fc {
    background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%) !important;
    border-color: #4a5568 !important;
  }
  
  .fc-toolbar {
    background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%) !important;
    border-bottom-color: #4a5568 !important;
  }
  
  .fc-toolbar-title {
    color: #e2e8f0 !important;
  }
}

/* ==============================================
   特殊なコース時間対応（追加の組み合わせ）
   ============================================== */

/* 25分コース系 */
.fc-timegrid-event[data-duration="25"] {
  min-height: 100px !important;
  height: 100px !important;
}

.fc-timegrid-event[data-duration="30"] {
  min-height: 120px !important;
  height: 120px !important;
}

.fc-timegrid-event[data-duration="35"] {
  min-height: 140px !important;
  height: 140px !important;
}

/* 115分以上の長時間コース */
.fc-timegrid-event[data-duration="115"] {
  min-height: 460px !important;
  height: 460px !important;
}

.fc-timegrid-event[data-duration="125"] {
  min-height: 500px !important;
  height: 500px !important;
}

.fc-timegrid-event[data-duration="130"] {
  min-height: 520px !important;
  height: 520px !important;
}

.fc-timegrid-event[data-duration="135"] {
  min-height: 540px !important;
  height: 540px !important;
}

.fc-timegrid-event[data-duration="140"] {
  min-height: 560px !important;
  height: 560px !important;
}

.fc-timegrid-event[data-duration="150"] {
  min-height: 600px !important;
  height: 600px !important;
}

/* ==============================================
   フォーカス状態のスタイル
   ============================================== */
.fc-timegrid-event:focus {
  outline: 3px solid #007bff;
  outline-offset: 2px;
  z-index: 1001;
}

.fc-timegrid-event:focus-visible {
  outline: 3px solid #007bff;
  outline-offset: 2px;
}

/* ==============================================
   印刷時の最適化
   ============================================== */
@media print {
  .fc {
    box-shadow: none !important;
    border: 1px solid #000 !important;
  }
  
  .fc-timegrid-event {
    box-shadow: none !important;
    border: 1px solid #000 !important;
  }
  
  .fc-button {
    display: none !important;
  }
  
  .calendar-nav,
  .calendar-actions {
    display: none !important;
  }
}

/* ==============================================
   パフォーマンス最適化
   ============================================== */
.fc-timegrid-event {
  will-change: transform, opacity;
}

.fc-timegrid-event:hover {
  will-change: transform, box-shadow;
}

/* GPU加速を有効にする */
.fc-timegrid-event,
.fc-button {
  transform: translateZ(0);
  backface-visibility: hidden;
}

/* ==============================================
   コース別の識別用カラーバリエーション（オプション）
   ============================================== */

/* 40分コース系のサブトル背景調整 */
.fc-timegrid-event[data-duration="40"],
.fc-timegrid-event[data-duration="45"],
.fc-timegrid-event[data-duration="50"],
.fc-timegrid-event[data-duration="55"] {
  position: relative;
}

.fc-timegrid-event[data-duration="40"]::after,
.fc-timegrid-event[data-duration="45"]::after,
.fc-timegrid-event[data-duration="50"]::after,
.fc-timegrid-event[data-duration="55"]::after {
  content: '40';
  position: absolute;
  top: 2px;
  right: 2px;
  background: rgba(0, 0, 0, 0.1);
  color: rgba(255, 255, 255, 0.7);
  border-radius: 50%;
  width: 16px;
  height: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  font-weight: bold;
  pointer-events: none;
}

/* 60分コース系 */
.fc-timegrid-event[data-duration="60"]::after,
.fc-timegrid-event[data-duration="65"]::after,
.fc-timegrid-event[data-duration="70"]::after,
.fc-timegrid-event[data-duration="75"]::after,
.fc-timegrid-event[data-duration="80"]::after {
  content: '60';
  position: absolute;
  top: 2px;
  right: 2px;
  background: rgba(0, 0, 0, 0.1);
  color: rgba(255, 255, 255, 0.7);
  border-radius: 50%;
  width: 16px;
  height: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  font-weight: bold;
  pointer-events: none;
}

/* 80分コース系 */
.fc-timegrid-event[data-duration="85"]::after,
.fc-timegrid-event[data-duration="90"]::after,
.fc-timegrid-event[data-duration="95"]::after,
.fc-timegrid-event[data-duration="100"]::after {
  content: '80';
  position: absolute;
  top: 2px;
  right: 2px;
  background: rgba(0, 0, 0, 0.1);
  color: rgba(255, 255, 255, 0.7);
  border-radius: 50%;
  width: 16px;
  height: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  font-weight: bold;
  pointer-events: none;
}

/* ==============================================
   スクロールバーのカスタマイズ
   ============================================== */
.fc-timegrid::-webkit-scrollbar {
  width: 8px;
}

.fc-timegrid::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 4px;
}

.fc-timegrid::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
  border-radius: 4px;
}

.fc-timegrid::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
}

/* ==============================================
   読み込み状態のスタイル
   ============================================== */
.calendar-loading {
  position: relative;
}

.calendar-loading::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(2px);
  z-index: 9999;
}

.calendar-loading::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 40px;
  height: 40px;
  margin: -20px 0 0 -20px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #007bff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  z-index: 10000;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* ==============================================
   エラー状態のスタイル
   ============================================== */
.calendar-error {
  padding: 20px;
  text-align: center;
  color: #dc3545;
  background: #fff5f5;
  border: 1px solid #fecaca;
  border-radius: 8px;
  margin: 20px;
}

.calendar-error::before {
  content: '⚠️';
  display: block;
  font-size: 2rem;
  margin-bottom: 10px;
}

/* ==============================================
   ツールチップのスタイル強化
   ============================================== */
.fc-timegrid-event[data-interval-info]:hover::after {
  animation: tooltipFadeIn 0.3s ease-out;
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

@keyframes tooltipFadeIn {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(5px);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}

/* ==============================================
   セレクション状態のスタイル
   ============================================== */
.fc-timegrid-event.fc-event-selected {
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.3) !important;
  z-index: 1002 !important;
}

/* ==============================================
   ドラッグ状態のスタイル
   ============================================== */
.fc-timegrid-event.fc-event-dragging {
  opacity: 0.7 !important;
  transform: rotate(3deg) !important;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3) !important;
  z-index: 1003 !important;
}

.fc-timegrid-event.fc-event-resizing {
  opacity: 0.8 !important;
  box-shadow: 0 4px 20px rgba(0, 123, 255, 0.4) !important;
}

/* ==============================================
   最終調整とクリーンアップ
   ============================================== */

/* 重複するスタイルの統合 */
.fc-timegrid-event.reservation-with-tabs,
.fc-timegrid-event.reservation-with-tabs .fc-event-main,
.fc-timegrid-event.reservation-with-tabs .event-tabs,
.fc-timegrid-event.reservation-with-tabs .event-tab {
  /* 既存のタブスタイルと統合済み */
}

/* 不要なスタイルオーバーライドの削除 */
.fc-timegrid-event {
  /* 基本スタイルは既に定義済み */
}

/* ==============================================
   1時間の線のみを太くする設定（10分ずらし修正版）
   ============================================== */

/* まず全ての線を細くリセット */
.fc-timegrid-slot {
  border-bottom: 3px solid #e2e8f0 !important; /* 基本は細い線 */
}

/* イベントの高さを正確に設定 */
.fc-timegrid-event {
  height: auto !important;
  min-height: auto !important;
}

.fc-timegrid-event[data-duration] {
  height: calc(var(--duration) * 3px) !important;
  min-height: calc(var(--duration) * 3px) !important;
  max-height: calc(var(--duration) * 3px) !important;
}

/* 特定の時間のイベント高さを直接指定（コンパクト化） */
.fc-timegrid-event[data-duration="75"] {
  height: 225px !important;
  min-height: 225px !important;
  max-height: 225px !important;
}

.fc-timegrid-event[data-duration="80"] {
  height: 240px !important;
  min-height: 240px !important;
  max-height: 240px !important;
}

.fc-timegrid-event[data-duration="90"] {
  height: 270px !important;
  min-height: 270px !important;
  max-height: 270px !important;
}

/* スロットの高さを強制的に30pxに設定（コンパクト化） */
.fc-timegrid-slot {
  height: 30px !important;
  min-height: 30px !important;
  max-height: 30px !important;
}

/* 日付ヘッダーのクリック可能スタイル */
.fc-col-header-cell {
  cursor: pointer !important;
  transition: background-color 0.2s ease;
}

.fc-col-header-cell:hover {
  background-color: #f8f9fa !important;
}

.fc-col-header-cell:active {
  background-color: #e9ecef !important;
}

.fc-day-header {
  cursor: pointer !important;
  transition: background-color 0.2s ease;
  user-select: none !important;
}

.fc-day-header:hover {
  background-color: #f8f9fa !important;
}

.fc-day-header:active {
  background-color: #e9ecef !important;
}

/* 月カレンダーのスタイル */
#monthCalendar .fc {
  font-size: 0.9rem;
}

#monthCalendar .fc-daygrid-day {
  cursor: pointer;
  transition: background-color 0.2s ease;
}

#monthCalendar .fc-daygrid-day:hover {
  background-color: #f8f9fa !important;
}

#monthCalendar .fc-daygrid-day.fc-day-today {
  background-color: #e3f2fd !important;
}

#monthCalendar .fc-daygrid-day.fc-day-selected {
  background-color: #007bff !important;
  color: white !important;
}

#monthCalendar .fc-daygrid-day.fc-day-selected:hover {
  background-color: #0056b3 !important;
}

/* より確実な方法：時間に基づいた具体的な指定（10分ずらし修正） */
/* 営業時間10:00-21:00の場合 */

/* 1時間ごとの線（太い線） */
/* 10:00 (0番目のスロット) */
.fc-timegrid-slots tr:nth-child(0) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 11:00 (6番目のスロット) */
.fc-timegrid-slots tr:nth-child(6) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 12:00 (12番目のスロット) */
.fc-timegrid-slots tr:nth-child(12) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 13:00 (18番目のスロット) */
.fc-timegrid-slots tr:nth-child(18) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 14:00 (24番目のスロット) */
.fc-timegrid-slots tr:nth-child(24) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 15:00 (30番目のスロット) */
.fc-timegrid-slots tr:nth-child(30) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 16:00 (36番目のスロット) */
.fc-timegrid-slots tr:nth-child(36) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 17:00 (42番目のスロット) */
.fc-timegrid-slots tr:nth-child(42) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 18:00 (48番目のスロット) */
.fc-timegrid-slots tr:nth-child(48) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 19:00 (54番目のスロット) */
.fc-timegrid-slots tr:nth-child(54) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 20:00 (60番目のスロット) */
.fc-timegrid-slots tr:nth-child(60) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 21:00 (66番目のスロット) */
.fc-timegrid-slots tr:nth-child(66) .fc-timegrid-slot {
  border-bottom: 3px solid #64748b !important;
}

/* 30分ごとの線（中程度の太さ） */
/* 10:30 (3番目のスロット) */
.fc-timegrid-slots tr:nth-child(3) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 11:30 (9番目のスロット) */
.fc-timegrid-slots tr:nth-child(9) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 12:30 (15番目のスロット) */
.fc-timegrid-slots tr:nth-child(15) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 13:30 (21番目のスロット) */
.fc-timegrid-slots tr:nth-child(21) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 14:30 (27番目のスロット) */
.fc-timegrid-slots tr:nth-child(27) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 15:30 (33番目のスロット) */
.fc-timegrid-slots tr:nth-child(33) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 16:30 (39番目のスロット) */
.fc-timegrid-slots tr:nth-child(39) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 17:30 (45番目のスロット) */
.fc-timegrid-slots tr:nth-child(45) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 18:30 (51番目のスロット) */
.fc-timegrid-slots tr:nth-child(51) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 19:30 (57番目のスロット) */
.fc-timegrid-slots tr:nth-child(57) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* 20:30 (63番目のスロット) */
.fc-timegrid-slots tr:nth-child(63) .fc-timegrid-slot {
  border-bottom: 1.5px solid #64748b !important;
}

/* ==============================================
   レスポンシブ対応
   ============================================== */
@media (max-width: 768px) {
  .fc-timegrid-slot:nth-child(6n) {
    border-bottom: 3px solid #64748b !important; /* モバイルでは少し細く */
  }
  
  .fc-timegrid-slots tr:nth-child(1) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(6) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(12) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(18) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(24) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(30) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(36) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(42) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(48) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(54) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(60) .fc-timegrid-slot,
  .fc-timegrid-slots tr:nth-child(66) .fc-timegrid-slot {
    border-bottom: 3px solid #64748b !important;
  }
}
</style>

<script>
  // カレンダー初期化
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 DOM Content Loaded');
    
    // 月カレンダーの初期化
    const monthCalendarEl = document.getElementById('monthCalendar');
    console.log('📅 Month calendar element:', monthCalendarEl);
    
    // 予約カレンダーの初期化
    const calendarEl = document.getElementById('calendar');
    console.log('📅 Calendar element:', calendarEl);
    
    // キャンセル統計と履歴を取得・表示
    function loadCancellationStats() {
      console.log('📊 Loading cancellation stats...');
      
      fetch('/admin/reservations/cancellation_stats')
        .then(response => {
          console.log('📊 Response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
      return response.json();
    })
    .then(data => {
          console.log('📊 Received data:', data);
          
          // 要素の存在確認とエラーハンドリング
          const cancelledCount = document.getElementById('cancelledCount');
          const cancelledRate = document.getElementById('cancelledRate');
          const historyContainer = document.getElementById('cancelledHistory');
          
          // キャンセル数を更新（要素が存在する場合のみ）
          if (cancelledCount) {
            cancelledCount.textContent = data.cancelled_count;
          }
          if (cancelledRate) {
            cancelledRate.textContent = data.cancelled_rate + '%';
          }
          
          // キャンセル履歴を更新（要素が存在する場合のみ）
          if (historyContainer) {
            if (data.cancelled_history && data.cancelled_history.length > 0) {
              console.log('📊 Rendering history:', data.cancelled_history.length, 'items');
              const historyHtml = data.cancelled_history.map(item => `
                <div class="border-bottom pb-2 mb-2">
                  <div class="d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1">
                      <div class="fw-bold text-dark">${item.customer_name}</div>
                      <div class="small text-muted">
                        <i class="fas fa-calendar me-1"></i>${item.cancelled_at}
                        <span class="mx-2">|</span>
                        <i class="fas fa-clock me-1"></i>${item.course}
                      </div>
                    </div>
                  </div>
                  <div class="mt-1">
                    <small class="text-danger">
                      <i class="fas fa-times-circle me-1"></i>
                      ${item.reason || '理由未入力'}
                    </small>
                  </div>
                </div>
              `).join('');
              historyContainer.innerHTML = historyHtml;
      } else {
              console.log('📊 No cancellation history found');
              historyContainer.innerHTML = `
                <div class="text-muted text-center py-3">
                  <i class="fas fa-info-circle me-1"></i>
                  キャンセル履歴がありません
        </div>
      `;
    }
          } else {
            console.log('📊 Cancellation history container not found, skipping update');
      }
    })
    .catch(error => {
          console.error('❌ キャンセル統計の取得に失敗:', error);
          // エラー時もデフォルト表示
          const cancelledCount = document.getElementById('cancelledCount');
          const cancelledRate = document.getElementById('cancelledRate');
          const cancelledHistory = document.getElementById('cancelledHistory');
          
          if (cancelledCount) cancelledCount.textContent = '0';
          if (cancelledRate) cancelledRate.textContent = '0%';
          if (cancelledHistory) {
            cancelledHistory.innerHTML = `
              <div class="text-muted text-center">
                <i class="fas fa-exclamation-triangle me-1"></i>
                統計の取得に失敗しました
              </div>
            `;
          }
        });
    }

    if (!monthCalendarEl || !calendarEl) {
      console.error('❌ Calendar elements not found');
      return;
    }
    
    // 月カレンダーの初期化
    const monthCalendar = new FullCalendar.Calendar(monthCalendarEl, {
      initialView: 'dayGridMonth',
      locale: 'ja',
      height: 'auto',
      headerToolbar: false, // ヘッダーを非表示
      dayHeaderFormat: { weekday: 'short' },
      dayCellClassNames: 'clickable-day-cell',
      aspectRatio: 2, // より横長の比率
      contentHeight: 100, // 高さを調整
      dayCellDidMount: function(info) {
        // 日付セルにクリックイベントを追加
        info.el.style.cursor = 'pointer';
        info.el.addEventListener('click', function() {
          const clickedDate = info.date;
          console.log('📅 Month calendar day clicked:', clickedDate);
          
          // 予約カレンダーをその週に移動
          calendar.gotoDate(clickedDate);
          
          // 選択された日付をハイライト
          monthCalendar.select(clickedDate);
        });
      },
      select: function(info) {
        const selectedDate = info.start;
        console.log('📅 Month calendar date selected:', selectedDate);
        
        // 予約カレンダーをその週に移動
        calendar.gotoDate(selectedDate);
      }
    });
    
    // 予約カレンダーの初期化
    const calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'timeGridWeek',
      locale: 'ja',
      height: 'auto',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      dayHeaderFormat: { weekday: 'short', day: 'numeric', month: 'short' },
      buttonText: {
        today: '今日',
        month: '月',
        week: '週',  
        day: '日'
      },
      slotMinTime: '10:00:00',
      slotMaxTime: '21:00:00',
      slotDuration: '00:10:00', // 10分間隔
      slotLabelInterval: '00:30:00', // ラベルは30分間隔
      snapDuration: '00:10:00', // スナップも10分間隔
      slotMinWidth: 60,
      allDaySlot: false,
      selectable: true,
      editable: true,
      nowIndicator: true,
      eventDisplay: 'block',
      eventMinHeight: 15,
      eventMinWidth: 0,
      slotEventOverlap: false,
      slotLabelFormat: { hour: '2-digit', minute: '2-digit', hour12: false },
      
      eventTimeFormat: {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false,
        timeZone: 'Asia/Tokyo'
      },
      
      // イベント処理（既存のまま）
      eventDrop: function(info) {
        console.log('🔄 Event dropped:', info.event);
        updateReservationTime(info.event);
      },
      
      eventResize: function(info) {
        console.log('📏 Event resized:', info.event);
        updateReservationTime(info.event);
      },
      
      eventClick: function(info) {
        openReservationModal(info.event);
      },
      

      
      select: function(info) {
        // 既存のselect処理をそのまま使用
        console.log('🔍 Raw select info:', info);
        
        const startTime = info.start;
        const endTime = info.end;
        
        const startHour = startTime.getHours ? startTime.getHours() : startTime.hour;
        const startMinute = startTime.getMinutes ? startTime.getMinutes() : startTime.min;
        const endHour = endTime.getHours ? endTime.getHours() : endTime.hour;
        const endMinute = endTime.getMinutes ? endTime.getMinutes() : endTime.min;
        
        if (startHour < 10 || startHour >= 21) {
          console.log('❌ Selected time outside business hours:', startHour);
          showMessage('営業時間外です。10:00から21:00の間で選択してください', 'warning');
      return;
    }
    
        const selectionDuration = (endTime - startTime) / (1000 * 60);
        
        if (endHour > 21 || (endHour === 21 && endMinute > 0)) {
          console.log('❌ Selection extends beyond business hours');
          showMessage(`この時間帯は営業時間外になります。終了時刻: ${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`, 'warning');
      return;
    }
    
        openNewReservationModal(info.start, info.end);
      },
      
      // 🔧 完全修正：eventContentで全コースに対応
      eventContent: function(arg) {
        const event = arg.event;
        const extendedProps = event.extendedProps;
        
        // イベントの実際の時間幅を計算
        const eventStart = new Date(event.start);
        const eventEnd = new Date(event.end);
        const actualDurationMinutes = Math.round((eventEnd - eventStart) / (1000 * 60));
        
        // 詳細ログ
        const courseDuration = extendedProps.course_duration || 60;
        const intervalDuration = extendedProps.interval_duration || 0;
        const totalExpected = courseDuration + intervalDuration;
        
        console.log(`🎨 Rendering event ${event.id}:`);
        console.log(`  Title: ${event.title}`);
        console.log(`  Course: ${courseDuration}分, Interval: ${intervalDuration}分`);
        console.log(`  Total expected: ${totalExpected}分`);
        console.log(`  Actual duration: ${actualDurationMinutes}分`);
        console.log(`  Slots needed: ${actualDurationMinutes / 10}`);
        console.log(`  Has interval: ${extendedProps.has_interval}`);
        console.log(`  Interval type: ${extendedProps.is_individual_interval ? 'Individual' : 'System'}`);
        
        // インターバルがある場合はタブ形式で表示
        if (extendedProps.has_interval && intervalDuration > 0) {
          const intervalType = extendedProps.is_individual_interval ? 'individual' : 'system';
          
          // flexベースでの比率計算
          const courseRatio = courseDuration;
          const intervalRatio = intervalDuration;
          
          console.log(`📊 Tab ratios for event ${event.id}:`);
          console.log(`  Course flex: ${courseRatio} (${courseDuration}分)`);
          console.log(`  Interval flex: ${intervalRatio} (${intervalDuration}分)`);
          console.log(`  Ratio: ${courseRatio}:${intervalRatio}`);
          
          return {
            html: `
              <div class="event-tab-container" style="
                height: 100%; 
                display: flex; 
                flex-direction: column;
                width: 100%;
              ">
                <div class="event-tab course" style="
                  flex: ${courseRatio}; 
                  display: flex; 
                  align-items: center; 
                  justify-content: center;
                  padding: 2px 4px;
                  font-size: 0.8rem;
                  font-weight: 600;
                  overflow: hidden;
                  text-overflow: ellipsis;
                  white-space: nowrap;
                  border-bottom: 1px solid rgba(255, 255, 255, 0.3);
                  background: inherit;
                  color: inherit;
                ">
                  ${event.title}
                </div>
                <div class="event-tab interval ${intervalType}" style="
                  flex: ${intervalRatio}; 
                  display: flex; 
                  align-items: center; 
                  justify-content: center;
                  padding: 2px 4px;
                  font-size: 0.75rem;
                  font-weight: 500;
                  overflow: hidden;
                  text-overflow: ellipsis;
                  white-space: nowrap;
                  background-color: ${intervalType === 'individual' ? '#fd7e14' : '#6c757d'};
                  color: white;
                ">
                  整理${intervalDuration}分
                </div>
              </div>
            `
          };
        } else {
          // インターバルなしの場合は通常表示
          return {
            html: `
              <div style="
                height: 100%; 
                display: flex; 
                align-items: center; 
                justify-content: center;
                padding: 4px;
                font-size: 0.85rem;
                font-weight: 600;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
              ">
                ${event.title}
              </div>
            `
          };
        }
      },
      
      // 🔧 重要：eventDidMountで全コースの高さを正確に設定
      eventDidMount: function(info) {
        const event = info.event;
        const element = info.el;
        const extendedProps = event.extendedProps;
        
        // イベントの実際の時間幅を計算
        const eventStart = new Date(event.start);
        const eventEnd = new Date(event.end);
        const actualDurationMinutes = Math.round((eventEnd - eventStart) / (1000 * 60));
        
        // data属性を設定してCSSの高さ指定を有効にする
        element.setAttribute('data-duration', actualDurationMinutes);
        
        // イベントの高さを正確に設定
        const slotHeight = 30; // 10分間隔のスロット高さ（コンパクト化）
        const expectedHeight = (actualDurationMinutes / 10) * slotHeight;
        element.style.height = `${expectedHeight}px`;
        element.style.minHeight = `${expectedHeight}px`;
        element.style.maxHeight = `${expectedHeight}px`;
        element.style.setProperty('--duration', actualDurationMinutes);
        
        // デバッグ用ログ
        console.log(`📏 Event ${event.id} height calculation:`);
        console.log(`  Duration: ${actualDurationMinutes}分`);
        console.log(`  Expected height: ${expectedHeight}px`);
        console.log(`  Actual element height: ${element.offsetHeight}px`);
        
        // インターバル情報をdata属性として追加
        const courseDuration = extendedProps.course_duration || 60;
        const intervalDuration = extendedProps.interval_duration || 0;
        const intervalType = extendedProps.is_individual_interval ? '個別' : 'システム';
        
        if (intervalDuration > 0) {
          element.setAttribute('data-interval-info', 
            `${courseDuration}分 + ${intervalType}${intervalDuration}分 = ${actualDurationMinutes}分`);
        }
        
        // 10分間隔での正確なスロット数を計算
        const slots = actualDurationMinutes / 10;
        
        console.log(`📏 Mounting event ${event.id}:`);
        console.log(`  Course: ${courseDuration}分`);
        console.log(`  Interval: ${intervalDuration}分 (${intervalType})`);
        console.log(`  Total: ${actualDurationMinutes}分`);
        console.log(`  Slots: ${slots}`);
        console.log(`  Data attribute: data-duration="${actualDurationMinutes}"`);
        
        // スロット高さを取得して高さを調整
        setTimeout(() => {
          const timeGridSlots = document.querySelectorAll('.fc-timegrid-slot');
          if (timeGridSlots.length > 0) {
                         const slotHeight = timeGridSlots[0].offsetHeight;
             const expectedHeight = Math.round(slots * slotHeight);
             
             // 30pxベースでの高さ計算も追加
             const baseSlotHeight = 30; // 新しいベース高さ
             const expectedHeight30px = Math.round(slots * baseSlotHeight);
            
            console.log(`📐 Height calculation for event ${event.id}:`);
            console.log(`  Slot height: ${slotHeight}px`);
            console.log(`  Slots needed: ${slots}`);
            console.log(`  Expected height: ${expectedHeight}px`);
            console.log(`  CSS rule height: ${getComputedStyle(element).height}`);
            
            // JavaScript でも高さを設定（CSSと併用）
            element.style.setProperty('height', `${expectedHeight}px`, 'important');
            element.style.setProperty('min-height', `${expectedHeight}px`, 'important');
            element.style.setProperty('max-height', `${expectedHeight}px`, 'important');
            
            // height-calculated クラスを追加（アニメーション効果）
            element.classList.add('height-calculated');
            
            // タブコンテナも調整
            const tabContainer = element.querySelector('.event-tab-container');
            if (tabContainer) {
              tabContainer.style.setProperty('height', `${expectedHeight}px`, 'important');
              tabContainer.style.setProperty('min-height', `${expectedHeight}px`, 'important');
            }
            
            // 各コース+インターバル組み合わせの識別と表示
            const courseIntervalMap = {
              // 40分コース系
              40: { course: '40分コース', interval: 'なし', description: '40分コースのみ' },
              45: { course: '40分コース', interval: '5分', description: '40分コース + 5分インターバル' },
              50: { course: '40分コース', interval: '10分', description: '40分コース + 10分インターバル' },
              55: { course: '40分コース', interval: '15分', description: '40分コース + 15分インターバル' },
              
              // 60分コース系
              60: { course: '60分コース', interval: 'なし', description: '60分コースのみ' },
              65: { course: '60分コース', interval: '5分', description: '60分コース + 5分インターバル' },
              70: { course: '60分コース', interval: '10分', description: '60分コース + 10分インターバル' },
              75: { course: '60分コース', interval: '15分', description: '60分コース + 15分インターバル' },
              80: { course: '60分コース', interval: '20分', description: '60分コース + 20分インターバル' },
              
              // 80分コース系
              80: { course: '80分コース', interval: 'なし', description: '80分コースのみ' },
              85: { course: '80分コース', interval: '5分', description: '80分コース + 5分インターバル' },
              90: { course: '80分コース', interval: '10分', description: '80分コース + 10分インターバル' },
              95: { course: '80分コース', interval: '15分', description: '80分コース + 15分インターバル' },
              100: { course: '80分コース', interval: '20分', description: '80分コース + 20分インターバル' }
            };
            
            const combinationInfo = courseIntervalMap[actualDurationMinutes];
            if (combinationInfo) {
              console.log(`🎯 ${combinationInfo.description}:`);
              console.log(`  Height: ${expectedHeight}px (${slots}スロット)`);
              console.log(`  CSS data-duration: [data-duration="${actualDurationMinutes}"]`);
            } else {
              console.log(`🎯 カスタム組み合わせ (${actualDurationMinutes}分):`);
              console.log(`  Height: ${expectedHeight}px (${slots}スロット)`);
            }
            
            // 高さ設定の最終確認
            setTimeout(() => {
              const finalHeight = element.offsetHeight;
              const heightDiff = Math.abs(finalHeight - expectedHeight);
              
              if (heightDiff > 5) {
                console.warn(`⚠️ Height adjustment failed for event ${event.id}:`);
                console.warn(`  Expected: ${expectedHeight}px, Actual: ${finalHeight}px`);
                console.warn(`  Difference: ${heightDiff}px`);
                console.warn(`  Duration: ${actualDurationMinutes}分 (${slots}スロット)`);
                
                // 失敗した場合は再度強制設定
                element.style.setProperty('height', `${expectedHeight}px`, 'important');
              } else {
                const combination = courseIntervalMap[actualDurationMinutes]?.description || 
                                  `${actualDurationMinutes}分カスタム`;
                console.log(`✅ ${combination} correctly displayed: ${finalHeight}px`);
              }
            }, 200);
          }
        }, 100);
      },
      
      // 🔧 イベントデータの詳細検証
      events: function(info, successCallback, failureCallback) {
        console.log('🔍 Fetching events for:', info.startStr, 'to', info.endStr);
        
        fetch('/admin/reservations.json', {
      headers: {
        'Accept': 'application/json',
            'Content-Type': 'application/json'
          }
    })
    .then(response => {
      if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
        .then(events => {
          console.log('✅ Events loaded:', events.length);
          
          // 🎯 全コース組み合わせの検証
          console.log('📊 Event duration analysis:');
          
          const durationStats = {};
          events.forEach((event, index) => {
            const startTime = new Date(event.start);
            const endTime = new Date(event.end);
            const actualDuration = Math.round((endTime - startTime) / (1000 * 60));
            
            const courseDuration = event.extendedProps?.course_duration || 0;
            const intervalDuration = event.extendedProps?.interval_duration || 0;
            const expectedDuration = courseDuration + intervalDuration;
            
            // 統計を集計
            if (!durationStats[actualDuration]) {
              durationStats[actualDuration] = {
                count: 0,
                examples: [],
                slots: actualDuration / 10
              };
            }
            durationStats[actualDuration].count++;
            durationStats[actualDuration].examples.push({
              id: event.id,
              course: courseDuration,
              interval: intervalDuration,
              title: event.title
            });
            
            console.log(`🎯 Event ${event.id}: ${courseDuration}分+${intervalDuration}分=${actualDuration}分 (${actualDuration/10}スロット)`);
          });
          
          // 統計サマリー
          console.log('📈 Duration statistics:');
          Object.entries(durationStats).sort(([a], [b]) => Number(a) - Number(b)).forEach(([duration, stats]) => {
            console.log(`  ${duration}分 (${stats.slots}スロット): ${stats.count}件`);
            if (stats.examples.length <= 3) {
              stats.examples.forEach(ex => {
                console.log(`    - ${ex.title} (${ex.course}分+${ex.interval}分)`);
              });
            }
          });
          
          successCallback(events);
    })
    .catch(error => {
          console.error('❌ Error loading events:', error);
          failureCallback(error);
        });
      }
    });
  
    console.log('🎨 Rendering calendars...');
    
    // 両方のカレンダーをレンダリング
    monthCalendar.render();
    calendar.render();
    
    console.log('✅ Calendars rendered successfully');
    


    // レンダリング完了後にスロット高さを確認
    setTimeout(() => {
      console.log('🔍 Final height validation for all events:');
      
      const allEvents = document.querySelectorAll('.fc-timegrid-event[data-duration]');
      const heightStats = {};
      
      allEvents.forEach((element, index) => {
        const duration = parseInt(element.getAttribute('data-duration'));
        const actualHeight = element.offsetHeight;
        const expectedSlots = duration / 10;
        const slotHeight = 30; // ベースは30px（コンパクト化）
        const expectedHeight = expectedSlots * slotHeight;
        
        if (!heightStats[duration]) {
          heightStats[duration] = {
            count: 0,
            heights: [],
            expectedHeight,
            slots: expectedSlots
          };
        }
        
        heightStats[duration].count++;
        heightStats[duration].heights.push(actualHeight);
      });
      
      console.log('📊 Height validation summary:');
      Object.entries(heightStats)
        .sort(([a], [b]) => Number(a) - Number(b))
        .forEach(([duration, stats]) => {
          const avgHeight = Math.round(stats.heights.reduce((a, b) => a + b, 0) / stats.heights.length);
          const isCorrect = Math.abs(avgHeight - stats.expectedHeight) <= 5;
          const status = isCorrect ? '✅' : '❌';
          
          console.log(`  ${status} ${duration}分 (${stats.slots}スロット): ${stats.count}件`);
          console.log(`    Expected: ${stats.expectedHeight}px, Average: ${avgHeight}px`);
          
          if (!isCorrect) {
            console.warn(`    Height mismatch detected for ${duration}分 events!`);
          }
        });
    }, 2000);
  // インターバル情報を更新
    function updateIntervalInfo(extendedProps) {
      const intervalInfo = document.getElementById('currentIntervalInfo');
      const individualInterval = extendedProps?.individual_interval_minutes;
      const effectiveInterval = extendedProps?.effective_interval_minutes || 15;
      
      if (individualInterval !== null && individualInterval !== undefined) {
        intervalInfo.innerHTML = `<span class="badge bg-success">個別設定: ${individualInterval}分</span>`;
    } else {
        intervalInfo.innerHTML = `<span class="badge bg-primary">システム設定: ${effectiveInterval}分</span>`;
      }
    }

  // 初期データ読み込み（エラーハンドリング付き）
  try {
    loadCancellationStats();
    } catch (error) {
      console.log('📊 Initial cancellation stats loading skipped:', error.message);
    }
    
    // URLパラメータから編集モードをチェック
    const urlParams = new URLSearchParams(window.location.search);
    const editReservationId = urlParams.get('edit');
    
    if (editReservationId) {
      console.log('🔧 Edit mode detected for reservation:', editReservationId);
      
      // カレンダーが読み込まれた後に編集モーダルを開く
      setTimeout(() => {
        // カレンダーから該当のイベントを取得
        const event = calendar.getEventById(editReservationId);
        if (event) {
          console.log('✅ Found event for editing:', event);
          openReservationModal(event);
        } else {
          console.log('❌ Event not found for editing:', editReservationId);
          showMessage('編集する予約が見つかりませんでした', 'warning');
        }
      }, 1000); // カレンダーの読み込みを待つ
    }
    
    // 日付クリック時の予約表示関数
    function showDayReservations(date, reservations) {
      const dateStr = date.toLocaleDateString('ja-JP', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        weekday: 'long'
      });
      
      let html = `
        <div class="modal fade" id="dayReservationsModal" tabindex="-1">
          <div class="modal-dialog modal-lg">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">
                  <i class="fas fa-calendar-day me-2"></i>${dateStr}の予約一覧
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <div class="table-responsive">
                  <table class="table table-hover">
                    <thead class="table-light">
                      <tr>
                        <th>時間</th>
                        <th>顧客名</th>
                        <th>コース</th>
                        <th>ステータス</th>
                        <th>操作</th>
                      </tr>
                    </thead>
                    <tbody>
      `;
      
      reservations.forEach(reservation => {
        const startTime = new Date(reservation.start).toLocaleTimeString('ja-JP', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        const endTime = new Date(reservation.end).toLocaleTimeString('ja-JP', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        
        const statusBadge = getStatusBadge(reservation.status);
        
        html += `
          <tr>
            <td><strong>${startTime} - ${endTime}</strong></td>
            <td>${reservation.customer_name || '未設定'}</td>
            <td>${reservation.course || '未設定'}</td>
            <td>${statusBadge}</td>
            <td>
              <button class="btn btn-sm btn-outline-primary" onclick="editReservation(${reservation.id})">
                <i class="fas fa-edit"></i>
              </button>
            </td>
          </tr>
        `;
      });
      
      html += `
                    </tbody>
                  </table>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">閉じる</button>
                <button type="button" class="btn btn-primary" onclick="openNewReservationModal()">
                  <i class="fas fa-plus me-1"></i>新規予約
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // 既存のモーダルを削除してから新しいモーダルを追加
      const existingModal = document.getElementById('dayReservationsModal');
      if (existingModal) {
        existingModal.remove();
      }
      
      document.body.insertAdjacentHTML('beforeend', html);
      
      const modal = new bootstrap.Modal(document.getElementById('dayReservationsModal'));
      modal.show();
    }
    
    // ステータスバッジ生成関数
    function getStatusBadge(status) {
      const badges = {
        'tentative': '<span class="badge bg-warning">仮予約</span>',
        'confirmed': '<span class="badge bg-success">確定</span>',
        'cancelled': '<span class="badge bg-danger">キャンセル</span>',
        'completed': '<span class="badge bg-info">完了</span>',
        'no_show': '<span class="badge bg-secondary">無断キャンセル</span>'
      };
      return badges[status] || '<span class="badge bg-secondary">未設定</span>';
    }
    
    // 予約編集関数
    function editReservation(reservationId) {
      // モーダルを閉じる
      const modal = bootstrap.Modal.getInstance(document.getElementById('dayReservationsModal'));
      if (modal) {
        modal.hide();
      }
      
      // カレンダーで該当のイベントを開く
      setTimeout(() => {
        const event = calendar.getEventById(reservationId.toString());
        if (event) {
          openReservationModal(event);
        } else {
          showMessage('予約が見つかりませんでした', 'warning');
        }
      }, 300);
    }
    
    // 新規予約ボタン
    document.getElementById('newReservationBtn').addEventListener('click', () => {
      openNewReservationModal();
    });
    
    // モーダル関連
    const reservationModal = new bootstrap.Modal(document.getElementById('reservationModal'));
    const customerHistoryModal = new bootstrap.Modal(document.getElementById('customerHistoryModal'));
    
    // 顧客検索・選択機能を追加
    // 顧客検索機能
    let searchTimeout;
    const customerSearch = document.getElementById('customerSearch');
    const searchResults = document.getElementById('customerSearchResults');
    const selectedCustomerInfo = document.getElementById('selectedCustomerInfo');
    const newCustomerForm = document.getElementById('newCustomerForm');

    customerSearch.addEventListener('input', function() {
      const query = this.value.trim();
      
      clearTimeout(searchTimeout);
      
      if (query.length < 2) {
        hideSearchResults();
      return;
    }
    
      searchTimeout = setTimeout(() => {
        searchCustomers(query);
      }, 300);
    });

    // 検索結果以外をクリックしたら結果を隠す
    document.addEventListener('click', function(e) {
      if (!e.target.closest('#customerSearch') && !e.target.closest('#customerSearchResults')) {
        hideSearchResults();
      }
    });

    // 検索結果のクリックイベントを処理
    document.addEventListener('click', function(e) {
      const searchResultItem = e.target.closest('.search-result-item');
      if (searchResultItem) {
        const userId = searchResultItem.dataset.userId;
        const userName = searchResultItem.dataset.userName;
        const userPhone = searchResultItem.dataset.userPhone;
        const userEmail = searchResultItem.dataset.userEmail;
        
        console.log('Search result clicked:', { userId, userName, userPhone, userEmail });
        selectCustomer(userId, userName, userPhone, userEmail);
      }
    });

    function searchCustomers(query) {
      fetch(`/admin/users/search?query=${encodeURIComponent(query)}`, {
      headers: {
        'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
    })
    .then(response => {
      if (!response.ok) {
          if (response.status === 401) {
            // 認証エラーの場合、ログインページにリダイレクト
            window.location.href = '/admin_users/sign_in';
            throw new Error('認証が必要です');
      }
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      return response.json();
    })
    .then(data => {
        displaySearchResults(data.users, query);
      })
      .catch(error => {
        console.error('顧客検索エラー:', error);
        hideSearchResults();
      });
    }

    function displaySearchResults(users, query) {
      if (users.length === 0) {
        // 検索結果がない場合は新規顧客登録を提案
        searchResults.innerHTML = `
          <div class="p-3 text-center">
            <div class="text-muted mb-2">
              <i class="fas fa-search me-1"></i>
              「${query}」に該当する顧客が見つかりませんでした
            </div>
            <button type="button" class="btn btn-sm btn-primary" onclick="showNewCustomerForm('${query}')">
              <i class="fas fa-user-plus me-1"></i>新規顧客として登録
            </button>
          </div>
        `;
    } else {
        let html = '';
        users.forEach(user => {
          html += `
            <div class="search-result-item p-3 border-bottom" 
                 style="cursor: pointer; transition: background-color 0.2s;"
                 onmouseover="this.style.backgroundColor='#f8f9fa'"
                 onmouseout="this.style.backgroundColor='white'"
                 data-user-id="${user.id}"
                 data-user-name="${user.name || ''}"
                 data-user-phone="${user.phone_number || ''}"
                 data-user-email="${user.email || ''}">
              <div class="d-flex justify-content-between align-items-start">
                <div>
                  <div class="fw-bold">${user.name || '名前未設定'}</div>
                  <small class="text-muted">
                    ${user.phone_number || '電話番号未登録'}
                    ${user.email ? ` | ${user.email}` : ''}
                  </small>
                  ${user.last_visit ? `<br><small class="text-success">最終来店: ${user.last_visit}</small>` : ''}
                </div>
                <div class="text-end">
                  <small class="badge bg-info">${user.active_tickets}枚</small>
                </div>
              </div>
            </div>
          `;
        });
        searchResults.innerHTML = html;
      }
      
      searchResults.style.display = 'block';
    }

    function hideSearchResults() {
      searchResults.style.display = 'none';
    }

    function selectCustomer(userId, name, phone, email) {
      console.log('selectCustomer called with:', { userId, name, phone, email });
      
      // 選択された顧客情報を保存
      document.getElementById('selectedUserId').value = userId;
      document.getElementById('customerSearch').value = name;
      
      // 顧客情報を表示
      document.getElementById('selectedCustomerName').textContent = name;
      document.getElementById('selectedCustomerDetails').innerHTML = `
        ${phone || '電話番号未登録'} | 
        ${email || 'メール未登録'}
      `;
      
      // UI更新
      selectedCustomerInfo.style.display = 'block';
      newCustomerForm.style.display = 'none';
      hideSearchResults();
      
      // 検索フィールドを無効化（選択済みを示す）
      document.getElementById('customerSearch').disabled = true;
      document.getElementById('customerSearch').style.backgroundColor = '#e9ecef';
      
      // チケット情報を読み込み
      loadCustomerTickets(userId);
      
      // 成功メッセージを表示
      showMessage('顧客が選択されました', 'success');
      
      console.log('顧客が選択されました:', { userId, name, phone, email });
    }

    function showNewCustomerForm(initialName = '') {
      // 新規顧客フォームを表示
      newCustomerForm.style.display = 'block';
      selectedCustomerInfo.style.display = 'none';
      document.getElementById('selectedUserId').value = '';
      
      // 検索した名前を初期値として設定
      if (initialName) {
        document.getElementById('newCustomerName').value = initialName;
      }
      
      hideSearchResults();
      
      // フォーカスを名前フィールドに
      document.getElementById('newCustomerName').focus();
    }

    // 顧客選択をクリア
    document.getElementById('clearCustomerBtn').addEventListener('click', function() {
      document.getElementById('selectedUserId').value = '';
      document.getElementById('customerSearch').value = '';
      
      // 検索フィールドを有効化
      document.getElementById('customerSearch').disabled = false;
      document.getElementById('customerSearch').style.backgroundColor = 'white';
      
      selectedCustomerInfo.style.display = 'none';
      newCustomerForm.style.display = 'none';
      document.getElementById('ticketInfo').innerHTML = `
        <div class="text-muted">
          <i class="fas fa-info-circle me-1"></i>
          顧客を選択するとチケット情報が表示されます
        </div>
      `;
      customerSearch.focus();
      
      showMessage('顧客選択をクリアしました', 'info');
    });

    function resetReservationForm() {
      // フォームをリセット
      document.getElementById('reservationForm').reset();
      document.getElementById('currentReservationId').value = '';
      document.getElementById('selectedUserId').value = '';
      
      // キャンセル理由フィールドをリセット
      document.getElementById('cancellationReason').value = '';
      document.getElementById('cancellationReasonRow').style.display = 'none';
      
      // 検索フィールドを有効化
      document.getElementById('customerSearch').disabled = false;
      document.getElementById('customerSearch').style.backgroundColor = 'white';
      
      // UI表示をリセット
      selectedCustomerInfo.style.display = 'none';
      newCustomerForm.style.display = 'none';
      hideSearchResults();
      
      // チケット情報をリセット
      document.getElementById('ticketInfo').innerHTML = `
        <div class="text-muted">
          <i class="fas fa-info-circle me-1"></i>
          顧客を選択するとチケット情報が表示されます
        </div>
      `;
    }
    
    // この関数をスクリプトの先頭（line 530付近）に追加
    function getCourseDuration(course) {
      switch(course) {
        case '40分コース': return 40;
        case '60分コース': return 60;
        case '80分コース': return 80;
        default: return 60;
      }
    }
    // openReservationModal 関数を完全に置き換え（522行目付近）
    function openReservationModal(event) {
      // 既存の予約を編集モードで開く
      document.getElementById('reservationModalLabel').innerHTML = '<i class="fas fa-edit me-2"></i>予約編集';
      document.getElementById('deleteReservationBtn').style.display = 'block';
      
      // フォームをリセット
      resetReservationForm();
      
      // フォームに値を設定
      if (event) {
        // 予約IDを設定
        document.getElementById('currentReservationId').value = event.id;
        
        // 🔧 完全な修正: UTC変換を避けてローカル時間を直接取得
        const eventStart = event.start;
        
        // 日付の取得（ローカル時間として）
        const year = eventStart.getFullYear();
        const month = String(eventStart.getMonth() + 1).padStart(2, '0');
        const day = String(eventStart.getDate()).padStart(2, '0');
        const dateString = `${year}-${month}-${day}`;
        
        // 時間の取得（ローカル時間として）
        const hours = String(eventStart.getHours()).padStart(2, '0');
        const minutes = String(eventStart.getMinutes()).padStart(2, '0');
        const timeString = `${hours}:${minutes}`;
        
        console.log('🕐 Edit reservation time:', {
          original: eventStart,
          dateString: dateString,
          timeString: timeString
        });
        
        document.getElementById('reservationDate').value = dateString;
        document.getElementById('reservationTime').value = timeString;
        document.getElementById('reservationCourse').value = event.title.split(' - ')[1] || '';
        document.getElementById('reservationStatus').value = event.extendedProps?.status || 'confirmed';
        document.getElementById('reservationMemo').value = event.extendedProps?.note || '';
        
        // インターバル設定を設定
        const individualInterval = event.extendedProps?.individual_interval_minutes;
        document.getElementById('reservationInterval').value = individualInterval || '';
        
        // 現在のインターバル情報を更新
        updateIntervalInfo(event.extendedProps);
        
        // キャンセル理由を設定
        const cancellationReason = event.extendedProps?.cancellation_reason || '';
        document.getElementById('cancellationReason').value = cancellationReason;
        
        // キャンセルステータスの場合は理由フィールドを表示
        if (event.extendedProps?.status === 'cancelled') {
          document.getElementById('cancellationReasonRow').style.display = 'block';
        }
        
        // 顧客情報を設定（新しい顧客検索機能に対応）
        if (event.extendedProps?.customer) {
          const customer = event.extendedProps.customer;
          
          // 顧客選択状態を設定
          document.getElementById('selectedUserId').value = customer.id;
          document.getElementById('customerSearch').value = customer.name || '';
          
          // 顧客情報を表示
          document.getElementById('selectedCustomerName').textContent = customer.name || '';
          document.getElementById('selectedCustomerDetails').innerHTML = `
            ${customer.phone || '電話番号未登録'} | 
            ${customer.email || 'メール未登録'}
          `;
          
          // UI更新
          document.getElementById('selectedCustomerInfo').style.display = 'block';
          document.getElementById('newCustomerForm').style.display = 'none';
          
          // 検索フィールドを無効化
          document.getElementById('customerSearch').disabled = true;
          document.getElementById('customerSearch').style.backgroundColor = '#e9ecef';
          
          // チケット情報を取得
          loadCustomerTickets(customer.id);
        }
      }
      
      reservationModal.show();
    }

    // openNewReservationModal 関数も同様に修正（561行目付近）
    function openNewReservationModal(start, end) {
      // 新規予約モードで開く
      document.getElementById('reservationModalLabel').innerHTML = '<i class="fas fa-calendar-plus me-2"></i>新規予約';
      document.getElementById('deleteReservationBtn').style.display = 'none';
      
      // フォームをリセット
      resetReservationForm();
      
      // 予約IDをクリア
      document.getElementById('currentReservationId').value = '';
      
      // 日時を設定
      if (start) {
        // 🔧 完全な修正: UTC変換を避けてローカル時間を直接取得
        const eventStart = new Date(start);
        
        const year = eventStart.getFullYear();
        const month = String(eventStart.getMonth() + 1).padStart(2, '0');
        const day = String(eventStart.getDate()).padStart(2, '0');
        const dateString = `${year}-${month}-${day}`;
        
        const hours = String(eventStart.getHours()).padStart(2, '0');
        const minutes = String(eventStart.getMinutes()).padStart(2, '0');
        const timeString = `${hours}:${minutes}`;
        
        console.log('🕐 New reservation time:', {
          original: start,
          eventStart: eventStart,
          dateString: dateString,
          timeString: timeString
        });
        
        document.getElementById('reservationDate').value = dateString;
        document.getElementById('reservationTime').value = timeString;
      }
      
      reservationModal.show();
    }
    
    // イベントの時間更新機能
    function updateReservationTime(event) {
      const reservationId = event.id;
      const newStart = event.start;
      const newEnd = event.end;
      
      console.log('🔄 Updating reservation time:', {
        id: reservationId,
        start: newStart,
        end: newEnd,
        extendedProps: event.extendedProps
      });
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      // ローカル時間を日本時間として明示的にフォーマット（UTC変換を避ける）
      function formatAsJSTDateTime(date) {
        if (!date) return null;
        
        // TimeWithZoneオブジェクトの場合は適切なメソッドを使用
        const year = date.getFullYear ? date.getFullYear() : date.year;
        const month = date.getMonth ? String(date.getMonth() + 1).padStart(2, '0') : String(date.month).padStart(2, '0');
        const day = date.getDate ? String(date.getDate()).padStart(2, '0') : String(date.day).padStart(2, '0');
        const hours = date.getHours ? String(date.getHours()).padStart(2, '0') : String(date.hour).padStart(2, '0');
        const minutes = date.getMinutes ? String(date.getMinutes()).padStart(2, '0') : String(date.min).padStart(2, '0');
        const seconds = date.getSeconds ? String(date.getSeconds()).padStart(2, '0') : String(date.sec).padStart(2, '0');
        
        // JST（UTC+09:00）として明示的にタイムゾーンを指定
        return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}+09:00`;
      }
      
      // ドラッグ時の時間をそのまま送信（コントローラーで適切に処理）
      const startISO = formatAsJSTDateTime(newStart);
      const endISO = formatAsJSTDateTime(newEnd);
      
      console.log('🕐 Drag time conversion:', {
        start: newStart,
        end: newEnd,
        startISO: startISO,
        endISO: endISO,
        effectiveIntervalMinutes: event.extendedProps?.effective_interval_minutes || 0
      });
      
      console.log('🕐 Time conversion:', {
        start: newStart,
        end: newEnd,
        startISO: startISO,
        endISO: endISO,
        startLocalTime: newStart.toLocaleString('ja-JP'),
        endLocalTime: newEnd.toLocaleString('ja-JP'),
        effectiveIntervalMinutes: event.extendedProps?.effective_interval_minutes || 0
      });
      
      // 時間更新APIを呼び出し
      fetch(`/admin/reservations/${reservationId}`, {
        method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({
          reservation: {
            start_time: startISO,
            end_time: endISO
          },
          is_drag_update: true
        })
    })
    .then(response => {
        console.log('📡 Update response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || '時間の更新に失敗しました');
          });
        }
      return response.json();
    })
    .then(data => {
        console.log('✅ Time update response:', data);
      
      if (data.success) {
          showMessage('予約時間を更新しました', 'success');
          
          // 成功時もカレンダーを再読み込みして最新データを表示
          setTimeout(() => {
            calendar.refetchEvents();
          }, 500);
        } else {
          throw new Error(data.error || '時間の更新に失敗しました');
        }
      })
      .catch(error => {
        console.error('❌ Time update error:', error);
        showMessage('時間の更新に失敗しました: ' + error.message, 'danger');
        
        // エラー時はカレンダーを再読み込み
        calendar.refetchEvents();
      });
    }
    
    function loadCustomerTickets(customerId) {
      if (!customerId) return;
      
      fetch(`/admin/users/${customerId}/tickets`)
        .then(response => response.json())
        .then(tickets => {
          const ticketInfo = document.getElementById('ticketInfo');
          if (tickets.length > 0) {
            let html = '<div class="row">';
            tickets.forEach(ticket => {
              const statusClass = ticket.status === 'expired' ? 'text-danger' : 
                                ticket.status === 'low' ? 'text-warning' : 'text-success';
              html += `
                <div class="col-md-6 mb-2">
                  <div class="card">
                    <div class="card-body p-2">
                      <h6 class="card-title mb-1">${ticket.name}</h6>
                                             <p class="card-text mb-1">
                         <small class="text-muted">
                           残り: ${ticket.remaining}/${ticket.total}回
                         </small>
                       </p>
                       <p class="card-text mb-1">
                         <small class="text-muted">
                           期限: ${ticket.expires_at || 'なし'}
                         </small>
                       </p>
                       <p class="card-text mb-0">
                         <small class="${statusClass}">
                           ${ticket.status === 'expired' ? '期限切れ' : 
                             ticket.status === 'low' ? '残り少ない' : '利用可能'}
                         </small>
                       </p>
                    </div>
                  </div>
                </div>
              `;
            });
            html += '</div>';
            ticketInfo.innerHTML = html;
      } else {
            ticketInfo.innerHTML = '<div class="text-muted">チケットがありません</div>';
      }
    })
    .catch(error => {
          console.error('Error loading tickets:', error);
          document.getElementById('ticketInfo').innerHTML = '<div class="text-danger">チケット情報の取得に失敗しました</div>';
        });
    }
    
    // ステータス変更時の処理
    document.getElementById('reservationStatus').addEventListener('change', function() {
      const status = this.value;
      console.log('📊 Status changed to:', status);
      
      // キャンセル理由フィールドの表示/非表示
      const cancellationReasonRow = document.getElementById('cancellationReasonRow');
      if (status === 'cancelled') {
        cancellationReasonRow.style.display = 'block';
      } else {
        cancellationReasonRow.style.display = 'none';
        document.getElementById('cancellationReason').value = '';
      }
    });

    // インターバル設定変更時の処理
    document.getElementById('reservationInterval').addEventListener('change', function() {
      const intervalValue = this.value;
      const intervalInfo = document.getElementById('currentIntervalInfo');
      
      if (intervalValue === '') {
        intervalInfo.innerHTML = '<span class="badge bg-primary">システム設定: 15分</span>';
      } else {
        intervalInfo.innerHTML = `<span class="badge bg-success">個別設定: ${intervalValue}分</span>`;
      }
    });

    // 保存ボタン
    document.getElementById('saveReservationBtn').addEventListener('click', function() {
      console.log('💾 Save button clicked');
      
      // 顧客選択のチェック
      const selectedUserId = document.getElementById('selectedUserId').value;
      if (!selectedUserId) {
        console.log('❌ No customer selected');
        showMessage('顧客を選択してください', 'warning');
      return;
    }
    
      // 必須フィールドのチェック
      const reservationDate = document.getElementById('reservationDate').value;
      const reservationTime = document.getElementById('reservationTime').value;
      const reservationCourse = document.getElementById('reservationCourse').value;
      
      if (!reservationDate || !reservationTime || !reservationCourse) {
        console.log('❌ Required fields missing:', { reservationDate, reservationTime, reservationCourse });
        showMessage('日時とコースを入力してください', 'warning');
        return;
      }
      
      // 時間の範囲チェック（10:00-21:00）
      const timeParts = reservationTime.split(':');
      const hours = parseInt(timeParts[0]);
      const minutes = parseInt(timeParts[1]);
      
      if (hours < 10 || hours >= 21) {
        console.log('❌ Time out of range:', reservationTime);
        showMessage('予約時間は10:00から21:00の間で入力してください', 'warning');
        return;
      }
      
      // コース時間とインターバル時間を考慮した営業時間チェック
      const courseDuration = getCourseDuration(reservationCourse);
      const checkIntervalValue = document.getElementById('reservationInterval').value;
      const intervalDuration = checkIntervalValue ? parseInt(checkIntervalValue) : 15; // システムデフォルト
      const totalDuration = courseDuration + intervalDuration;
      
      // 予約終了時刻を計算
      const startTime = new Date(`${reservationDate}T${reservationTime}:00`);
      const endTime = new Date(startTime.getTime() + totalDuration * 60 * 1000);
      const endHour = endTime.getHours();
      const endMinute = endTime.getMinutes();
      
      console.log('🕐 Reservation time check:', {
        startTime: reservationTime,
        courseDuration,
        intervalDuration,
        totalDuration,
        endTime: `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`,
        businessEnd: '21:00'
      });
      
      if (endHour > 21 || (endHour === 21 && endMinute > 0)) {
        console.log('❌ Reservation extends beyond business hours');
        showMessage(`この予約は営業時間外になります。終了時刻: ${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`, 'warning');
        return;
      }
      
      // ボタンを無効化
      const saveBtn = this;
      const originalText = saveBtn.innerHTML;
    saveBtn.disabled = true;
      saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>保存中...';
      
      // 現在の予約IDを取得
      const reservationId = getCurrentReservationId();
      const isEditMode = reservationId && reservationId !== '';
      
      // 選択された顧客IDを取得（既に宣言済み）
      console.log('👤 Selected user ID:', selectedUserId);
      
      // キャンセル理由のチェック
      const status = document.getElementById('reservationStatus').value;
      const cancellationReason = document.getElementById('cancellationReason').value;
      
      if (status === 'cancelled' && !cancellationReason.trim()) {
        console.log('❌ Cancellation reason required');
        showMessage('キャンセル理由を入力してください', 'warning');
        return;
      }
      
      // インターバル設定を取得
      const intervalValue = document.getElementById('reservationInterval').value;
      let individualIntervalMinutes = null;
      
      if (intervalValue !== '' && !isNaN(parseInt(intervalValue))) {
        individualIntervalMinutes = parseInt(intervalValue);
      }
      
      console.log('🕐 Interval setting:', { intervalValue, individualIntervalMinutes });
      
      // 予約データを作成
      const reservationData = {
        reservation: {
          user_id: selectedUserId,
          name: document.getElementById('customerSearch').value,
          date: document.getElementById('reservationDate').value,
          time: document.getElementById('reservationTime').value,
          course: document.getElementById('reservationCourse').value,
          status: document.getElementById('reservationStatus').value,
          cancellation_reason: cancellationReason,
          individual_interval_minutes: individualIntervalMinutes,
          note: document.getElementById('reservationMemo').value
        }
      };
      
      console.log('💾 Saving reservation:', reservationData);
      console.log('🕐 Individual interval minutes in payload:', reservationData.reservation.individual_interval_minutes);
      console.log('📝 Edit mode:', isEditMode);
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      console.log('🔐 CSRF Token:', csrfToken);
      
      // API URLとメソッドを決定
      const url = isEditMode ? `/admin/reservations/${reservationId}` : '/admin/reservations';
      const method = isEditMode ? 'PATCH' : 'POST';
      console.log('🌐 API URL:', url);
      console.log('📡 Method:', method);
      
      // APIを呼び出し
      fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify(reservationData)
      })
      .then(response => {
        console.log('📡 Save response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || '保存に失敗しました');
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ Save response:', data);
        
        if (data.success) {
          // 成功メッセージを表示
          const message = isEditMode ? '予約を更新しました' : '予約を作成しました';
          showMessage(message, 'success');
          
          // モーダルを閉じる
          reservationModal.hide();
          
          // カレンダーを更新
          calendar.refetchEvents();
          
          // キャンセル統計の更新は無効化（エラーの原因となるため）
          console.log('✅ Reservation saved successfully, calendar updated');
  } else {
          throw new Error(data.error || '保存に失敗しました');
        }
      })
      .catch(error => {
        console.error('❌ Save error:', error);
        alert('保存エラー: ' + error.message);
      })
      .finally(() => {
        // ボタンを元に戻す
      saveBtn.disabled = false;
        saveBtn.innerHTML = originalText;
      });
    });
    
    // 削除ボタン
    document.getElementById('deleteReservationBtn').addEventListener('click', function() {
      if (!confirm('この予約を削除しますか？\n削除した予約は復元できません。')) {
        return;
      }
      
      // ボタンを無効化
      const deleteBtn = this;
      const originalText = deleteBtn.innerHTML;
      deleteBtn.disabled = true;
      deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>削除中...';
      
      // 現在の予約IDを取得（モーダルから）
      const reservationId = getCurrentReservationId();
      
      if (!reservationId) {
        alert('削除する予約が選択されていません');
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = originalText;
        return;
      }
      
      console.log('🗑️ Deleting reservation:', reservationId);
      
      // CSRF トークンを取得
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      // 削除APIを呼び出し
      fetch(`/admin/reservations/${reservationId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        }
      })
      .then(response => {
        console.log('📡 Delete response status:', response.status);
        
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || '削除に失敗しました');
          });
        }
        return response.json();
      })
      .then(data => {
        console.log('✅ Delete response:', data);
        
        if (data.success) {
          // 成功メッセージを表示
          showMessage('予約を削除しました', 'success');
          
          // モーダルを閉じる
          reservationModal.hide();
          
          // カレンダーを更新
          calendar.refetchEvents();
        } else {
          throw new Error(data.error || '削除に失敗しました');
        }
      })
      .catch(error => {
        console.error('❌ Delete error:', error);
        alert('削除エラー: ' + error.message);
      })
      .finally(() => {
        // ボタンを元に戻す
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = originalText;
      });
    });
    
    // 現在の予約IDを取得する関数
    function getCurrentReservationId() {
      // モーダルから予約IDを取得する方法を実装
      // 例: モーダルに隠しフィールドがある場合
      const hiddenField = document.getElementById('currentReservationId');
      return hiddenField ? hiddenField.value : null;
    }
    
    // メッセージ表示関数
    function showMessage(message, type = 'info') {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
      alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      
      // ページの上部に表示
      const container = document.querySelector('.calendar-container');
      container.insertBefore(alertDiv, container.firstChild);
      
      // 3秒後に自動で消す
      setTimeout(() => {
        alertDiv.remove();
      }, 3000);
    }
    
    // キャンセル履歴モーダルを開く
    window.openCancelledHistoryModal = function() {
      console.log('📊 Opening cancelled history modal');
      
      // キャンセル統計を取得してモーダルに表示
      fetch('/admin/reservations/cancellation_stats')
        .then(response => {
          console.log('📊 Response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('📊 Received data for modal:', data);
          
          // モーダルの統計を更新
          document.getElementById('modalCancelledCount').textContent = data.cancelled_count;
          document.getElementById('modalCancelledRate').textContent = data.cancelled_rate + '%';
          document.getElementById('modalTotalReservations').textContent = data.total_reservations || 0;
          
          // モーダルの履歴を更新
          const modalHistoryContainer = document.getElementById('modalCancelledHistory');
          if (data.cancelled_history && data.cancelled_history.length > 0) {
            console.log('📊 Rendering modal history:', data.cancelled_history.length, 'items');
            const historyHtml = data.cancelled_history.map(item => `
              <div class="border-bottom pb-3 mb-3">
                <div class="d-flex justify-content-between align-items-start">
                  <div class="flex-grow-1">
                    <div class="fw-bold text-dark fs-6">${item.customer_name}</div>
                    <div class="small text-muted mt-1">
                      <i class="fas fa-calendar me-1"></i>${item.cancelled_at}
                      <span class="mx-2">|</span>
                      <i class="fas fa-clock me-1"></i>${item.course}
                    </div>
                  </div>
                </div>
                <div class="mt-2">
                  <span class="badge bg-danger">
                    <i class="fas fa-times-circle me-1"></i>
                    ${item.reason || '理由未入力'}
                  </span>
                </div>
              </div>
            `).join('');
            modalHistoryContainer.innerHTML = historyHtml;
          } else {
            console.log('📊 No cancellation history found for modal');
            modalHistoryContainer.innerHTML = `
              <div class="text-muted text-center py-4">
                <i class="fas fa-info-circle me-1"></i>
                キャンセル履歴がありません
              </div>
            `;
          }
          
          // モーダルを表示
          const modal = new bootstrap.Modal(document.getElementById('cancelledHistoryModal'));
          modal.show();
        })
        .catch(error => {
          console.error('❌ キャンセル統計の取得に失敗:', error);
          // エラー時もモーダルを表示（デフォルト値）
          const modalCancelledCount = document.getElementById('modalCancelledCount');
          const modalCancelledRate = document.getElementById('modalCancelledRate');
          const modalTotalReservations = document.getElementById('modalTotalReservations');
          const modalCancelledHistory = document.getElementById('modalCancelledHistory');
          
          if (modalCancelledCount) modalCancelledCount.textContent = '0';
          if (modalCancelledRate) modalCancelledRate.textContent = '0%';
          if (modalTotalReservations) modalTotalReservations.textContent = '0';
          if (modalCancelledHistory) {
            modalCancelledHistory.innerHTML = `
              <div class="text-muted text-center py-4">
                <i class="fas fa-exclamation-triangle me-1"></i>
                統計の取得に失敗しました
              </div>
            `;
          }
          
          const modal = new bootstrap.Modal(document.getElementById('cancelledHistoryModal'));
          modal.show();
        });
    };
  });
</script>

<style>
  /* インターバルイベントのスタイル */
  .fc-event.interval {
    font-weight: 500;
    border-radius: 4px;
  }
  
  /* システム設定のインターバル（灰色） */
  .fc-event.interval.system-interval {
    background-color: #6c757d !important;
    border-color: #545b62 !important;
    color: white !important;
  }
  
  /* 個別設定のインターバル（灰色） */
  .fc-event.interval.individual-interval {
    background-color: #6c757d !important;
    border-color: #545b62 !important;
    color: white !important;
    font-weight: 600;
  }
  
  /* 個別設定のインターバルに特別なアイコンを追加 */
  .fc-event.interval.individual-interval::before {
    content: "⚙️ ";
    margin-right: 2px;
  }
  
  /* ホバー時の効果 */
  .fc-event.interval:hover {
    opacity: 0.8;
    transform: scale(1.02);
    transition: all 0.2s ease;
  }
  
  /* 個別設定のインターバルにツールチップ風のスタイル */
  .fc-event.interval.individual-interval {
    position: relative;
  }
  
  .fc-event.interval.individual-interval:hover::after {
    content: "個別設定";
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 10px;
    white-space: nowrap;
    z-index: 1000;
}
</style>