<!-- app/views/admin/reservations/_status_management.html.erb -->
<div class="card">
  <div class="card-header bg-light">
    <h6 class="mb-0">
      <i class="fas fa-tasks me-2"></i>予約ステータス管理
    </h6>
  </div>
  <div class="card-body">
    <!-- 現在のステータス表示 -->
    <div class="row mb-3">
      <div class="col-md-6">
        <label class="form-label">現在のステータス</label>
        <div class="input-group">
          <span class="input-group-text">
            <i class="fas fa-circle status-indicator" id="currentStatusIndicator"></i>
          </span>
          <input type="text" class="form-control" id="currentStatusText" readonly>
        </div>
      </div>
      <div class="col-md-6">
        <label class="form-label">最終更新</label>
        <input type="text" class="form-control" id="lastUpdatedText" readonly>
      </div>
    </div>

    <!-- ステータス変更セクション -->
    <div class="border rounded p-3 mb-3">
      <h6 class="mb-3">
        <i class="fas fa-edit me-2"></i>ステータス変更
      </h6>
      
      <div class="row">
        <div class="col-md-8">
          <label for="newStatus" class="form-label">新しいステータス</label>
          <select class="form-select" id="newStatus">
            <option value="confirmed">✅ 確定</option>
            <option value="tentative">⏳ 仮予約</option>
            <option value="cancelled">❌ キャンセル</option>
            <option value="completed">✔️ 完了</option>
            <option value="no_show">⚠️ 無断キャンセル</option>
          </select>
        </div>
        <div class="col-md-4 d-flex align-items-end">
          <button type="button" class="btn btn-primary w-100" id="updateStatusBtn">
            <i class="fas fa-save me-1"></i>更新
          </button>
        </div>
      </div>

      <!-- キャンセル理由入力エリア -->
      <div id="cancellationReasonArea" class="mt-3" style="display: none;">
        <label for="cancellationReason" class="form-label">
          キャンセル理由 <span class="text-danger">*</span>
        </label>
        <textarea class="form-control" id="cancellationReason" rows="3" 
                  placeholder="キャンセルの理由を入力してください（例：お客様都合、体調不良、急用、etc.）"></textarea>
        <div class="form-text">
          この情報は管理用として記録され、必要に応じてお客様への連絡に使用されます。
        </div>
      </div>
    </div>

    <!-- クイックアクションボタン -->
    <div class="border rounded p-3 mb-3">
      <h6 class="mb-3">
        <i class="fas fa-bolt me-2"></i>クイックアクション
      </h6>
      <div class="row g-2">
        <div class="col-md-3">
          <button type="button" class="btn btn-success w-100 btn-sm" data-action="confirm">
            <i class="fas fa-check me-1"></i>確定
          </button>
        </div>
        <div class="col-md-3">
          <button type="button" class="btn btn-warning w-100 btn-sm" data-action="tentative">
            <i class="fas fa-clock me-1"></i>仮予約
          </button>
        </div>
        <div class="col-md-3">
          <button type="button" class="btn btn-secondary w-100 btn-sm" data-action="complete">
            <i class="fas fa-flag-checkered me-1"></i>完了
          </button>
        </div>
        <div class="col-md-3">
          <button type="button" class="btn btn-danger w-100 btn-sm" data-action="cancel">
            <i class="fas fa-times me-1"></i>キャンセル
          </button>
        </div>
      </div>
    </div>

    <!-- 履歴情報 -->
    <div class="border rounded p-3">
      <h6 class="mb-3">
        <i class="fas fa-history me-2"></i>履歴情報
      </h6>
      <div class="row">
        <div class="col-md-6">
          <small class="text-muted">作成日時</small>
          <div id="createdAt">-</div>
        </div>
        <div class="col-md-6">
          <small class="text-muted">キャンセル日時</small>
          <div id="cancelledAt">-</div>
        </div>
      </div>
      <div class="mt-2" id="cancellationReasonDisplay" style="display: none;">
        <small class="text-muted">キャンセル理由</small>
        <div class="text-break"></div>
      </div>
    </div>
  </div>
</div>

<style>
.status-indicator {
  font-size: 0.8rem;
}

.status-indicator.confirmed {
  color: #28a745;
}

.status-indicator.tentative {
  color: #ffc107;
}

.status-indicator.cancelled {
  color: #dc3545;
}

.status-indicator.completed {
  color: #6c757d;
}

.status-indicator.no_show {
  color: #fd7e14;
}

.btn[data-action] {
  transition: all 0.2s ease;
}

.btn[data-action]:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // ステータス管理機能の初期化
  initializeStatusManagement();
});

function initializeStatusManagement() {
  const newStatusSelect = document.getElementById('newStatus');
  const cancellationArea = document.getElementById('cancellationReasonArea');
  const updateBtn = document.getElementById('updateStatusBtn');
  const quickActionBtns = document.querySelectorAll('[data-action]');

  // ステータス選択時の処理
  if (newStatusSelect && cancellationArea) {
    newStatusSelect.addEventListener('change', function() {
      if (this.value === 'cancelled') {
        cancellationArea.style.display = 'block';
        document.getElementById('cancellationReason').required = true;
      } else {
        cancellationArea.style.display = 'none';
        document.getElementById('cancellationReason').required = false;
      }
    });
  }

  // ステータス更新ボタン
  if (updateBtn) {
    updateBtn.addEventListener('click', function() {
      const newStatus = newStatusSelect.value;
      const cancellationReason = document.getElementById('cancellationReason').value;
      
      if (newStatus === 'cancelled' && !cancellationReason.trim()) {
        alert('キャンセル理由を入力してください');
        document.getElementById('cancellationReason').focus();
        return;
      }
      
      updateReservationStatus(newStatus, cancellationReason);
    });
  }

  // クイックアクションボタン
  quickActionBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      const action = this.getAttribute('data-action');
      let status;
      
      switch(action) {
        case 'confirm':
          status = 'confirmed';
          break;
        case 'tentative':
          status = 'tentative';
          break;
        case 'complete':
          status = 'completed';
          break;
        case 'cancel':
          status = 'cancelled';
          // キャンセルの場合は理由入力を促す
          newStatusSelect.value = 'cancelled';
          newStatusSelect.dispatchEvent(new Event('change'));
          return;
      }
      
      if (status) {
        newStatusSelect.value = status;
        updateReservationStatus(status);
      }
    });
  });
}

function updateReservationStatus(status, cancellationReason = '') {
  const reservationId = document.getElementById('reservationId').value;
  
  if (!reservationId) {
    alert('予約IDが見つかりません');
    return;
  }

  const confirmMessage = getStatusChangeConfirmMessage(status);
  if (!confirm(confirmMessage)) {
    return;
  }

  // ボタンを無効化
  const updateBtn = document.getElementById('updateStatusBtn');
  if (updateBtn) {
    updateBtn.disabled = true;
    updateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>更新中...';
  }

  const url = status === 'cancelled' 
    ? `/admin/reservations/${reservationId}/cancel`
    : `/admin/reservations/${reservationId}/change_status`;

  const body = status === 'cancelled'
    ? { cancellation_reason: cancellationReason }
    : { status: status };

  fetch(url, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
    },
    body: JSON.stringify(body)
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showStatusMessage(data.message, 'success');
      
      // ステータス表示を更新
      updateStatusDisplay(data.status || status);
      
      // カレンダーの更新
      if (window.pageCalendar) {
        window.pageCalendar.refetchEvents();
      }
      
      // モーダルが開いている場合は閉じる
      const modal = bootstrap.Modal.getInstance(document.getElementById('reservationModal'));
      if (modal) {
        setTimeout(() => modal.hide(), 1500);
      }
      
    } else {
      showStatusMessage(data.error || 'ステータス更新に失敗しました', 'error');
    }
  })
  .catch(error => {
    console.error('Status update failed:', error);
    showStatusMessage('ステータス更新中にエラーが発生しました', 'error');
  })
  .finally(() => {
    // ボタンを元に戻す
    if (updateBtn) {
      updateBtn.disabled = false;
      updateBtn.innerHTML = '<i class="fas fa-save me-1"></i>更新';
    }
  });
}

function getStatusChangeConfirmMessage(status) {
  switch(status) {
    case 'confirmed':
      return 'この予約を確定しますか？';
    case 'tentative':
      return 'この予約を仮予約に変更しますか？';
    case 'cancelled':
      return 'この予約をキャンセルしますか？\n※この操作により、お客様にキャンセル通知が送信される場合があります。';
    case 'completed':
      return 'この予約を完了にしますか？';
    case 'no_show':
      return 'この予約を無断キャンセルとして記録しますか？';
    default:
      return 'ステータスを変更しますか？';
  }
}

function updateStatusDisplay(status) {
  const statusIndicator = document.getElementById('currentStatusIndicator');
  const statusText = document.getElementById('currentStatusText');
  const lastUpdated = document.getElementById('lastUpdatedText');
  
  if (statusIndicator) {
    statusIndicator.className = `fas fa-circle status-indicator ${status}`;
  }
  
  if (statusText) {
    const statusLabels = {
      'confirmed': '✅ 確定',
      'tentative': '⏳ 仮予約',
      'cancelled': '❌ キャンセル',
      'completed': '✔️ 完了',
      'no_show': '⚠️ 無断キャンセル'
    };
    statusText.value = statusLabels[status] || status;
  }
  
  if (lastUpdated) {
    lastUpdated.value = new Date().toLocaleString('ja-JP');
  }
}

function showStatusMessage(message, type) {
  const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
  const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
  
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
  alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
  alertDiv.innerHTML = `
    <i class="fas ${iconClass} me-2"></i>${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  
  document.body.appendChild(alertDiv);
  
  setTimeout(() => {
    if (alertDiv.parentNode) {
      alertDiv.parentNode.removeChild(alertDiv);
    }
  }, 5000);
}

// 予約データでフォームを初期化する関数
function initializeStatusForm(reservationData) {
  if (!reservationData) return;
  
  // 現在のステータス表示
  updateStatusDisplay(reservationData.status || 'confirmed');
  
  // 履歴情報の更新
  const createdAtEl = document.getElementById('createdAt');
  const cancelledAtEl = document.getElementById('cancelledAt');
  const cancellationReasonEl = document.getElementById('cancellationReasonDisplay');
  
  if (createdAtEl && reservationData.created_at) {
    createdAtEl.textContent = new Date(reservationData.created_at).toLocaleString('ja-JP');
  }
  
  if (cancelledAtEl) {
    if (reservationData.cancelled_at) {
      cancelledAtEl.textContent = new Date(reservationData.cancelled_at).toLocaleString('ja-JP');
    } else {
      cancelledAtEl.textContent = '-';
    }
  }
  
  if (cancellationReasonEl) {
    if (reservationData.cancellation_reason) {
      cancellationReasonEl.style.display = 'block';
      cancellationReasonEl.querySelector('div').textContent = reservationData.cancellation_reason;
    } else {
      cancellationReasonEl.style.display = 'none';
    }
  }
  
  // 新しいステータス選択欄のデフォルト値設定
  const newStatusSelect = document.getElementById('newStatus');
  if (newStatusSelect) {
    newStatusSelect.value = reservationData.status || 'confirmed';
  }
}

// グローバル関数として公開
window.initializeStatusForm = initializeStatusForm;
window.updateReservationStatus = updateReservationStatus;
</script>